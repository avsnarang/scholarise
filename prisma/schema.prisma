generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Branch {
  id                           String                        @id @default(cuid())
  name                         String
  code                         String                        @unique
  address                      String?
  city                         String?
  state                        String?
  country                      String?
  phone                        String?
  email                        String?
  logoUrl                      String?
  createdAt                    DateTime                      @default(now())
  updatedAt                    DateTime                      @updatedAt
  order                        Int                           @default(0)

  AssessmentCategory           AssessmentCategory[]
  AssessmentConfiguration      AssessmentConfiguration[]
  AssessmentMarks              AssessmentMarks[]
  assessmentPermissions        AssessmentPermission[]
  assessmentSchemas            AssessmentSchema[]
  backgroundTasks              BackgroundTask[]
  chapters                     Chapter[]
  classes                      Class[]
  classwiseFees                ClasswiseFee[]
  communicationMessages        CommunicationMessage[]
  communicationSettings        CommunicationSettings?
  concessionApprovalSettings   ConcessionApprovalSettings[]
  concessionTypes              ConcessionType[]
  conversations                Conversation[]
  courtesyCallFeedbacks        CourtesyCallFeedback[]
  departments                  Department[]
  designations                 Designation[]
  emailConfiguration           EmailConfiguration?
  employees                    Employee[]
  employeeBranchAccess         EmployeeBranchAccess[]
  ExamConfiguration            ExamConfiguration[]
  ExamSchedule                 ExamSchedule[]
  ExamType                     ExamType[]
  feeCollections               FeeCollection[]
  feeHeads                     FeeHead[]
  feeTerms                     FeeTerm[]
  gradeScales                  GradeScale[]
  leavePolicies                LeavePolicy[]
  MarksEntry                   MarksEntry[]
  moneyCollections             MoneyCollection[]
  rbacRoles                    RbacRole[]
  SeatingPlan                  SeatingPlan[]
  staffMoves                   StaffMove[]
  students                     Student[]
  studentAssessmentScores      StudentAssessmentScore[]
  studentConcessions           StudentConcession[]
  subjectTeachers              SubjectTeacher[]
  teachers                     Teacher[]
  terms                        Term[]
  transportBuses               TransportBus[]
  transportInspections         TransportBusInspection[]
  transportConfigurations      TransportConfiguration?
  transportFeeStructures       TransportFeeStructure[]
  transportInspectionTemplates TransportInspectionTemplate[]
  transportNotifications       TransportNotification[]
  transportNotificationConfigs TransportNotificationConfig[]
  transportRoutes              TransportRoute[]
  transportStaff               TransportStaff[]
  userRoles                    UserRole[]
  whatsappTemplates            WhatsAppTemplate[]
  attendanceDevices            AttendanceDevice[]
  attendanceLocations          AttendanceLocation[]
  attendanceWindows            AttendanceWindow[]
  locationTypes                LocationType[]
  admissionInquiries           AdmissionInquiry[]
  automationLogs               AutomationLog[]
  paymentGatewayTransactions   PaymentGatewayTransaction[]
  paymentRequests              PaymentRequest[]
  actionItems                  ActionItem[]
}

model User {
  id             String          @id
  email          String?
  firstName      String?
  lastName       String?
  phone          String?
  avatarUrl      String?
  isActive       Boolean         @default(true)
  lastLoginAt    DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  metadata       Json?
  authIdentifier String?         @unique
  userType       String?

  employee       Employee?
  parent         Parent?
  staffMoves     StaffMove[]
  student        Student?
  teacher        Teacher?
  userRoles      UserRole[]
  userPreferences UserPreferences[]

  @@index([authIdentifier])
  @@index([email])
  @@index([userType])
  @@index([isActive])
}

model UserPreferences {
  id          String   @id @default(cuid())
  userId      String   
  module      String   // e.g., "STUDENT_LIST", "TEACHER_LIST"
  preferences Json     // Store sort steps and other UI preferences
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, module])
  @@index([userId])
}

model Student {
  id                      String                   @id @default(cuid())
  admissionNumber         String                   @unique
  firstName               String
  lastName                String
  dateOfBirth             DateTime
  gender                  String
  address                 String?
  phone                   String?
  email                   String?
  personalEmail           String?
  bloodGroup              String?
  religion                String?
  nationality             String?
  caste                   String?
  aadharNumber            String?
  udiseId                 String?
  joinDate                DateTime                 @default(now())
  dateOfAdmission         DateTime?
  firstJoinedSessionId    String?
  rollNumber              Int?                     @db.SmallInt
  isActive                Boolean                  @default(true) // TODO: Remove in future migration
  status                  StudentStatus            @default(ACTIVE)
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  branchId                String
  parentId                String?
  sectionId               String?
  userId                  String?                  @unique
  username                String?
  password                String?
  permanentAddress        String?
  permanentCity           String?
  permanentState          String?
  permanentCountry        String?
  permanentZipCode        String?
  correspondenceAddress   String?
  correspondenceCity      String?
  correspondenceState     String?
  correspondenceCountry   String?
  correspondenceZipCode   String?
  enrolledYear            Int?
  residenceType           String?
  medicalConditions       String?
  emergencyContactName    String?
  emergencyContactPhone   String?
  emergencyContactRelation String?
  previousSchool          String?
  lastClassAttended       String?
  mediumOfInstruction     String?
  recognisedByStateBoard  Boolean?
  transferCertificateNumber String?
  transportRoute          String?
  pickupPoint             String?
  houseName               String?
  scholarshipDetails      String?
  clerkId                 String?
  cbse10RollNumber        String?
  cbse12RollNumber        String?
  schoolCity              String?
  schoolState             String?
  reasonForLeaving        String?
  
  // Relations
  admissionInquiry        AdmissionInquiry?
  branch                  Branch                   @relation(fields: [branchId], references: [id], onDelete: Cascade)
  parent                  Parent?                  @relation(fields: [parentId], references: [id])
  section                 Section?                 @relation(fields: [sectionId], references: [id])
  user                    User?                    @relation(fields: [userId], references: [id])
  firstJoinedSession      AcademicSession?         @relation("StudentFirstJoinedSession", fields: [firstJoinedSessionId], references: [id])
  
  // Required relationship fields for existing models
  academicRecords         AcademicRecord[]
  assessmentMarks         AssessmentMarks[]
  courtesyCallFeedbacks   CourtesyCallFeedback[]
  feeCollections          FeeCollection[]
  marksEntries            MarksEntry[]
  moneyCollectionItems    MoneyCollectionItem[]
  seatingPlans            SeatingPlan[]
  siblingsOf              StudentSibling[]         @relation("SiblingToStudent")
  siblings                StudentSibling[]         @relation("StudentToSibling")
  studentAssessmentScores StudentAssessmentScore[]
  studentAttendances      StudentAttendance[]
  studentConcessions      StudentConcession[]
  studentSubjects         StudentSubject[]
  transferCertificates    TransferCertificate[]
  transportAssignments    TransportAssignment[]
  paymentGatewayTransactions PaymentGatewayTransaction[]
  paymentRequests         PaymentRequest[]
  actionItems             ActionItem[]

  @@index([admissionNumber])
  @@index([branchId])
  @@index([parentId])
  @@index([sectionId])
  @@index([userId])
  @@index([rollNumber, branchId])
  @@index([isActive]) // TODO: Remove in future migration
  @@index([status])
  @@index([firstJoinedSessionId])
}

model Parent {
  id                   String    @id @default(cuid())
  fatherName           String?
  fatherDob            DateTime?
  fatherEducation      String?
  fatherOccupation     String?
  fatherMobile         String?
  fatherEmail          String?
  motherName           String?
  motherDob            DateTime?
  motherEducation      String?
  motherOccupation     String?
  motherMobile         String?
  motherEmail          String?
  guardianName         String?
  guardianDob          DateTime?
  guardianEducation    String?
  guardianOccupation   String?
  guardianMobile       String?
  guardianEmail        String?
  parentAnniversary    DateTime?
  monthlyIncome        String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  clerkId              String?
  fatherAadharNumber   String?
  guardianAadharNumber String?
  motherAadharNumber   String?
  userId               String?   @unique
  user                 User?     @relation(fields: [userId], references: [id])
  students             Student[]

  @@index([userId])
}

model CourtesyCallFeedback {
  id         String     @id @default(cuid())
  studentId  String
  callerId   String
  callerType CallerType
  callDate   DateTime   @default(now())
  purpose    String?
  feedback   String
  followUp   String?
  isPrivate  Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  branchId   String
  employeeId String?
  teacherId  String?
  branch     Branch     @relation(fields: [branchId], references: [id])
  Employee   Employee?  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  student    Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  Teacher    Teacher?   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  actionItems ActionItem[]

  @@index([studentId, callDate])
  @@index([callerId, callDate])
  @@index([branchId, callDate])
  @@index([employeeId, callDate])
  @@index([teacherId, callDate])
}

model ActionItem {
  id                    String              @id @default(cuid())
  title                 String
  description           String
  status                ActionItemStatus    @default(PENDING)
  priority              ActionItemPriority  @default(MEDIUM)
  dueDate               DateTime?
  assignedToId          String
  assignedById          String
  courtesyCallFeedbackId String
  studentId             String
  branchId              String
  completedAt           DateTime?
  completionNotes       String?
  verifiedAt            DateTime?
  verifiedById          String?
  rejectionReason       String?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  
  // Relations
  courtesyCallFeedback  CourtesyCallFeedback @relation(fields: [courtesyCallFeedbackId], references: [id], onDelete: Cascade)
  assignedTo            Teacher             @relation("AssignedActionItems", fields: [assignedToId], references: [id], onDelete: Cascade)
  assignedBy            Employee            @relation("CreatedActionItems", fields: [assignedById], references: [id], onDelete: Cascade)
  verifiedBy            Employee?           @relation("VerifiedActionItems", fields: [verifiedById], references: [id], onDelete: SetNull)
  student               Student             @relation(fields: [studentId], references: [id], onDelete: Cascade)
  branch                Branch              @relation(fields: [branchId], references: [id])
  
  @@index([assignedToId, status])
  @@index([assignedById, createdAt])
  @@index([studentId, status])
  @@index([branchId, createdAt])
  @@index([dueDate, status])
  @@index([courtesyCallFeedbackId])
}

model Teacher {
  id                         String                 @id @default(cuid())
  firstName                  String
  lastName                   String
  qualification              String?
  specialization             String?
  joinDate                   DateTime               @default(now())
  isActive                   Boolean                @default(true)
  createdAt                  DateTime               @default(now())
  updatedAt                  DateTime               @updatedAt
  userId                     String?                @unique
  branchId                   String
  employeeCode               String?                @unique
  clerkId                    String?
  certifications             String[]               @default([])
  subjects                   String[]               @default([])
  aadharNumber               String?
  accessCardId               String?
  accountNumber              String?
  address                    String?
  alternatePhone             String?
  assetReturnStatus          String?
  bankName                   String?
  bio                        String?
  bloodGroup                 String?
  city                       String?
  confirmationDate           DateTime?
  country                    String?
  dateOfBirth                DateTime?
  department                 String?
  designation                String?
  deviceIssued               String?
  emergencyContactName       String?
  emergencyContactPhone      String?
  emergencyContactRelation   String?
  employeeType               String?
  esiNumber                  String?
  experience                 String?
  gender                     String?
  ifscCode                   String?
  institution                String?
  maritalStatus              String?
  middleName                 String?
  nationality                String?
  officialEmail              String?
  panNumber                  String?
  permanentAddress           String?
  permanentCity              String?
  permanentCountry           String?
  permanentPincode           String?
  permanentState             String?
  personalEmail              String?
  pfNumber                   String?
  phone                      String?
  pincode                    String?
  previousEmployer           String?
  previousExperience         String?
  professionalQualifications String?
  religion                   String?
  reportingManager           String?
  salaryStructure            String?
  softwareLicenses           String?
  specialCertifications      String?
  state                      String?
  uanNumber                  String?
  yearOfCompletion           String?
  courtesyCallFeedbacks      CourtesyCallFeedback[]
  leaveApplications          LeaveApplication[]
  leaveBalances              LeaveBalance[]
  salaryIncrements           SalaryIncrement[]
  sections                   Section[]
  SubjectTeacher             SubjectTeacher[]
  branch                     Branch                 @relation(fields: [branchId], references: [id])
  user                       User?                  @relation(fields: [userId], references: [id])
  salaries                   TeacherSalary[]
  userRoles                  UserRole[]
  staffAttendances           StaffAttendance[]
  assignedActionItems        ActionItem[]    @relation("AssignedActionItems")

  @@index([employeeCode])
  @@index([userId])
}

model Employee {
  id                         String                 @id @default(cuid())
  firstName                  String
  lastName                   String
  designation                String
  department                 String?
  joinDate                   DateTime               @default(now())
  isActive                   Boolean                @default(true)
  createdAt                  DateTime               @default(now())
  updatedAt                  DateTime               @updatedAt
  userId                     String?                @unique
  branchId                   String
  departmentId               String?
  designationId              String?
  certifications             String[]               @default([])
  subjects                   String[]               @default([])
  aadharNumber               String?
  accessCardId               String?
  accountNumber              String?
  address                    String?
  alternatePhone             String?
  assetReturnStatus          String?
  bankName                   String?
  bio                        String?
  bloodGroup                 String?
  city                       String?
  confirmationDate           DateTime?
  country                    String?
  dateOfBirth                DateTime?
  deviceIssued               String?
  emergencyContactName       String?
  emergencyContactPhone      String?
  emergencyContactRelation   String?
  employeeCode               String?                @unique
  employeeType               String?
  esiNumber                  String?
  experience                 String?
  gender                     String?
  ifscCode                   String?
  institution                String?
  maritalStatus              String?
  middleName                 String?
  nationality                String?
  officialEmail              String?
  panNumber                  String?
  permanentAddress           String?
  permanentCity              String?
  permanentCountry           String?
  permanentPincode           String?
  permanentState             String?
  personalEmail              String?
  pfNumber                   String?
  phone                      String?
  pincode                    String?
  previousEmployer           String?
  previousExperience         String?
  professionalQualifications String?
  qualification              String?
  religion                   String?
  reportingManager           String?
  salaryStructure            String?
  softwareLicenses           String?
  specialCertifications      String?
  specialization             String?
  state                      String?
  uanNumber                  String?
  yearOfCompletion           String?
  clerkId                    String?
  CourtesyCallFeedback       CourtesyCallFeedback[]
  branch                     Branch                 @relation(fields: [branchId], references: [id])
  departmentRef              Department?            @relation("EmployeeDepartment", fields: [departmentId], references: [id])
  designationRef             Designation?           @relation("EmployeeDesignation", fields: [designationId], references: [id])
  user                       User?                  @relation(fields: [userId], references: [id])
  branchAccessRecords        EmployeeBranchAccess[] @relation("EmployeeBranchAccessRecords")
  salaries                   EmployeeSalary[]
  leaveApplications          LeaveApplication[]
  leaveBalances              LeaveBalance[]
  salaryIncrements           SalaryIncrement[]
  userRoles                  UserRole[]
  staffAttendances           StaffAttendance[]
  createdActionItems         ActionItem[]    @relation("CreatedActionItems")
  verifiedActionItems        ActionItem[]    @relation("VerifiedActionItems")

  @@index([userId])
}

model StaffMove {
  id           String   @id @default(cuid())
  originalId   String
  newId        String
  fromType     String
  toType       String
  reason       String
  movedBy      String
  movedAt      DateTime @default(now())
  originalData Json
  branchId     String
  branch       Branch   @relation(fields: [branchId], references: [id])
  mover        User     @relation(fields: [movedBy], references: [id])

  @@index([originalId, fromType])
  @@index([newId, toType])
  @@index([movedBy])
  @@index([branchId])
}

model Class {
  id                      String                    @id @default(cuid())
  name                    String
  isActive                Boolean                   @default(true)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  branchId                String
  sessionId               String
  displayOrder            Int                       @default(0)
  description             String?
  grade                   String?
  age                     Int?
  AssessmentConfiguration AssessmentConfiguration[]
  assessmentSchemas       AssessmentSchema[]
  blueprints              Blueprint[]
  branch                  Branch                    @relation(fields: [branchId], references: [id])
  session                 AcademicSession           @relation(fields: [sessionId], references: [id])
  subjects                ClassSubject[]
  ClasswiseFee            ClasswiseFee[]
  ExamConfiguration       ExamConfiguration[]
  moneyCollectionLinks    MoneyCollectionClass[]    @relation("ClassMoneyCollectionLinks")
  sections                Section[]
  subjectTeachers         SubjectTeacher[]

  @@unique([name, branchId, sessionId])
}

model Section {
  id                      String                    @id @default(cuid())
  name                    String
  capacity                Int                       @default(30)
  isActive                Boolean                   @default(true)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  classId                 String
  teacherId               String?
  displayOrder            Int                       @default(0)
  AssessmentConfiguration AssessmentConfiguration[]
  sectionwiseFees         ClasswiseFee[]
  ExamConfiguration       ExamConfiguration[]
  class                   Class                     @relation(fields: [classId], references: [id], onDelete: Cascade)
  teacher                 Teacher?                  @relation(fields: [teacherId], references: [id])
  students                Student[]
  subjectTeachers         SubjectTeacher[]
  studentAttendances      StudentAttendance[]

  @@unique([name, classId])
  @@index([classId, isActive], map: "section_class_active_idx")
  @@index([isActive, displayOrder], map: "section_active_display_idx")
}

model AcademicSession {
  id                      String                   @id @default(cuid())
  name                    String
  startDate               DateTime
  endDate                 DateTime
  isActive                Boolean                  @default(true)
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  academicRecords         AcademicRecord[]
  classes                 Class[]
  classwiseFees           ClasswiseFee[]           @relation("ClasswiseFeeSession")
  concessionTypes         ConcessionType[]         @relation("ConcessionTypeSession")
  feeCollections          FeeCollection[]          @relation("FeeCollectionSession")
  feeHeads                FeeHead[]                @relation("FeeHeadSession")
  feeTerms                FeeTerm[]                @relation("FeeTermSession")
  moneyCollections        MoneyCollection[]        @relation("MoneyCollectionSession")
  studentConcessions      StudentConcession[]      @relation("StudentConcessionSession")
  terms                   Term[]
  transportConfigurations TransportConfiguration[] @relation("TransportConfigSession")
  transportFeeStructures  TransportFeeStructure[]  @relation("TransportFeeSession")
  admissionInquiries      AdmissionInquiry[]
  firstJoinedStudents     Student[]                @relation("StudentFirstJoinedSession")
  paymentGatewayTransactions PaymentGatewayTransaction[] @relation("PaymentGatewayTransactionSession")
  paymentRequests         PaymentRequest[]         @relation("PaymentRequestSession")
}

model Term {
  id                String             @id @default(cuid())
  name              String
  description       String?
  startDate         DateTime
  endDate           DateTime
  order             Int                @default(0)
  isActive          Boolean            @default(true)
  isCurrentTerm     Boolean            @default(false)
  branchId          String
  sessionId         String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  assessmentSchemas AssessmentSchema[] @relation("termRelation")
  branch            Branch             @relation(fields: [branchId], references: [id], onDelete: Cascade)
  session           AcademicSession    @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([name, branchId, sessionId])
  @@index([branchId, isActive])
  @@index([sessionId, order])
}

model AcademicRecord {
  id        String          @id @default(cuid())
  studentId String
  sessionId String
  classId   String?
  status    String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  session   AcademicSession @relation(fields: [sessionId], references: [id])
  student   Student         @relation(fields: [studentId], references: [id])
}

model TransferCertificate {
  id        String   @id @default(cuid())
  tcNumber  String   @unique
  issueDate DateTime @default(now())
  reason    String?
  remarks   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
}

model StudentSibling {
  id               String   @id @default(cuid())
  relationshipType String
  createdAt        DateTime @default(now())
  studentId        String
  siblingId        String
  sibling          Student  @relation("SiblingToStudent", fields: [siblingId], references: [id], onDelete: Cascade)
  student          Student  @relation("StudentToSibling", fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, siblingId])
}

model TransportRoute {
  id            String                  @id @default(cuid())
  name          String
  description   String?
  isActive      Boolean                 @default(true)
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  branchId      String
  endLocation   String?
  estimatedTime Int?
  startLocation String?
  totalDistance Float?
  assignments   TransportAssignment[]
  buses         TransportBusRoute[]
  feeStructures TransportFeeStructure[]
  branch        Branch                  @relation(fields: [branchId], references: [id])
  stops         TransportStop[]
  trips         TransportTrip[]
}

model TransportStop {
  id            String                  @id @default(cuid())
  name          String
  address       String?
  distance      Float?
  sequence      Int
  isActive      Boolean                 @default(true)
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  routeId       String
  dropTime      String?
  latitude      Float?
  longitude     Float?
  pickupTime    String?
  assignments   TransportAssignment[]
  feeStructures TransportFeeStructure[]
  route         TransportRoute          @relation(fields: [routeId], references: [id], onDelete: Cascade)

  @@unique([routeId, sequence])
}

model TransportBus {
  id                     String                     @id @default(cuid())
  busNumber              String                     @unique
  registrationNo         String?
  capacity               Int
  purchaseDate           DateTime?
  model                  String?
  fuelType               String                     @default("Diesel")
  isActive               Boolean                    @default(true)
  createdAt              DateTime                   @default(now())
  updatedAt              DateTime                   @updatedAt
  branchId               String
  insuranceNumber        String?
  insuranceExpiry        DateTime?
  pollutionCert          String?
  pollutionExpiry        DateTime?
  fitnessExpiry          DateTime?
  loanAmount             Float?
  loanEmi                Float?
  loanStartDate          DateTime?
  loanFulfillmentDate    DateTime?
  loanProvider           String?
  lastTaxSubmissionDate  DateTime?
  nextTaxDueDate         DateTime?
  taxType                String?
  taxAmount              Float?
  taxSubmissionFrequency String?
  permitType             String?
  permitNumber           String?
  permitIssueDate        DateTime?
  permitExpiryDate       DateTime?
  permitIssuedBy         String?
  branch                 Branch                     @relation(fields: [branchId], references: [id])
  inspections            TransportBusInspection[]
  routes                 TransportBusRoute[]
  fuelLogs               TransportFuelLog[]
  maintenanceLogs        TransportMaintenanceLog[]
  notifications          TransportNotification[]
  staffAssignments       TransportStaffAssignment[]
  trips                  TransportTrip[]

  @@index([busNumber])
  @@index([branchId])
}

model TransportBusRoute {
  id        String         @id @default(cuid())
  busId     String
  routeId   String
  startDate DateTime       @default(now())
  endDate   DateTime?
  isActive  Boolean        @default(true)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  bus       TransportBus   @relation(fields: [busId], references: [id])
  route     TransportRoute @relation(fields: [routeId], references: [id])

  @@unique([busId, routeId, startDate])
}

model TransportFuelLog {
  id              String       @id @default(cuid())
  busId           String
  fuelDate        DateTime     @default(now())
  fuelQuantity    Float
  pricePerLiter   Float
  totalAmount     Float
  odometerReading Int?
  fuelStation     String?
  receiptNumber   String?
  notes           String?
  createdBy       String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  bus             TransportBus @relation(fields: [busId], references: [id])

  @@index([busId, fuelDate])
}

model TransportMaintenanceLog {
  id              String       @id @default(cuid())
  busId           String
  maintenanceDate DateTime     @default(now())
  maintenanceType String
  description     String
  cost            Float?
  serviceProvider String?
  odometerReading Int?
  nextServiceDue  DateTime?
  invoiceNumber   String?
  notes           String?
  createdBy       String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  bus             TransportBus @relation(fields: [busId], references: [id])

  @@index([busId, maintenanceDate])
}

model TransportFeeStructure {
  id              String                @id @default(cuid())
  name            String
  description     String?
  feeType         TransportFeeType      @default(ROUTE_WISE)
  amount          Float
  sessionId       String
  branchId        String
  routeId         String?
  stopId          String?
  applicableFrom  DateTime              @default(now())
  applicableUntil DateTime?
  isActive        Boolean               @default(true)
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  assignments     TransportAssignment[]
  branch          Branch                @relation(fields: [branchId], references: [id])
  route           TransportRoute?       @relation(fields: [routeId], references: [id])
  session         AcademicSession       @relation("TransportFeeSession", fields: [sessionId], references: [id])
  stop            TransportStop?        @relation(fields: [stopId], references: [id])

  @@index([branchId, sessionId])
  @@index([feeType])
}

model TransportAssignment {
  id             String                  @id @default(cuid())
  startDate      DateTime                @default(now())
  endDate        DateTime?
  isActive       Boolean                 @default(true)
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  studentId      String
  stopId         String?
  assignedBy     String?
  assignmentType TransportAssignmentType @default(ROUTE_STOP)
  feeStructureId String?
  notes          String?
  routeId        String?
  feeStructure   TransportFeeStructure?  @relation(fields: [feeStructureId], references: [id])
  route          TransportRoute?         @relation(fields: [routeId], references: [id])
  stop           TransportStop?          @relation(fields: [stopId], references: [id])
  student        Student                 @relation(fields: [studentId], references: [id])

  @@index([studentId])
  @@index([routeId])
  @@index([stopId])
}

model TransportConfiguration {
  id                        String           @id @default(cuid())
  branchId                  String           @unique
  sessionId                 String
  feeCalculationMethod      TransportFeeType @default(ROUTE_WISE)
  allowStopWiseFees         Boolean          @default(true)
  allowRouteWiseFees        Boolean          @default(true)
  defaultFuelType           String           @default("Diesel")
  autoCalculateDistances    Boolean          @default(true)
  requireDriverDetails      Boolean          @default(true)
  requireConductorDetails   Boolean          @default(false)
  enableFuelTracking        Boolean          @default(true)
  enableMaintenanceTracking Boolean          @default(true)
  maxCapacityPerBus         Int              @default(50)
  fuelAlertThreshold        Float            @default(10.0)
  maintenanceAlertDays      Int              @default(30)
  createdAt                 DateTime         @default(now())
  updatedAt                 DateTime         @updatedAt
  branch                    Branch           @relation(fields: [branchId], references: [id])
  session                   AcademicSession  @relation("TransportConfigSession", fields: [sessionId], references: [id])

  @@index([branchId])
}

model TransportStaff {
  id                String                     @id @default(cuid())
  employeeCode      String?                    @unique
  firstName         String
  lastName          String
  phone             String?
  email             String?
  address           String?
  staffType         TransportStaffType
  status            TransportStaffStatus       @default(ACTIVE)
  dateOfJoining     DateTime?
  dateOfLeaving     DateTime?
  licenseNumber     String?
  licenseType       String?
  licenseIssueDate  DateTime?
  licenseExpiryDate DateTime?
  licenseIssuedBy   String?
  medicalCertNumber String?
  medicalIssueDate  DateTime?
  medicalExpiryDate DateTime?
  medicalIssuedBy   String?
  bloodGroup        String?
  medicalConditions String?
  emergencyContact  String?
  emergencyPhone    String?
  salary            Float?
  allowances        Float?
  bankAccountNumber String?
  bankName          String?
  ifscCode          String?
  createdAt         DateTime                   @default(now())
  updatedAt         DateTime                   @updatedAt
  branchId          String
  notifications     TransportNotification[]
  branch            Branch                     @relation(fields: [branchId], references: [id])
  busAssignments    TransportStaffAssignment[]

  @@index([employeeCode])
  @@index([branchId])
  @@index([staffType])
}

model TransportStaffAssignment {
  id        String             @id @default(cuid())
  busId     String
  staffId   String
  staffType TransportStaffType
  isPrimary Boolean            @default(true)
  startDate DateTime           @default(now())
  endDate   DateTime?
  isActive  Boolean            @default(true)
  notes     String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  bus       TransportBus       @relation(fields: [busId], references: [id])
  staff     TransportStaff     @relation(fields: [staffId], references: [id])

  @@unique([busId, staffId, staffType, isActive])
  @@index([busId])
  @@index([staffId])
}

model TransportTrip {
  id                    String          @id @default(cuid())
  busId                 String
  routeId               String?
  driverId              String?
  conductorId           String?
  tripDate              DateTime
  startTime             DateTime
  endTime               DateTime?
  startKilometerReading Int
  endKilometerReading   Int?
  totalDistance         Float?
  numberOfStudents      Int?
  fuelConsumed          Float?
  tripType              String          @default("Regular")
  notes                 String?
  isCompleted           Boolean         @default(false)
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  bus                   TransportBus    @relation(fields: [busId], references: [id])
  route                 TransportRoute? @relation(fields: [routeId], references: [id])

  @@index([busId])
  @@index([routeId])
  @@index([tripDate])
}

model TransportNotification {
  id             String             @id @default(cuid())
  type           NotificationType
  title          String
  message        String
  targetDate     DateTime
  reminderDays   Int                @default(7)
  method         NotificationMethod @default(EMAIL)
  status         NotificationStatus @default(PENDING)
  busId          String?
  staffId        String?
  recipientEmail String?
  recipientPhone String?
  scheduledDate  DateTime
  sentDate       DateTime?
  readDate       DateTime?
  retryCount     Int                @default(0)
  errorMessage   String?
  isRecurring    Boolean            @default(false)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  branchId       String
  branch         Branch             @relation(fields: [branchId], references: [id])
  bus            TransportBus?      @relation(fields: [busId], references: [id])
  staff          TransportStaff?    @relation(fields: [staffId], references: [id])

  @@index([branchId])
  @@index([type])
  @@index([status])
  @@index([scheduledDate])
}

model TransportBusInspection {
  id                  String                     @id @default(cuid())
  busId               String
  inspectionDate      DateTime                   @default(now())
  inspectionType      String                     @default("Regular")
  inspectorName       String
  inspectorEmployeeId String?
  odometerReading     Int?
  fuelLevel           Float?
  status              InspectionStatus           @default(PENDING)
  overallRating       String?
  totalIssues         Int                        @default(0)
  criticalIssues      Int                        @default(0)
  notes               String?
  recommendations     String?
  nextInspectionDue   DateTime?
  isCompleted         Boolean                    @default(false)
  completedAt         DateTime?
  createdAt           DateTime                   @default(now())
  updatedAt           DateTime                   @updatedAt
  branchId            String
  branch              Branch                     @relation(fields: [branchId], references: [id])
  bus                 TransportBus               @relation(fields: [busId], references: [id])
  items               TransportInspectionItem[]
  photos              TransportInspectionPhoto[]

  @@index([busId])
  @@index([inspectionDate])
  @@index([status])
  @@index([branchId])
}

model TransportInspectionTemplate {
  id             String             @id @default(cuid())
  name           String
  description    String?
  category       InspectionItemType
  isRequired     Boolean            @default(true)
  checklistItems Json
  isActive       Boolean            @default(true)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  branchId       String
  branch         Branch             @relation(fields: [branchId], references: [id])

  @@index([branchId])
  @@index([category])
}

model TransportInspectionItem {
  id                 String                     @id @default(cuid())
  inspectionId       String
  templateItemId     String?
  itemName           String
  category           InspectionItemType
  description        String?
  isChecked          Boolean                    @default(false)
  hasProblem         Boolean                    @default(false)
  severity           InspectionSeverity?
  problemDescription String?
  recommendations    String?
  photoUrls          String[]                   @default([])
  isRequired         Boolean                    @default(true)
  sequence           Int                        @default(0)
  createdAt          DateTime                   @default(now())
  updatedAt          DateTime                   @updatedAt
  inspection         TransportBusInspection     @relation(fields: [inspectionId], references: [id], onDelete: Cascade)
  photos             TransportInspectionPhoto[]

  @@index([inspectionId])
  @@index([category])
}

model TransportInspectionPhoto {
  id               String                   @id @default(cuid())
  inspectionId     String
  inspectionItemId String?
  photoUrl         String
  caption          String?
  category         String?
  uploadedBy       String?
  createdAt        DateTime                 @default(now())
  inspection       TransportBusInspection   @relation(fields: [inspectionId], references: [id], onDelete: Cascade)
  inspectionItem   TransportInspectionItem? @relation(fields: [inspectionItemId], references: [id], onDelete: Cascade)

  @@index([inspectionId])
  @@index([inspectionItemId])
}

model TransportNotificationConfig {
  id                     String             @id @default(cuid())
  type                   NotificationType
  isEnabled              Boolean            @default(true)
  reminderDays           Int                @default(7)
  method                 NotificationMethod @default(EMAIL)
  emailTemplate          String?
  emailSubject           String?
  whatsappTemplate       String?
  maxRetries             Int                @default(3)
  retryIntervalHours     Int                @default(24)
  isRecurring            Boolean            @default(false)
  recurringFrequencyDays Int?
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  branchId               String
  branch                 Branch             @relation(fields: [branchId], references: [id])

  @@unique([branchId, type])
  @@index([branchId])
  @@index([type])
}

model AttendanceLocation {
  id             String             @id @default(cuid())
  name           String
  latitude       Float
  longitude      Float
  radius         Int
  isActive       Boolean            @default(true)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  branchId       String
  locationTypeId String?
  devices        AttendanceDevice[]
  branch         Branch             @relation(fields: [branchId], references: [id])
  locationType   LocationType?      @relation(fields: [locationTypeId], references: [id])
  attendances    StaffAttendance[]

  @@map("attendanceLocation")
}

model LocationType {
  id                String               @id @default(cuid())
  name              String
  code              String
  description       String?
  isDefault         Boolean              @default(false)
  isActive          Boolean              @default(true)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  branchId          String
  locations         AttendanceLocation[]
  attendanceWindows AttendanceWindow[]
  branch            Branch               @relation(fields: [branchId], references: [id])

  @@map("locationType")
}

model AttendanceWindow {
  id                     String            @id @default(cuid())
  name                   String
  startTime              String
  endTime                String
  isMon                  Boolean           @default(true)
  isTue                  Boolean           @default(true)
  isWed                  Boolean           @default(true)
  isThu                  Boolean           @default(true)
  isFri                  Boolean           @default(true)
  isSat                  Boolean           @default(false)
  isSun                  Boolean           @default(false)
  allowLateMarking       Boolean           @default(false)
  lateMarkingGracePeriod Int               @default(0)
  isActive               Boolean           @default(true)
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  branchId               String
  locationTypeId         String
  branch                 Branch            @relation(fields: [branchId], references: [id])
  locationType           LocationType      @relation(fields: [locationTypeId], references: [id])
  attendanceRecords      StaffAttendance[]

  @@map("attendanceWindow")
}

model AttendanceDevice {
  id         String              @id @default(cuid())
  name       String
  deviceId   String              @unique
  isActive   Boolean             @default(true)
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  branchId   String
  locationId String?
  branch     Branch              @relation(fields: [branchId], references: [id])
  location   AttendanceLocation? @relation(fields: [locationId], references: [id])

  @@map("attendanceDevice")
}

model StaffAttendance {
  id                  String             @id @default(cuid())
  timestamp           DateTime           @default(now())
  latitude            Float
  longitude           Float
  distance            Int
  isWithinAllowedArea Boolean            @default(false)
  notes               String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  locationId          String
  teacherId           String?
  employeeId          String?
  windowId            String?
  type                AttendanceType     @default(IN)
  employee            Employee?          @relation(fields: [employeeId], references: [id])
  location            AttendanceLocation @relation(fields: [locationId], references: [id])
  teacher             Teacher?           @relation(fields: [teacherId], references: [id])
  attendanceWindow    AttendanceWindow?  @relation(fields: [windowId], references: [id])

  @@index([timestamp, type])
  @@index([teacherId, timestamp])
  @@index([employeeId, timestamp])
  @@map("staffAttendance")
}

model StudentAttendance {
  id         String           @id @default(cuid())
  date       DateTime         @default(now())
  status     AttendanceStatus @default(PRESENT)
  reason     String?
  notes      String?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  studentId  String
  markedById String?
  sectionId  String
  section    Section          @relation(fields: [sectionId], references: [id])
  student    Student          @relation(fields: [studentId], references: [id])

  @@unique([studentId, date])
  @@index([date, sectionId])
  @@index([studentId, date])
  @@map("studentAttendance")
}

model Subject {
  id                      String                    @id @default(cuid())
  name                    String
  code                    String?
  description             String?
  isActive                Boolean                   @default(true)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  isOptional              Boolean                   @default(false)
  displayOrder            Int                       @default(0)
  AssessmentConfiguration AssessmentConfiguration[]
  assessmentSchemas       AssessmentSchema[]
  chapters                Chapter[]
  classes                 ClassSubject[]
  ExamConfiguration       ExamConfiguration[]
  students                StudentSubject[]
  teachers                SubjectTeacher[]
}

model ClassSubject {
  id        String   @id @default(cuid())
  classId   String
  subjectId String
  createdAt DateTime @default(now())
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([classId, subjectId])
}

model StudentSubject {
  id        String   @id @default(cuid())
  studentId String
  subjectId String
  createdAt DateTime @default(now())
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([studentId, subjectId])
}

model SubjectTeacher {
  id        String   @id @default(cuid())
  teacherId String
  subjectId String
  classId   String
  sectionId String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  branchId  String
  branch    Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  section   Section? @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  teacher   Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@unique([teacherId, subjectId, classId, sectionId])
  @@index([branchId, isActive])
  @@index([teacherId, isActive])
  @@index([classId, subjectId])
}

model LeavePolicy {
  id                String             @id @default(cuid())
  name              String
  description       String?
  maxDaysPerYear    Int
  isPaid            Boolean            @default(true)
  applicableRoles   String[]
  branchId          String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  leaveApplications LeaveApplication[]
  leaveBalances     LeaveBalance[]
  branch            Branch             @relation(fields: [branchId], references: [id])
}

model LeaveBalance {
  id            String      @id @default(cuid())
  year          Int
  totalDays     Int
  usedDays      Int         @default(0)
  remainingDays Int
  policyId      String
  teacherId     String?
  employeeId    String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  employee      Employee?   @relation(fields: [employeeId], references: [id])
  policy        LeavePolicy @relation(fields: [policyId], references: [id])
  teacher       Teacher?    @relation(fields: [teacherId], references: [id])

  @@unique([policyId, teacherId, year])
  @@unique([policyId, employeeId, year])
}

model LeaveApplication {
  id         String      @id @default(cuid())
  startDate  DateTime
  endDate    DateTime
  reason     String
  status     String      @default("PENDING")
  comments   String?
  policyId   String
  teacherId  String?
  employeeId String?
  approvedBy String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  employee   Employee?   @relation(fields: [employeeId], references: [id])
  policy     LeavePolicy @relation(fields: [policyId], references: [id])
  teacher    Teacher?    @relation(fields: [teacherId], references: [id])
}

model RbacRole {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String?
  isSystem        Boolean          @default(false)
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  permissions     String[]         @default([])
  branchId        String?
  branch          Branch?          @relation(fields: [branchId], references: [id])
  rolePermissions RolePermission[]
  userRoles       UserRole[]

  @@index([name])
  @@index([isSystem])
  @@index([isActive])
}

model Permission {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String?
  category        String
  isSystem        Boolean          @default(false)
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  rolePermissions RolePermission[]

  @@index([name])
  @@index([category])
  @@index([isSystem])
  @@index([isActive])
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         RbacRole   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
}

model UserRole {
  id         String    @id @default(cuid())
  userId     String
  roleId     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  teacherId  String?
  employeeId String?
  branchId   String?
  isActive   Boolean   @default(true)
  branch     Branch?   @relation(fields: [branchId], references: [id])
  employee   Employee? @relation(fields: [employeeId], references: [id])
  role       RbacRole  @relation(fields: [roleId], references: [id], onDelete: Cascade)
  teacher    Teacher?  @relation(fields: [teacherId], references: [id])
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
  @@index([isActive])
}

model SalaryStructure {
  id               String           @id @default(cuid())
  name             String
  description      String?
  basicSalary      Float
  daPercentage     Float            @default(0)
  pfPercentage     Float            @default(0)
  esiPercentage    Float            @default(0)
  isActive         Boolean          @default(true)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  employeeSalaries EmployeeSalary[]
  teacherSalaries  TeacherSalary[]
}

model EmployeeSalary {
  id                   String          @id @default(cuid())
  employeeId           String
  structureId          String
  customBasicSalary    Float?
  customDaPercentage   Float?
  customPfPercentage   Float?
  customEsiPercentage  Float?
  additionalAllowances Float           @default(0)
  startDate            DateTime        @default(now())
  endDate              DateTime?
  isActive             Boolean         @default(true)
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  employee             Employee        @relation(fields: [employeeId], references: [id])
  structure            SalaryStructure @relation(fields: [structureId], references: [id])
  salaryPayments       SalaryPayment[]

  @@unique([employeeId, structureId, startDate])
}

model TeacherSalary {
  id                   String          @id @default(cuid())
  teacherId            String
  structureId          String
  customBasicSalary    Float?
  customDaPercentage   Float?
  customPfPercentage   Float?
  customEsiPercentage  Float?
  additionalAllowances Float           @default(0)
  startDate            DateTime        @default(now())
  endDate              DateTime?
  isActive             Boolean         @default(true)
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  salaryPayments       SalaryPayment[]
  structure            SalaryStructure @relation(fields: [structureId], references: [id])
  teacher              Teacher         @relation(fields: [teacherId], references: [id])

  @@unique([teacherId, structureId, startDate])
}

model SalaryPayment {
  id                      String          @id @default(cuid())
  month                   Int
  year                    Int
  basicSalary             Float
  daAmount                Float
  pfDeduction             Float
  esiDeduction            Float
  employerPfContribution  Float
  employerEsiContribution Float
  additionalAllowances    Float           @default(0)
  leaveDeductions         Float           @default(0)
  otherDeductions         Float           @default(0)
  otherAdditions          Float           @default(0)
  totalEarnings           Float
  totalDeductions         Float
  netPayable              Float
  paymentDate             DateTime?
  paymentStatus           String          @default("PENDING")
  remarks                 String?
  teacherSalaryId         String?
  employeeSalaryId        String?
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  employeeSalary          EmployeeSalary? @relation(fields: [employeeSalaryId], references: [id])
  teacherSalary           TeacherSalary?  @relation(fields: [teacherSalaryId], references: [id])

  @@unique([month, year, teacherSalaryId])
  @@unique([month, year, employeeSalaryId])
}

model SalaryIncrement {
  id                  String    @id @default(cuid())
  incrementAmount     Float?
  incrementPercentage Float?
  oldBasicSalary      Float
  newBasicSalary      Float
  effectiveDate       DateTime
  remarks             String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  teacherId           String?
  employeeId          String?
  appliedById         String?
  employee            Employee? @relation(fields: [employeeId], references: [id])
  teacher             Teacher?  @relation(fields: [teacherId], references: [id])

  @@index([teacherId])
  @@index([employeeId])
  @@index([effectiveDate])
}

model Department {
  id          String     @id @default(cuid())
  name        String
  code        String     @unique
  description String?
  type        String
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  branchId    String
  headId      String?
  branch      Branch     @relation(fields: [branchId], references: [id])
  employees   Employee[] @relation("EmployeeDepartment")
}

model Designation {
  id          String     @id @default(cuid())
  title       String
  code        String     @unique
  description String?
  category    String
  level       String
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  branchId    String
  branch      Branch     @relation(fields: [branchId], references: [id])
  employees   Employee[] @relation("EmployeeDesignation")
}

model EmployeeBranchAccess {
  id         String   @id @default(cuid())
  employeeId String
  branchId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  branch     Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)
  employee   Employee @relation("EmployeeBranchAccessRecords", fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, branchId])
}

model Chapter {
  id          String             @id @default(cuid())
  name        String
  code        String?
  description String?
  subjectId   String
  branchId    String?
  isActive    Boolean            @default(true)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  blueprints  BlueprintChapter[]
  branch      Branch?            @relation(fields: [branchId], references: [id])
  subject     Subject            @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  questions   Question[]
  subTopics   SubTopic[]
}

model SubTopic {
  id          String     @id @default(cuid())
  name        String
  description String?
  chapterId   String
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  questions   Question[]
  chapter     Chapter    @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model Question {
  id                 String          @id @default(cuid())
  text               String
  marks              Int
  chapterId          String
  subTopicId         String?
  isActive           Boolean         @default(true)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  creatorId          String?
  isAIGenerated      Boolean         @default(false)
  type               String
  difficulty         String
  applicableSubjects String[]        @default([])
  category           String          @default("Objective")
  subtype            String          @default("MCQ")
  paperQuestions     PaperQuestion[]
  chapter            Chapter         @relation(fields: [chapterId], references: [id])
  subTopic           SubTopic?       @relation(fields: [subTopicId], references: [id])
}

model EducationBoard {
  id          String      @id @default(cuid())
  name        String
  code        String      @unique
  description String?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  blueprints  Blueprint[]
}

model Blueprint {
  id             String             @id @default(cuid())
  name           String
  description    String?
  classId        String
  boardId        String?
  creatorId      String?
  isActive       Boolean            @default(true)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  board          EducationBoard?    @relation(fields: [boardId], references: [id])
  class          Class              @relation(fields: [classId], references: [id])
  chapters       BlueprintChapter[]
  sections       BlueprintSection[]
  questionPapers QuestionPaper[]
}

model BlueprintChapter {
  id          String    @id @default(cuid())
  blueprintId String
  chapterId   String
  createdAt   DateTime  @default(now())
  blueprint   Blueprint @relation(fields: [blueprintId], references: [id], onDelete: Cascade)
  chapter     Chapter   @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([blueprintId, chapterId])
}

model BlueprintSection {
  id                      String         @id @default(cuid())
  blueprintId             String
  name                    String
  description             String?
  questionCount           Int
  instructions            String?
  sectionOrder            Int            @default(0)
  createdAt               DateTime       @default(now())
  objectiveQuestionCount  Int            @default(0)
  requiredSubtypes        String[]       @default([])
  subjectiveQuestionCount Int            @default(0)
  blueprint               Blueprint      @relation(fields: [blueprintId], references: [id], onDelete: Cascade)
  paperSections           PaperSection[]
}

model QuestionPaper {
  id          String         @id @default(cuid())
  title       String
  description String?
  duration    Int?
  totalMarks  Int?
  blueprintId String
  creatorId   String?
  isPublished Boolean        @default(false)
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  sections    PaperSection[]
  blueprint   Blueprint      @relation(fields: [blueprintId], references: [id])
}

model PaperSection {
  id                 String           @id @default(cuid())
  questionPaperId    String
  blueprintSectionId String
  name               String
  instructions       String?
  sectionOrder       Int              @default(0)
  createdAt          DateTime         @default(now())
  questions          PaperQuestion[]
  blueprintSection   BlueprintSection @relation(fields: [blueprintSectionId], references: [id])
  questionPaper      QuestionPaper    @relation(fields: [questionPaperId], references: [id], onDelete: Cascade)
}

model PaperQuestion {
  id             String       @id @default(cuid())
  paperSectionId String
  questionId     String
  questionOrder  Int
  marks          Int?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  paperSection   PaperSection @relation(fields: [paperSectionId], references: [id])
  question       Question     @relation(fields: [questionId], references: [id])
}

model TextbookProcessing {
  id                  String    @id @default(cuid())
  fileUrl             String
  fileName            String
  classId             String
  subjectId           String
  chapterId           String
  status              String
  errorMessage        String?
  questionsGenerated  Int?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  completedAt         DateTime?
  creatorId           String
  batchConcurrency    Int?
  batchProcessingUsed Boolean   @default(false)
  batchSize           Int?
  processingDuration  Int?
}

model MoneyCollection {
  id             String                 @id @default(cuid())
  title          String
  description    String?
  collectionDate DateTime?
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  branchId       String
  sessionId      String?
  branch         Branch                 @relation(fields: [branchId], references: [id])
  session        AcademicSession?       @relation("MoneyCollectionSession", fields: [sessionId], references: [id])
  classes        MoneyCollectionClass[]
  items          MoneyCollectionItem[]
}

model MoneyCollectionClass {
  id                String          @id @default(cuid())
  moneyCollectionId String
  classId           String
  createdAt         DateTime        @default(now())
  class             Class           @relation("ClassMoneyCollectionLinks", fields: [classId], references: [id])
  moneyCollection   MoneyCollection @relation(fields: [moneyCollectionId], references: [id], onDelete: Cascade)

  @@unique([moneyCollectionId, classId])
}

model MoneyCollectionItem {
  id                String          @id @default(cuid())
  amount            Float
  notes             String?
  receivedAt        DateTime        @default(now())
  moneyCollectionId String
  studentId         String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  moneyCollection   MoneyCollection @relation(fields: [moneyCollectionId], references: [id], onDelete: Cascade)
  student           Student         @relation(fields: [studentId], references: [id])
}

model FeeHead {
  id                 String              @id @default(cuid())
  name               String
  description        String?
  isSystemDefined    Boolean             @default(false)
  isActive           Boolean             @default(true)
  branchId           String
  sessionId          String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  studentType        String              @default("BOTH")
  classwiseFees      ClasswiseFee[]
  feeCollectionItems FeeCollectionItem[]
  branch             Branch              @relation(fields: [branchId], references: [id])
  session            AcademicSession     @relation("FeeHeadSession", fields: [sessionId], references: [id])
  feeTerms           FeeTermFeeHead[]

  @@unique([name, branchId, sessionId])
  @@index([studentType])
}

model FeeTerm {
  id             String           @id @default(cuid())
  name           String
  description    String?
  startDate      DateTime
  endDate        DateTime
  dueDate        DateTime
  isActive       Boolean          @default(true)
  branchId       String
  sessionId      String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  order          Int              @default(0)
  classwiseFees          ClasswiseFee[]
  feeCollectionItems     FeeCollectionItem[]
  branch                 Branch           @relation(fields: [branchId], references: [id])
  session        AcademicSession  @relation("FeeTermSession", fields: [sessionId], references: [id])
  feeHeads       FeeTermFeeHead[]
  paymentGatewayTransactions PaymentGatewayTransaction[]
  paymentRequests PaymentRequest[]

  @@unique([name, branchId, sessionId])
  @@index([branchId, sessionId, order])
}

model FeeTermFeeHead {
  id        String   @id @default(cuid())
  feeTermId String
  feeHeadId String
  createdAt DateTime @default(now())
  feeHead   FeeHead  @relation(fields: [feeHeadId], references: [id], onDelete: Cascade)
  feeTerm   FeeTerm  @relation(fields: [feeTermId], references: [id], onDelete: Cascade)

  @@unique([feeTermId, feeHeadId])
}

model ClasswiseFee {
  id        String          @id @default(cuid())
  classId   String
  feeTermId String
  feeHeadId String
  amount    Float
  branchId  String
  sessionId String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  sectionId String?
  branch    Branch          @relation(fields: [branchId], references: [id])
  Class     Class           @relation(fields: [classId], references: [id])
  feeHead   FeeHead         @relation(fields: [feeHeadId], references: [id])
  feeTerm   FeeTerm         @relation(fields: [feeTermId], references: [id])
  section   Section?        @relation(fields: [sectionId], references: [id])
  session   AcademicSession @relation("ClasswiseFeeSession", fields: [sessionId], references: [id])
}

model ConcessionType {
  id                     String              @id @default(cuid())
  name                   String
  description            String?
  type                   String              @default("PERCENTAGE")
  value                  Float               @default(0)
  maxValue               Float?
  isActive               Boolean             @default(true)
  applicableStudentTypes String[]            @default(["BOTH"])
  eligibilityCriteria    String?
  requiredDocuments      String[]            @default([])
  autoApproval           Boolean             @default(false)
  appliedFeeHeads        String[]            @default([])
  appliedFeeTerms        String[]            @default([])
  feeTermAmounts         Json?               @default("{}")
  branchId               String
  sessionId              String
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  branch                 Branch              @relation(fields: [branchId], references: [id], onDelete: Cascade)
  session                AcademicSession     @relation("ConcessionTypeSession", fields: [sessionId], references: [id], onDelete: Cascade)
  studentConcessions     StudentConcession[]

  @@unique([name, branchId, sessionId])
  @@index([branchId, sessionId])
  @@index([isActive])
  @@index([type])
  @@index([appliedFeeHeads])
  @@index([appliedFeeTerms])
}

model StudentConcession {
  id               String              @id @default(cuid())
  studentId        String
  concessionTypeId String
  customValue      Float?
  reason           String?
  approvedBy       String?
  approvedAt       DateTime?
  status           String              @default("PENDING")
  validFrom        DateTime            @default(now())
  validUntil       DateTime?
  documents        String[]            @default([])
  notes            String?
  branchId         String
  sessionId        String
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  history          ConcessionHistory[]
  branch           Branch              @relation(fields: [branchId], references: [id], onDelete: Cascade)
  concessionType   ConcessionType      @relation(fields: [concessionTypeId], references: [id], onDelete: Cascade)
  session          AcademicSession     @relation("StudentConcessionSession", fields: [sessionId], references: [id], onDelete: Cascade)
  student          Student             @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, concessionTypeId], name: "student_concession_type_unique")
  @@index([studentId])
  @@index([branchId, sessionId])
  @@index([status])
  @@index([concessionTypeId])
  @@index([validFrom, validUntil])
}

model ConcessionHistory {
  id                  String            @id @default(cuid())
  studentConcessionId String
  action              String
  oldValue            Float?
  newValue            Float?
  reason              String?
  performedBy         String
  performedAt         DateTime          @default(now())
  studentConcession   StudentConcession @relation(fields: [studentConcessionId], references: [id], onDelete: Cascade)

  @@index([studentConcessionId])
  @@index([performedAt])
}

model ConcessionApprovalSettings {
  id                          String   @id @default(cuid())
  branchId                    String
  sessionId                   String
  approvalType                String   @default("1_PERSON")
  authorizationType           String   @default("ROLE_BASED")
  autoApproveBelow            Float    @default(1000)
  requireDocumentVerification Boolean  @default(true)
  allowSelfApproval           Boolean  @default(false)
  maxApprovalAmount           Float    @default(50000)
  escalationThreshold         Float    @default(25000)
  notificationEnabled         Boolean  @default(true)
  approvalTimeoutDays         Int      @default(7)
  requireReason               Boolean  @default(true)
  approvalRoles               String[] @default([])
  secondApprovalRoles         String[] @default([])
  approvalIndividuals         String[] @default([])
  secondApprovalIndividuals   String[] @default([])
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  createdBy                   String?
  updatedBy                   String?
  branch                      Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@unique([branchId, sessionId], name: "branchId_sessionId")
  @@index([branchId])
  @@index([sessionId])
  @@index([approvalType])
  @@index([authorizationType])
}

enum PaymentGateway {
  EASEBUZZ
  RAZORPAY
  PAYTM
  STRIPE
}

enum StudentStatus {
  ACTIVE
  INACTIVE
  EXPELLED
  WITHDRAWN
  REPEAT
  TRANSFERRED
  GRADUATED
  SUSPENDED
}

enum PaymentStatus {
  PENDING
  INITIATED
  SUCCESS
  FAILED
  CANCELLED
  REFUNDED
  EXPIRED
}

model FeeCollection {
  id                     String                     @id @default(cuid())
  receiptNumber          String                     @unique
  studentId              String
  totalAmount            Float
  paidAmount             Float
  paymentMode            String
  transactionReference   String?
  paymentDate            DateTime
  notes                  String?
  status                 String                     @default("COMPLETED")
  branchId               String
  sessionId              String
  createdBy              String?
  createdAt              DateTime                   @default(now())
  updatedAt              DateTime                   @updatedAt
  gatewayTransactionId   String?
  paymentRequestId       String?
  gateway                PaymentGateway?
  branch                 Branch                     @relation(fields: [branchId], references: [id])
  session                AcademicSession            @relation("FeeCollectionSession", fields: [sessionId], references: [id])
  student                Student                    @relation(fields: [studentId], references: [id])
  items                  FeeCollectionItem[]
  gatewayTransaction     PaymentGatewayTransaction? @relation(fields: [gatewayTransactionId], references: [id])
  paymentRequest         PaymentRequest?            @relation(fields: [paymentRequestId], references: [id])

  @@index([gatewayTransactionId])
  @@index([paymentRequestId])
  @@index([gateway])
}

model PaymentGatewayTransaction {
  id                   String         @id @default(cuid())
  gatewayTransactionId String?
  gateway              PaymentGateway @default(EASEBUZZ)
  amount               Float
  currency             String         @default("INR")
  status               PaymentStatus  @default(PENDING)
  studentId            String
  branchId             String
  sessionId            String
  feeTermId            String
  paymentRequestId     String?
  gatewayOrderId       String?
  gatewayPaymentId     String?
  failureReason        String?
  gatewayResponse      Json?
  webhookData          Json?
  refundAmount         Float?         @default(0)
  refundReason         String?
  expiresAt            DateTime?
  paidAt               DateTime?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  
  student              Student         @relation(fields: [studentId], references: [id])
  branch               Branch          @relation(fields: [branchId], references: [id])
  session              AcademicSession @relation("PaymentGatewayTransactionSession", fields: [sessionId], references: [id])
  feeTerm              FeeTerm         @relation(fields: [feeTermId], references: [id])
  paymentRequest       PaymentRequest? @relation(fields: [paymentRequestId], references: [id])
  feeCollections       FeeCollection[]

  @@index([studentId])
  @@index([branchId, sessionId])
  @@index([status])
  @@index([gateway])
  @@index([gatewayTransactionId])
  @@index([createdAt])
}

model PaymentRequest {
  id                 String         @id @default(cuid())
  gateway            PaymentGateway @default(EASEBUZZ)
  amount             Float
  currency           String         @default("INR")
  status             PaymentStatus  @default(PENDING)
  studentId          String
  branchId           String
  sessionId          String
  feeTermId          String
  purpose            String
  description        String?
  gatewayRequestId   String?
  paymentUrl         String?
  shortUrl           String?
  fees               Json // Array of fee items {feeHeadId, amount, feeHeadName}
  buyerName          String
  buyerEmail         String?
  buyerPhone         String
  redirectUrl        String?
  webhookUrl         String?
  expiresAt          DateTime?
  completedAt        DateTime?
  createdBy          String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  
  student            Student                     @relation(fields: [studentId], references: [id])
  branch             Branch                      @relation(fields: [branchId], references: [id])
  session            AcademicSession             @relation("PaymentRequestSession", fields: [sessionId], references: [id])
  feeTerm            FeeTerm                     @relation(fields: [feeTermId], references: [id])
  transactions       PaymentGatewayTransaction[]
  feeCollections     FeeCollection[]

  @@index([studentId])
  @@index([branchId, sessionId])
  @@index([status])
  @@index([gateway])
  @@index([createdAt])
}

model PaymentWebhookLog {
  id               String         @id @default(cuid())
  gateway          PaymentGateway @default(EASEBUZZ)
  event            String
  transactionId    String?
  requestId        String?
  headers          Json?
  payload          Json
  processed        Boolean        @default(false)
  processingError  String?
  createdAt        DateTime       @default(now())

  @@index([gateway, event])
  @@index([transactionId])
  @@index([processed])
  @@index([createdAt])
}

model ShortUrl {
  id          String   @id @default(cuid())
  shortId     String   @unique
  originalUrl String   @db.Text
  createdAt   DateTime @default(now())
  expiresAt   DateTime?
  clicks      Int      @default(0)

  @@index([shortId])
  @@index([createdAt])
}

model FeeCollectionItem {
  id              String        @id @default(cuid())
  feeCollectionId String
  feeHeadId       String
  feeTermId       String
  amount          Float
  createdAt       DateTime      @default(now())
  feeCollection   FeeCollection @relation(fields: [feeCollectionId], references: [id], onDelete: Cascade)
  feeHead         FeeHead       @relation(fields: [feeHeadId], references: [id])
  feeTerm         FeeTerm       @relation(fields: [feeTermId], references: [id])
}

model BackgroundTask {
  id                String               @id @default(cuid())
  taskType          String
  title             String
  description       String?
  status            BackgroundTaskStatus @default(PENDING)
  totalItems        Int                  @default(0)
  processedItems    Int                  @default(0)
  failedItems       Int                  @default(0)
  percentage        Float                @default(0)
  inputData         Json?
  results           Json?
  errors            Json[]               @default([])
  scheduledAt       DateTime?
  startedAt         DateTime?
  completedAt       DateTime?
  estimatedDuration Int?
  createdBy         String?
  branchId          String?
  priority          Int                  @default(5)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  branch            Branch?              @relation(fields: [branchId], references: [id])
  executionLogs     TaskExecutionLog[]

  @@index([status, scheduledAt])
  @@index([branchId, status])
  @@index([taskType, status])
}

model EmailConfiguration {
  id                     String   @id @default(cuid())
  smtpHost               String?
  smtpPort               Int?     @default(587)
  smtpUsername           String?
  smtpPassword           String?
  fromEmail              String?
  fromName               String?  @default("Scholarise System")
  adminEmails            String[] @default([])
  notifyOnTaskCompletion Boolean  @default(true)
  notifyOnTaskFailure    Boolean  @default(true)
  includeTaskDetails     Boolean  @default(true)
  includeErrorLogs       Boolean  @default(false)
  taskCompletionTemplate String?
  taskFailureTemplate    String?
  branchId               String?  @unique
  isGlobal               Boolean  @default(false)
  isActive               Boolean  @default(true)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  branch                 Branch?  @relation(fields: [branchId], references: [id])

  @@index([branchId, isActive])
}

model TaskExecutionLog {
  id        String         @id @default(cuid())
  taskId    String
  level     TaskLogLevel   @default(INFO)
  message   String
  details   Json?
  timestamp DateTime       @default(now())
  task      BackgroundTask @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId, timestamp])
  @@index([level, timestamp])
}

model GradeScale {
  id          String       @id @default(cuid())
  name        String
  isDefault   Boolean      @default(false)
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  branchId    String
  gradeRanges GradeRange[]
  branch      Branch       @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@index([branchId, isActive])
}

model GradeRange {
  id            String     @id @default(cuid())
  gradeScaleId  String
  grade         String
  minPercentage Float
  maxPercentage Float
  gradePoint    Float?
  description   String?
  order         Int        @default(0)
  gradeScale    GradeScale @relation(fields: [gradeScaleId], references: [id], onDelete: Cascade)

  @@index([gradeScaleId, minPercentage])
}

model AssessmentSchema {
  id                      String                   @id @default(cuid())
  name                    String
  term                    String
  classId                 String
  subjectId               String
  totalMarks              Int                      @default(100)
  isActive                Boolean                  @default(true)
  isPublished             Boolean                  @default(false)
  createdBy               String
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  branchId                String
  appliedClasses          Json?
  components              AssessmentComponent[]
  permissions             AssessmentPermission[]
  branch                  Branch                   @relation(fields: [branchId], references: [id], onDelete: Cascade)
  class                   Class                    @relation(fields: [classId], references: [id])
  subject                 Subject                  @relation(fields: [subjectId], references: [id])
  termRelation            Term                     @relation("termRelation", fields: [term], references: [id])
  studentAssessmentScores StudentAssessmentScore[]

  @@unique([branchId, classId, subjectId, term])
  @@index([branchId, isActive])
  @@index([classId, subjectId])
}

model AssessmentComponent {
  id                 String                  @id @default(cuid())
  name               String
  description        String?
  assessmentSchemaId String
  rawMaxScore        Int
  reducedScore       Float
  weightage          Float                   @default(1.0)
  formula            String?
  order              Int                     @default(0)
  isActive           Boolean                 @default(true)
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt
  assessmentSchema   AssessmentSchema        @relation(fields: [assessmentSchemaId], references: [id], onDelete: Cascade)
  subCriteria        AssessmentSubCriteria[]
  componentScores    ComponentScore[]

  @@index([assessmentSchemaId, order])
}

model AssessmentSubCriteria {
  id                String              @id @default(cuid())
  name              String
  description       String?
  componentId       String
  maxScore          Int
  order             Int                 @default(0)
  isActive          Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  component         AssessmentComponent @relation(fields: [componentId], references: [id], onDelete: Cascade)
  subCriteriaScores SubCriteriaScore[]

  @@index([componentId, order])
}

model StudentAssessmentScore {
  id                 String           @id @default(cuid())
  studentId          String
  finalScore         Float?
  finalGrade         String?
  finalPercentage    Float?
  isComplete         Boolean          @default(false)
  submittedAt        DateTime?
  enteredBy          String
  enteredAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  branchId           String
  assessmentSchemaId String
  componentScores    ComponentScore[]
  assessmentSchema   AssessmentSchema @relation(fields: [assessmentSchemaId], references: [id], onDelete: Cascade)
  branch             Branch           @relation(fields: [branchId], references: [id], onDelete: Cascade)
  student            Student          @relation(fields: [studentId], references: [id])

  @@unique([studentId, assessmentSchemaId])
  @@index([studentId])
  @@index([enteredBy])
  @@index([assessmentSchemaId])
}

model ComponentScore {
  id                       String                 @id @default(cuid())
  componentId              String
  studentAssessmentScoreId String
  rawScore                 Float?
  reducedScore             Float?
  calculatedScore          Float?
  isComplete               Boolean                @default(false)
  enteredBy                String
  enteredAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  component                AssessmentComponent    @relation(fields: [componentId], references: [id], onDelete: Cascade)
  studentScore             StudentAssessmentScore @relation(fields: [studentAssessmentScoreId], references: [id], onDelete: Cascade)
  subCriteriaScores        SubCriteriaScore[]

  @@unique([componentId, studentAssessmentScoreId])
  @@index([componentId])
  @@index([studentAssessmentScoreId])
}

model SubCriteriaScore {
  id               String                @id @default(cuid())
  subCriteriaId    String
  componentScoreId String
  score            Float?
  comments         String?
  enteredBy        String
  enteredAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  componentScore   ComponentScore        @relation(fields: [componentScoreId], references: [id], onDelete: Cascade)
  subCriteria      AssessmentSubCriteria @relation(fields: [subCriteriaId], references: [id], onDelete: Cascade)

  @@unique([subCriteriaId, componentScoreId])
  @@index([subCriteriaId])
  @@index([componentScoreId])
}

model AssessmentPermission {
  id                 String                   @id @default(cuid())
  assessmentSchemaId String?
  userId             String
  permissionType     AssessmentPermissionType
  canCreate          Boolean                  @default(false)
  canEdit            Boolean                  @default(false)
  canView            Boolean                  @default(true)
  canDelete          Boolean                  @default(false)
  canPublish         Boolean                  @default(false)
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  branchId           String
  assessmentSchema   AssessmentSchema?        @relation(fields: [assessmentSchemaId], references: [id], onDelete: Cascade)
  branch             Branch                   @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@unique([assessmentSchemaId, userId])
  @@index([branchId, userId])
  @@index([userId, permissionType])
}

model AssessmentCategory {
  id                      String                    @id
  name                    String
  code                    String                    @unique
  description             String?
  maxMarks                Int
  isActive                Boolean                   @default(true)
  order                   Int                       @default(0)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime
  branchId                String
  Branch                  Branch                    @relation(fields: [branchId], references: [id], onDelete: Cascade)
  AssessmentConfiguration AssessmentConfiguration[]

  @@index([branchId, isActive])
}

model AssessmentConfiguration {
  id                 String             @id
  name               String
  categoryId         String
  classId            String
  sectionId          String?
  subjectId          String?
  maxMarks           Int
  weightage          Float              @default(1.0)
  dueDate            DateTime?
  instructions       String?
  isActive           Boolean            @default(true)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime
  branchId           String
  Branch             Branch             @relation(fields: [branchId], references: [id], onDelete: Cascade)
  AssessmentCategory AssessmentCategory @relation(fields: [categoryId], references: [id])
  Class              Class              @relation(fields: [classId], references: [id])
  Section            Section?           @relation(fields: [sectionId], references: [id])
  Subject            Subject?           @relation(fields: [subjectId], references: [id])
  AssessmentMarks    AssessmentMarks[]

  @@index([branchId, isActive])
  @@index([classId, sectionId])
}

model AssessmentMarks {
  id                      String                  @id
  assessmentConfigId      String
  studentId               String
  marksObtained           Float?
  comments                String?
  submissionDate          DateTime?
  enteredBy               String
  enteredAt               DateTime                @default(now())
  updatedAt               DateTime
  isSubmitted             Boolean                 @default(false)
  submittedAt             DateTime?
  branchId                String
  AssessmentConfiguration AssessmentConfiguration @relation(fields: [assessmentConfigId], references: [id])
  Branch                  Branch                  @relation(fields: [branchId], references: [id], onDelete: Cascade)
  Student                 Student                 @relation(fields: [studentId], references: [id])

  @@unique([assessmentConfigId, studentId])
  @@index([branchId, assessmentConfigId])
  @@index([enteredBy])
  @@index([studentId])
}

model ExamConfiguration {
  id           String         @id
  name         String
  classId      String
  sectionId    String?
  subjectId    String
  maxMarks     Int
  passingMarks Int
  weightage    Float          @default(1.0)
  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  branchId     String
  Branch       Branch         @relation(fields: [branchId], references: [id], onDelete: Cascade)
  Class        Class          @relation(fields: [classId], references: [id])
  Section      Section?       @relation(fields: [sectionId], references: [id])
  Subject      Subject        @relation(fields: [subjectId], references: [id])
  ExamSchedule ExamSchedule[]
  MarksEntry   MarksEntry[]

  @@index([branchId, isActive])
  @@index([classId, sectionId])
}

model ExamSchedule {
  id                String            @id
  examConfigId      String
  examDate          DateTime
  startTime         DateTime
  endTime           DateTime
  room              String?
  invigilator       String?
  instructions      String?
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime
  branchId          String
  Branch            Branch            @relation(fields: [branchId], references: [id], onDelete: Cascade)
  ExamConfiguration ExamConfiguration @relation(fields: [examConfigId], references: [id])

  @@index([branchId, examDate])
  @@index([examConfigId])
}

model ExamType {
  id          String   @id
  name        String
  code        String   @unique
  description String?
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  branchId    String
  Branch      Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@index([branchId, isActive])
}

model MarksEntry {
  id                String            @id
  examConfigId      String
  studentId         String
  marksObtained     Float?
  isAbsent          Boolean           @default(false)
  remarks           String?
  enteredBy         String
  enteredAt         DateTime          @default(now())
  updatedAt         DateTime
  isSubmitted       Boolean           @default(false)
  submittedAt       DateTime?
  branchId          String
  Branch            Branch            @relation(fields: [branchId], references: [id], onDelete: Cascade)
  ExamConfiguration ExamConfiguration @relation(fields: [examConfigId], references: [id])
  Student           Student           @relation(fields: [studentId], references: [id])

  @@unique([examConfigId, studentId])
  @@index([branchId, examConfigId])
  @@index([enteredBy])
  @@index([studentId])
}

model SeatingPlan {
  id         String   @id
  studentId  String
  seatNumber String
  room       String
  row        Int?
  column     Int?
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  branchId   String
  Branch     Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)
  Student    Student  @relation(fields: [studentId], references: [id])

  @@index([studentId])
}

model WhatsAppTemplate {
  id                   String                 @id @default(cuid())
  name                 String
  description          String?
  watiTemplateId       String?                @unique
  templateBody         String
  templateVariables    String[]               @default([])
  category             String
  language             String                 @default("en")
  status               WhatsAppTemplateStatus @default(PENDING)
  isActive             Boolean                @default(true)
  branchId             String?
  createdBy            String
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  twilioContentSid     String?                @unique
  metaTemplateId       String?
  metaTemplateLanguage String                 @default("en")
  metaTemplateName     String
  metaTemplateStatus   String?
  metaApprovedAt       DateTime?
  metaRejectionReason  String?
  metaSubmittedAt      DateTime?
  
  // Rich Media and Interactive Components
  headerType           String?                // TEXT, IMAGE, VIDEO, DOCUMENT
  headerContent        String?                // Text content for header
  headerMediaUrl       String?                // URL for media header
  footerText           String?                // Footer text content
  buttons              Json?                  // JSON array of button objects
  mediaAttachments     Json?                  // JSON array of media attachments
  interactiveType      String?                // BUTTON, LIST, CTA_URL
  interactiveContent   Json?                  // JSON content for interactive elements
  
  messages             CommunicationMessage[]
  templateButtons      TemplateButton[]
  templateMedia        TemplateMedia[]
  branch               Branch?                @relation(fields: [branchId], references: [id])

  @@unique([metaTemplateName, metaTemplateLanguage])
  @@index([branchId])
  @@index([status])
  @@index([isActive])
  @@index([metaTemplateName])
}

model TemplateButton {
  id           String   @id @default(cuid())
  templateId   String
  type         String   // CALL_TO_ACTION, QUICK_REPLY, URL, PHONE_NUMBER
  text         String
  url          String?
  phoneNumber  String?
  payload      String?
  order        Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  template     WhatsAppTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  @@index([templateId])
  @@index([type])
}

model TemplateMedia {
  id             String   @id @default(cuid())
  templateId     String
  type           String   // IMAGE, VIDEO, DOCUMENT, AUDIO
  url            String
  filename       String?
  mimeType       String?
  size           Int?
  caption        String?
  supabaseBucket String   @default("whatsapp-media")
  supabasePath   String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  template       WhatsAppTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  @@index([templateId])
  @@index([type])
}

model CommunicationMessage {
  id              String             @id @default(cuid())
  title           String
  templateId      String?
  customMessage   String?
  messageType     MessageType        @default(WHATSAPP)
  recipientType   RecipientType
  status          MessageStatus      @default(PENDING)
  scheduledAt     DateTime?
  sentAt          DateTime?
  totalRecipients Int                @default(0)
  successfulSent  Int                @default(0)
  failed          Int                @default(0)
  watiMessageId   String?
  branchId        String
  createdBy       String
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  twilioMessageId String?
  metaMessageId   String?
  logs            CommunicationLog[]
  branch          Branch             @relation(fields: [branchId], references: [id])
  template        WhatsAppTemplate?  @relation(fields: [templateId], references: [id])
  job             MessageJob?
  recipients      MessageRecipient[]

  @@index([branchId])
  @@index([status])
  @@index([messageType])
  @@index([createdBy])
  @@index([createdAt])
  @@index([metaMessageId])
}

model MessageRecipient {
  id              String               @id @default(cuid())
  messageId       String
  recipientType   String
  recipientId     String
  recipientName   String
  recipientPhone  String
  status          RecipientStatus      @default(PENDING)
  sentAt          DateTime?
  deliveredAt     DateTime?
  readAt          DateTime?
  watiMessageId   String?
  errorMessage    String?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  twilioMessageId String?
  metaMessageId   String?
  message         CommunicationMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
  @@index([recipientType])
  @@index([status])
  @@index([metaMessageId])
}

model CommunicationLog {
  id          String                @id @default(cuid())
  messageId   String?
  action      String
  description String
  metadata    Json?
  userId      String
  createdAt   DateTime              @default(now())
  message     CommunicationMessage? @relation(fields: [messageId], references: [id])

  @@index([messageId])
  @@index([userId])
  @@index([createdAt])
}

model MessageJob {
  id                  String               @id @default(cuid())
  messageId           String               @unique
  status              JobStatus            @default(QUEUED)
  priority            Int                  @default(0)
  attempts            Int                  @default(0)
  maxAttempts         Int                  @default(3)
  scheduledAt         DateTime?
  startedAt           DateTime?
  completedAt         DateTime?
  failedAt            DateTime?
  errorMessage        String?
  errorStack          String?
  progress            Int                  @default(0)
  totalRecipients     Int                  @default(0)
  processedRecipients Int                  @default(0)
  successfulSent      Int                  @default(0)
  failed              Int                  @default(0)
  metadata            Json?
  createdBy           String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  message             CommunicationMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([priority, scheduledAt])
  @@index([createdAt])
  @@index([createdBy])
}

model CommunicationSettings {
  id                             String   @id @default(cuid())
  branchId                       String   @unique
  watiApiUrl                     String?
  watiApiToken                   String?
  watiPhoneNumberId              String?
  watiIsActive                   Boolean  @default(false)
  templateAutoSyncEnabled        Boolean  @default(true)
  templateSyncInterval           Int      @default(24)
  templateDefaultCategory        String?  @default("UTILITY")
  templateDefaultLanguage        String   @default("en")
  messageEnableScheduling        Boolean  @default(true)
  messageMaxRecipientsPerMessage Int      @default(1000)
  messageRetryFailedMessages     Boolean  @default(true)
  messageMaxRetryAttempts        Int      @default(3)
  messageRetryDelay              Int      @default(30)
  notificationEmailEnabled       Boolean  @default(false)
  notificationEmail              String?
  notifyOnFailures               Boolean  @default(true)
  notifyOnSuccess                Boolean  @default(false)
  notificationDailySummary       Boolean  @default(true)
  isActive                       Boolean  @default(true)
  createdAt                      DateTime @default(now())
  updatedAt                      DateTime @updatedAt
  createdBy                      String?
  updatedBy                      String?
  twilioAccountSid               String?
  twilioAuthToken                String?
  twilioIsActive                 Boolean  @default(false)
  twilioWhatsAppFrom             String?
  metaAccessToken                String?
  metaApiVersion                 String?  @default("v21.0")
  metaBusinessAccountId          String?
  metaIsActive                   Boolean  @default(false)
  metaPhoneNumberId              String?
  metaWebhookVerifyToken         String?
  phoneDefaultCountryCode        String?  @default("+91")
  phoneNormalizationEnabled      Boolean  @default(true)
  phoneOrganizationCountry       String?  @default("IN")
  branch                         Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@index([branchId])
  @@index([isActive])
  @@index([metaPhoneNumberId])
}

model Conversation {
  id                 String               @id @default(cuid())
  participantType    String
  participantId      String
  participantName    String
  participantPhone   String
  branchId           String
  lastMessageAt      DateTime?
  lastMessageContent String?
  lastMessageFrom    ChatMessageDirection
  unreadCount        Int                  @default(0)
  isActive           Boolean              @default(true)
  metadata           Json?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  messages           ChatMessage[]
  branch             Branch               @relation(fields: [branchId], references: [id])

  @@unique([branchId, participantPhone])
  @@index([branchId])
  @@index([participantType])
  @@index([participantPhone])
  @@index([lastMessageAt])
  @@index([isActive])
}

model ChatMessage {
  id              String               @id @default(cuid())
  conversationId  String
  direction       ChatMessageDirection
  content         String
  messageType     ChatMessageType      @default(TEXT)
  twilioMessageId String?
  status          ChatMessageStatus    @default(SENT)
  readAt          DateTime?
  sentBy          String?
  mediaUrl        String?
  mediaType       String?
  metadata        Json?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  metaMessageId   String?
  deliveredAt     DateTime?
  sentAt          DateTime?
  
  // Rich Media and Interactive Components
  headerType      String?              // TEXT, IMAGE, VIDEO, DOCUMENT
  headerContent   String?              // Text content for header
  headerMediaUrl  String?              // URL for media header
  footerText      String?              // Footer text content
  buttons         Json?                // JSON array of button objects
  interactiveType String?              // BUTTON, LIST, CTA_URL
  interactiveContent Json?             // JSON content for interactive elements
  
  conversation    Conversation         @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  mediaAttachments ChatMessageMedia[]

  @@index([conversationId])
  @@index([direction])
  @@index([createdAt])
  @@index([twilioMessageId])
  @@index([metaMessageId])
  @@index([status])
}

model ChatMessageMedia {
  id             String      @id @default(cuid())
  messageId      String
  type           String      // IMAGE, VIDEO, DOCUMENT, AUDIO, STICKER
  url            String
  filename       String?
  mimeType       String?
  size           Int?
  caption        String?
  supabaseBucket String      @default("whatsapp-media")
  supabasePath   String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  
  message        ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  
  @@index([messageId])
  @@index([type])
}

enum CallerType {
  TEACHER
  HEAD
}

enum AttendanceType {
  IN
  OUT
  BRANCH_TRANSFER_OUT
  BRANCH_TRANSFER_IN
}

enum AttendanceStatus {
  PRESENT
  LEAVE
  ABSENT
  HALF_DAY
  LATE
}

enum QuestionType {
  MCQ
  SHORT_ANSWER
  LONG_ANSWER
  TRUE_FALSE
  FILL_IN_BLANKS
  MATCH_THE_FOLLOWING
  ASSERTION_REASONING
  DESCRIPTIVE
  ANALYTICAL
  EVALUATIVE
  COMPARATIVE
  APPLICATION_BASED
  CASE_STUDY
  OPINION_BASED
  EXPLORATORY
  CAUSE_EFFECT
  HYPOTHETICAL
  INTERPRETIVE
  JUSTIFICATION
}

enum QuestionCategory {
  OBJECTIVE
  SUBJECTIVE
}

enum QuestionDifficulty {
  EASY
  MEDIUM
  HARD
}

enum BackgroundTaskStatus {
  PENDING
  QUEUED
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
  RETRY
  PAUSED
}

enum TaskLogLevel {
  DEBUG
  INFO
  WARN
  ERROR
  FATAL
}

enum AssessmentPermissionType {
  ADMIN
  SUBJECT_COORDINATOR
  TEACHER
  VIEW_ONLY
}

enum WhatsAppTemplateStatus {
  PENDING
  APPROVED
  REJECTED
  PAUSED
}

enum MessageType {
  WHATSAPP
  SMS
  EMAIL
}

enum RecipientType {
  ALL_CONTACTS
  INDIVIDUAL_STUDENTS
  ENTIRE_CLASS
  SPECIFIC_SECTION
  MULTIPLE_CLASSES
  ALL_TEACHERS
  SPECIFIC_TEACHERS
  ALL_EMPLOYEES
  SPECIFIC_EMPLOYEES
  PARENTS
  CUSTOM_GROUP
  ALL_STUDENTS
  INDIVIDUAL_SECTION
  TEACHERS
  EMPLOYEES
}

enum MessageStatus {
  DRAFT
  PENDING
  SENDING
  SENT
  FAILED
  CANCELLED
  SCHEDULED
}

enum RecipientStatus {
  PENDING
  SENT
  DELIVERED
  READ
  FAILED
}

enum JobStatus {
  QUEUED
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  RETRYING
}

enum ChatMessageDirection {
  INCOMING
  OUTGOING
}

enum ChatMessageType {
  TEXT
  IMAGE
  DOCUMENT
  AUDIO
  VIDEO
  LOCATION
}

enum ChatMessageStatus {
  SENDING
  SENT
  DELIVERED
  READ
  FAILED
}

enum TransportFeeType {
  ROUTE_WISE
  STOP_WISE
  DISTANCE_BASED
  FLAT_RATE
}

enum TransportAssignmentType {
  ROUTE_ONLY
  STOP_ONLY
  ROUTE_STOP
}

enum TransportStaffType {
  DRIVER
  CONDUCTOR
}

enum TransportStaffStatus {
  ACTIVE
  INACTIVE
  ON_LEAVE
  SUSPENDED
}

enum NotificationType {
  INSURANCE_EXPIRY
  POLLUTION_EXPIRY
  FITNESS_EXPIRY
  LICENSE_EXPIRY
  MEDICAL_EXPIRY
  TAX_DUE
  PERMIT_EXPIRY
  MAINTENANCE_DUE
  FUEL_ALERT
  LOAN_DUE
}

enum NotificationMethod {
  EMAIL
  WHATSAPP
  BOTH
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  READ
}

enum InspectionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum InspectionSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum InspectionItemType {
  SAFETY
  MECHANICAL
  ELECTRICAL
  INTERIOR
  EXTERIOR
  DOCUMENTATION
}

// New simplified admission models
model AdmissionInquiry {
  id                  String                 @id @default(cuid())
  registrationNumber  String                 @unique
  firstName           String
  lastName            String
  parentName          String
  parentPhone         String
  parentEmail         String?
  classApplying       String
  dateOfBirth         DateTime?
  gender              String?
  address             String?
  status              InquiryStatus          @default(NEW)
  source              String?
  notes               String?
  assignedToId        String?
  followUpDate        DateTime?
  registrationSource  String?                // "ONLINE" or "OFFLINE"
  registeredByName    String?                // Name of staff member who registered (for offline)
  
  // Detailed parent information
  motherName          String?
  motherMobile        String?
  motherEmail         String?
  
  // Detailed address information
  city                String?
  state               String?
  country             String?
  
  // Previous school information
  classLastAttended   String?
  schoolLastAttended  String?
  percentageObtained  String?
  
  // Workflow-specific fields
  contactMethod       String?                // Call/Email for CONTACTED stage
  contactNotes        String?                // Notes from contact for CONTACTED stage
  visitScheduledDate  DateTime?              // Date & time for VISIT_SCHEDULED stage
  interviewScheduledDate DateTime?           // Date & time for INTERVIEW_SCHEDULED stage
  interviewMode       String?                // Online/Offline for INTERVIEW_SCHEDULED stage
  interviewNotes      String?                // Notes for INTERVIEW_CONCLUDED stage
  interviewRemarks    String?                // Remarks for INTERVIEW_CONCLUDED stage
  interviewMarks      Int?                   // Marks for INTERVIEW_CONCLUDED stage
  
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  branchId            String
  sessionId           String?
  studentId           String?               @unique
  
  branch              Branch                 @relation(fields: [branchId], references: [id])
  session             AcademicSession?       @relation(fields: [sessionId], references: [id])
  student             Student?               @relation(fields: [studentId], references: [id])
  followUps           InquiryFollowUp[]
  
  @@index([branchId])
  @@index([sessionId])
  @@index([status])
  @@index([parentPhone])
}

model InquiryFollowUp {
  id                 String             @id @default(cuid())
  inquiryId          String
  followUpDate       DateTime
  notes              String?
  contactMethod      String?           // PHONE, EMAIL, VISIT, WHATSAPP
  outcome            String?
  nextFollowUpDate   DateTime?
  createdAt          DateTime          @default(now())
  createdById        String?
  
  inquiry            AdmissionInquiry  @relation(fields: [inquiryId], references: [id], onDelete: Cascade)
  
  @@index([inquiryId])
  @@index([followUpDate])
}

// Action Item enums
enum ActionItemStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  VERIFIED
  REJECTED
  CANCELLED
}

enum ActionItemPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Simplified enums for admission system
enum InquiryStatus {
  NEW
  CONTACTED
  VISIT_SCHEDULED
  VISITED
  FORM_SUBMITTED
  INTERVIEW_SCHEDULED
  INTERVIEW_CONCLUDED
  ADMITTED
  REJECTED
  CLOSED
  ARCHIVED
}

model AutomationLog {
  id                String    @id @default(cuid())
  automationType    String    // ADMISSION_REGISTRATION, FEE_REMINDER, etc.
  automationTrigger String    // admission_inquiry_created, fee_due_reminder, etc.
  messageTitle      String
  messageContent    String?
  templateId        String?
  templateName      String?
  
  // Recipient Information
  recipientId       String
  recipientName     String
  recipientPhone    String
  recipientType     String    // STUDENT, PARENT, TEACHER, EMPLOYEE
  
  // Delivery Status
  status            String    @default("PENDING") // PENDING, SENT, DELIVERED, READ, FAILED
  sentAt            DateTime?
  deliveredAt       DateTime?
  readAt            DateTime?
  errorMessage      String?
  
  // External System References
  externalMessageId String?   // WhatsApp message ID, SMS ID, etc.
  platformUsed      String?   // WHATSAPP, SMS, EMAIL
  
  // Context and Metadata
  automationContext Json?     // Additional context data
  branchId          String
  createdBy         String    @default("system")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  branch            Branch    @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@index([branchId])
  @@index([automationType])
  @@index([status])
  @@index([recipientType])
  @@index([createdAt])
  @@index([recipientPhone])
  @@index([externalMessageId])
}
