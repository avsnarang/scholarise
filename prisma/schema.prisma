generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Branch {
  id                   String                 @id @default(cuid())
  name                 String
  code                 String                 @unique
  address              String?
  city                 String?
  state                String?
  country              String?
  phone                String?
  email                String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  order                Int                    @default(0)
  admissionLeads       AdmissionLead[]
  chapters             Chapter[]
  classes              Class[]
  classwiseFees        ClasswiseFee[]
  departments          Department[]
  designations         Designation[]
  employees            Employee[]
  employeeBranchAccess EmployeeBranchAccess[]
  feeCollections       FeeCollection[]
  feeHeads             FeeHead[]
  feeTerms             FeeTerm[]
  leavePolicies        LeavePolicy[]
  moneyCollections     MoneyCollection[]
  students             Student[]
  teachers             Teacher[]
  routes               TransportRoute[]
  attendanceDevices    AttendanceDevice[]
  attendanceLocations  AttendanceLocation[]
  attendanceWindows    AttendanceWindow[]
  locationTypes        LocationType[]
}

model Student {
  id                     String                @id @default(cuid())
  admissionNumber        String                @unique
  firstName              String
  lastName               String
  dateOfBirth            DateTime
  gender                 String
  address                String?
  phone                  String?
  email                  String?
  personalEmail          String?
  bloodGroup             String?
  religion               String?
  nationality            String?
  caste                  String?
  aadharNumber           String?
  udiseId                String?
  joinDate               DateTime              @default(now())
  dateOfAdmission        DateTime?
  rollNumber             Int?                  @db.SmallInt
  isActive               Boolean               @default(true)
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  branchId               String
  parentId               String?
  username               String?
  password               String?
  permanentAddress       String?
  permanentCity          String?
  permanentState         String?
  permanentCountry       String?
  permanentZipCode       String?
  correspondenceAddress  String?
  correspondenceCity     String?
  correspondenceState    String?
  correspondenceCountry  String?
  correspondenceZipCode  String?
  previousSchool         String?
  lastClassAttended      String?
  mediumOfInstruction    String?
  recognisedByStateBoard Boolean?
  schoolCity             String?
  schoolState            String?
  reasonForLeaving       String?
  clerkId                String?
  cbse10RollNumber       String?
  cbse12RollNumber       String?
  sectionId              String?
  academicRecords        AcademicRecord[]
  feeCollections         FeeCollection[]
  moneyCollectionItems   MoneyCollectionItem[]
  branch                 Branch                @relation(fields: [branchId], references: [id])
  parent                 Parent?               @relation(fields: [parentId], references: [id])
  section                Section?              @relation(fields: [sectionId], references: [id])
  studentAttendance      StudentAttendance[]
  studentSiblings        StudentSibling[]      @relation("StudentToSibling")
  siblingRelationships   StudentSibling[]      @relation("SiblingToStudent")
  subjects               StudentSubject[]      // Student-Subject enrollments
  transferCertificates   TransferCertificate[] // Transfer certificates for the student
  transportAssignments   TransportAssignment[] // Transport assignments (bus routes)
  
  // Add database indexes for performance
  @@index([branchId, admissionNumber], name: "student_branch_admission_idx")
  @@index([branchId, isActive], name: "student_branch_active_idx")
  @@index([sectionId, isActive], name: "student_section_active_idx")
  @@index([admissionNumber, branchId], name: "student_admission_branch_idx")
}

model Parent {
  id                 String    @id @default(cuid())
  fatherName         String?
  fatherDob          DateTime?
  fatherEducation    String?
  fatherOccupation   String?
  fatherMobile       String?
  fatherEmail        String?
  fatherAadharNumber String?
  motherName         String?
  motherDob          DateTime?
  motherEducation    String?
  motherOccupation   String?
  motherMobile       String?
  motherEmail        String?
  motherAadharNumber String?
  guardianName       String?
  guardianDob        DateTime?
  guardianEducation  String?
  guardianOccupation String?
  guardianMobile     String?
  guardianEmail      String?
  guardianAadharNumber String?
  parentAnniversary  DateTime?
  monthlyIncome      String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  clerkId            String?
  students           Student[]
}

model Teacher {
  id                         String             @id @default(cuid())
  firstName                  String
  lastName                   String
  qualification              String?
  specialization             String?
  joinDate                   DateTime           @default(now())
  isActive                   Boolean            @default(true)
  createdAt                  DateTime           @default(now())
  updatedAt                  DateTime           @updatedAt
  userId                     String?            @unique
  branchId                   String
  employeeCode               String?            @unique
  clerkId                    String?
  certifications             String[]           @default([])
  subjects                   String[]           @default([])
  aadharNumber               String?
  accessCardId               String?
  accountNumber              String?
  address                    String?
  alternatePhone             String?
  assetReturnStatus          String?
  bankName                   String?
  bio                        String?
  bloodGroup                 String?
  city                       String?
  confirmationDate           DateTime?
  country                    String?
  dateOfBirth                DateTime?
  department                 String?
  designation                String?
  deviceIssued               String?
  emergencyContactName       String?
  emergencyContactPhone      String?
  emergencyContactRelation   String?
  employeeType               String?
  esiNumber                  String?
  experience                 String?
  gender                     String?
  ifscCode                   String?
  institution                String?
  maritalStatus              String?
  middleName                 String?
  nationality                String?
  officialEmail              String?
  panNumber                  String?
  permanentAddress           String?
  permanentCity              String?
  permanentCountry           String?
  permanentPincode           String?
  permanentState             String?
  personalEmail              String?
  pfNumber                   String?
  phone                      String?
  pincode                    String?
  previousEmployer           String?
  previousExperience         String?
  professionalQualifications String?
  religion                   String?
  reportingManager           String?
  salaryStructure            String?
  softwareLicenses           String?
  specialCertifications      String?
  state                      String?
  uanNumber                  String?
  yearOfCompletion           String?
  leaveApplications          LeaveApplication[]
  leaveBalances              LeaveBalance[]
  salaryIncrements           SalaryIncrement[]
  branch                     Branch             @relation(fields: [branchId], references: [id])
  sections                   Section[]          // Teachers are assigned to sections
  salaries                   TeacherSalary[]
  userRoles                  UserRole[]
  attendances                StaffAttendance[]
}

model Employee {
  id                         String                 @id @default(cuid())
  firstName                  String
  lastName                   String
  designation                String
  department                 String?
  joinDate                   DateTime               @default(now())
  isActive                   Boolean                @default(true)
  createdAt                  DateTime               @default(now())
  updatedAt                  DateTime               @updatedAt
  userId                     String?                @unique
  branchId                   String
  departmentId               String?
  designationId              String?
  certifications             String[]               @default([])
  subjects                   String[]               @default([])
  aadharNumber               String?
  accessCardId               String?
  accountNumber              String?
  address                    String?
  alternatePhone             String?
  assetReturnStatus          String?
  bankName                   String?
  bio                        String?
  bloodGroup                 String?
  city                       String?
  confirmationDate           DateTime?
  country                    String?
  dateOfBirth                DateTime?
  deviceIssued               String?
  emergencyContactName       String?
  emergencyContactPhone      String?
  emergencyContactRelation   String?
  employeeCode               String?                @unique
  employeeType               String?
  esiNumber                  String?
  experience                 String?
  gender                     String?
  ifscCode                   String?
  institution                String?
  maritalStatus              String?
  middleName                 String?
  nationality                String?
  officialEmail              String?
  panNumber                  String?
  permanentAddress           String?
  permanentCity              String?
  permanentCountry           String?
  permanentPincode           String?
  permanentState             String?
  personalEmail              String?
  pfNumber                   String?
  phone                      String?
  pincode                    String?
  previousEmployer           String?
  previousExperience         String?
  professionalQualifications String?
  qualification              String?
  religion                   String?
  reportingManager           String?
  salaryStructure            String?
  softwareLicenses           String?
  specialCertifications      String?
  specialization             String?
  state                      String?
  uanNumber                  String?
  yearOfCompletion           String?
  clerkId                    String?
  branch                     Branch                 @relation(fields: [branchId], references: [id])
  departmentRef              Department?            @relation("EmployeeDepartment", fields: [departmentId], references: [id])
  designationRef             Designation?           @relation("EmployeeDesignation", fields: [designationId], references: [id])
  branchAccessRecords        EmployeeBranchAccess[] @relation("EmployeeBranchAccessRecords")
  salaries                   EmployeeSalary[]
  leaveApplications          LeaveApplication[]
  leaveBalances              LeaveBalance[]
  salaryIncrements           SalaryIncrement[]
  userRoles                  UserRole[]
  staffAttendances           StaffAttendance[]
}

model Class {
  id                   String                 @id @default(cuid())
  name                 String
  isActive             Boolean                @default(true)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  branchId             String
  sessionId            String
  displayOrder         Int                    @default(0)
  description          String?
  grade                Int?
  
  // Relations
  branch               Branch                 @relation(fields: [branchId], references: [id])
  session              AcademicSession        @relation(fields: [sessionId], references: [id])
  sections             Section[]              // One class can have multiple sections
  subjects             ClassSubject[]
  blueprints           Blueprint[]
  classwiseFees        ClasswiseFee[]
  moneyCollectionLinks MoneyCollectionClass[] @relation("ClassMoneyCollectionLinks")
  
  @@unique([name, branchId, sessionId]) // Ensure unique class names per branch/session
}

model Section {
  id                 String              @id @default(cuid())
  name               String
  capacity           Int                 @default(30)
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  classId            String
  teacherId          String?
  displayOrder       Int                 @default(0)
  
  // Relations
  class              Class               @relation(fields: [classId], references: [id], onDelete: Cascade)
  teacher            Teacher?            @relation(fields: [teacherId], references: [id])
  students           Student[]
  studentAttendances StudentAttendance[]

  // Add database indexes for performance
  @@index([classId, isActive], name: "section_class_active_idx")
  @@index([isActive, displayOrder], name: "section_active_display_idx")
  @@unique([name, classId])
}

model AcademicSession {
  id               String            @id @default(cuid())
  name             String
  startDate        DateTime
  endDate          DateTime
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  academicRecords  AcademicRecord[]
  classes          Class[]
  classwiseFees    ClasswiseFee[]    @relation("ClasswiseFeeSession")
  feeCollections   FeeCollection[]   @relation("FeeCollectionSession")
  feeHeads         FeeHead[]         @relation("FeeHeadSession")
  feeTerms         FeeTerm[]         @relation("FeeTermSession")
  moneyCollections MoneyCollection[] @relation("MoneyCollectionSession")
}

model AcademicRecord {
  id        String          @id @default(cuid())
  studentId String
  sessionId String
  classId   String?
  status    String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  session   AcademicSession @relation(fields: [sessionId], references: [id])
  student   Student         @relation(fields: [studentId], references: [id])
}

model TransferCertificate {
  id        String   @id @default(cuid())
  tcNumber  String   @unique
  issueDate DateTime @default(now())
  reason    String?
  remarks   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
}

model StudentSibling {
  id               String   @id @default(cuid())
  relationshipType String
  createdAt        DateTime @default(now())
  studentId        String
  siblingId        String
  sibling          Student  @relation("SiblingToStudent", fields: [siblingId], references: [id], onDelete: Cascade)
  student          Student  @relation("StudentToSibling", fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, siblingId])
}

model TransportRoute {
  id          String          @id @default(cuid())
  name        String
  description String?
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  branchId    String
  branch      Branch          @relation(fields: [branchId], references: [id])
  stops       TransportStop[]
}

model TransportStop {
  id          String                @id @default(cuid())
  name        String
  address     String?
  distance    Float?
  fee         Float
  sequence    Int
  isActive    Boolean               @default(true)
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  routeId     String
  assignments TransportAssignment[]
  route       TransportRoute        @relation(fields: [routeId], references: [id], onDelete: Cascade)
}

model TransportAssignment {
  id        String        @id @default(cuid())
  startDate DateTime      @default(now())
  endDate   DateTime?
  isActive  Boolean       @default(true)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  studentId String
  stopId    String
  stop      TransportStop @relation(fields: [stopId], references: [id])
  student   Student       @relation(fields: [studentId], references: [id])
}

model AttendanceLocation {
  id             String             @id @default(cuid())
  name           String
  latitude       Float
  longitude      Float
  radius         Int
  isActive       Boolean            @default(true)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  branchId       String
  locationTypeId String?
  devices        AttendanceDevice[]
  branch         Branch             @relation(fields: [branchId], references: [id])
  locationType   LocationType?      @relation(fields: [locationTypeId], references: [id])
  attendances    StaffAttendance[]

  @@map("attendanceLocation")
}

model LocationType {
  id                String               @id @default(cuid())
  name              String
  code              String
  description       String?
  isDefault         Boolean              @default(false)
  isActive          Boolean              @default(true)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  branchId          String
  locations         AttendanceLocation[]
  attendanceWindows AttendanceWindow[]
  branch            Branch               @relation(fields: [branchId], references: [id])

  @@map("locationType")
}

model AttendanceWindow {
  id                     String            @id @default(cuid())
  name                   String
  startTime              String
  endTime                String
  isMon                  Boolean           @default(true)
  isTue                  Boolean           @default(true)
  isWed                  Boolean           @default(true)
  isThu                  Boolean           @default(true)
  isFri                  Boolean           @default(true)
  isSat                  Boolean           @default(false)
  isSun                  Boolean           @default(false)
  allowLateMarking       Boolean           @default(false)
  lateMarkingGracePeriod Int               @default(0)
  isActive               Boolean           @default(true)
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  branchId               String
  locationTypeId         String
  branch                 Branch            @relation(fields: [branchId], references: [id])
  locationType           LocationType      @relation(fields: [locationTypeId], references: [id])
  attendanceRecords      StaffAttendance[]

  @@map("attendanceWindow")
}

model AttendanceDevice {
  id         String              @id @default(cuid())
  name       String
  deviceId   String              @unique
  isActive   Boolean             @default(true)
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  branchId   String
  locationId String?
  branch     Branch              @relation(fields: [branchId], references: [id])
  location   AttendanceLocation? @relation(fields: [locationId], references: [id])

  @@map("attendanceDevice")
}

model StaffAttendance {
  id                  String             @id @default(cuid())
  timestamp           DateTime           @default(now())
  latitude            Float
  longitude           Float
  distance            Int
  isWithinAllowedArea Boolean            @default(false)
  notes               String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  locationId          String
  teacherId           String?
  employeeId          String?
  windowId            String?
  type                AttendanceType     @default(IN)
  employee            Employee?          @relation(fields: [employeeId], references: [id])
  location            AttendanceLocation @relation(fields: [locationId], references: [id])
  teacher             Teacher?           @relation(fields: [teacherId], references: [id])
  attendanceWindow    AttendanceWindow?  @relation(fields: [windowId], references: [id])

  @@index([timestamp, type])
  @@index([teacherId, timestamp])
  @@index([employeeId, timestamp])
  @@map("staffAttendance")
}

model StudentAttendance {
  id         String           @id @default(cuid())
  date       DateTime         @default(now())
  status     AttendanceStatus @default(PRESENT)
  reason     String?
  notes      String?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  studentId  String
  markedById String?
  sectionId  String
  section    Section          @relation(fields: [sectionId], references: [id])
  student    Student          @relation(fields: [studentId], references: [id])

  @@unique([studentId, date])
  @@index([date, sectionId])
  @@index([studentId, date])
  @@map("studentAttendance")
}

model Subject {
  id          String           @id @default(cuid())
  name        String
  code        String?
  description String?
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  chapters    Chapter[]
  classes     ClassSubject[]
  students    StudentSubject[]
}

model ClassSubject {
  id        String   @id @default(cuid())
  classId   String
  subjectId String
  createdAt DateTime @default(now())
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([classId, subjectId])
}

model StudentSubject {
  id        String   @id @default(cuid())
  studentId String
  subjectId String
  createdAt DateTime @default(now())
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([studentId, subjectId])
}

model LeavePolicy {
  id                String             @id @default(cuid())
  name              String
  description       String?
  maxDaysPerYear    Int
  isPaid            Boolean            @default(true)
  applicableRoles   String[]
  branchId          String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  leaveApplications LeaveApplication[]
  leaveBalances     LeaveBalance[]
  branch            Branch             @relation(fields: [branchId], references: [id])
}

model LeaveBalance {
  id            String      @id @default(cuid())
  year          Int
  totalDays     Int
  usedDays      Int         @default(0)
  remainingDays Int
  policyId      String
  teacherId     String?
  employeeId    String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  employee      Employee?   @relation(fields: [employeeId], references: [id])
  policy        LeavePolicy @relation(fields: [policyId], references: [id])
  teacher       Teacher?    @relation(fields: [teacherId], references: [id])

  @@unique([policyId, teacherId, year])
  @@unique([policyId, employeeId, year])
}

model LeaveApplication {
  id         String      @id @default(cuid())
  startDate  DateTime
  endDate    DateTime
  reason     String
  status     String      @default("PENDING")
  comments   String?
  policyId   String
  teacherId  String?
  employeeId String?
  approvedBy String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  employee   Employee?   @relation(fields: [employeeId], references: [id])
  policy     LeavePolicy @relation(fields: [policyId], references: [id])
  teacher    Teacher?    @relation(fields: [teacherId], references: [id])
}

model RbacRole {
  id          String               @id @default(cuid())
  name        String               @unique
  description String?
  isSystem    Boolean              @default(false)
  isActive    Boolean              @default(true)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  permissions RbacRolePermission[]
  userRoles   UserRole[]
}

model RbacPermission {
  id              String               @id @default(cuid())
  name            String               @unique
  description     String?
  category        String?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  rolePermissions RbacRolePermission[]
}

model RbacRolePermission {
  id           String         @id @default(cuid())
  roleId       String
  permissionId String
  createdAt    DateTime       @default(now())
  permission   RbacPermission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         RbacRole       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

model UserRole {
  id         String    @id @default(cuid())
  userId     String
  roleId     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  teacherId  String?
  employeeId String?
  employee   Employee? @relation(fields: [employeeId], references: [id])
  role       RbacRole  @relation(fields: [roleId], references: [id])
  teacher    Teacher?  @relation(fields: [teacherId], references: [id])

  @@unique([userId, roleId])
}

model SalaryStructure {
  id               String           @id @default(cuid())
  name             String
  description      String?
  basicSalary      Float
  daPercentage     Float            @default(0)
  pfPercentage     Float            @default(0)
  esiPercentage    Float            @default(0)
  isActive         Boolean          @default(true)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  employeeSalaries EmployeeSalary[]
  teacherSalaries  TeacherSalary[]
}

model EmployeeSalary {
  id                   String          @id @default(cuid())
  employeeId           String
  structureId          String
  customBasicSalary    Float?
  customDaPercentage   Float?
  customPfPercentage   Float?
  customEsiPercentage  Float?
  additionalAllowances Float           @default(0)
  startDate            DateTime        @default(now())
  endDate              DateTime?
  isActive             Boolean         @default(true)
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  employee             Employee        @relation(fields: [employeeId], references: [id])
  structure            SalaryStructure @relation(fields: [structureId], references: [id])
  salaryPayments       SalaryPayment[]

  @@unique([employeeId, structureId, startDate])
}

model TeacherSalary {
  id                   String          @id @default(cuid())
  teacherId            String
  structureId          String
  customBasicSalary    Float?
  customDaPercentage   Float?
  customPfPercentage   Float?
  customEsiPercentage  Float?
  additionalAllowances Float           @default(0)
  startDate            DateTime        @default(now())
  endDate              DateTime?
  isActive             Boolean         @default(true)
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  salaryPayments       SalaryPayment[]
  structure            SalaryStructure @relation(fields: [structureId], references: [id])
  teacher              Teacher         @relation(fields: [teacherId], references: [id])

  @@unique([teacherId, structureId, startDate])
}

model SalaryPayment {
  id                      String          @id @default(cuid())
  month                   Int
  year                    Int
  basicSalary             Float
  daAmount                Float
  pfDeduction             Float
  esiDeduction            Float
  employerPfContribution  Float
  employerEsiContribution Float
  additionalAllowances    Float           @default(0)
  leaveDeductions         Float           @default(0)
  otherDeductions         Float           @default(0)
  otherAdditions          Float           @default(0)
  totalEarnings           Float
  totalDeductions         Float
  netPayable              Float
  paymentDate             DateTime?
  paymentStatus           String          @default("PENDING")
  remarks                 String?
  teacherSalaryId         String?
  employeeSalaryId        String?
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  employeeSalary          EmployeeSalary? @relation(fields: [employeeSalaryId], references: [id])
  teacherSalary           TeacherSalary?  @relation(fields: [teacherSalaryId], references: [id])

  @@unique([month, year, teacherSalaryId])
  @@unique([month, year, employeeSalaryId])
}

model SalaryIncrement {
  id                  String    @id @default(cuid())
  incrementAmount     Float?
  incrementPercentage Float?
  oldBasicSalary      Float
  newBasicSalary      Float
  effectiveDate       DateTime
  remarks             String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  teacherId           String?
  employeeId          String?
  appliedById         String?
  employee            Employee? @relation(fields: [employeeId], references: [id])
  teacher             Teacher?  @relation(fields: [teacherId], references: [id])

  @@index([teacherId])
  @@index([employeeId])
  @@index([effectiveDate])
}

model Department {
  id          String     @id @default(cuid())
  name        String
  code        String     @unique
  description String?
  type        String
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  branchId    String
  headId      String?
  branch      Branch     @relation(fields: [branchId], references: [id])
  employees   Employee[] @relation("EmployeeDepartment")
}

model Designation {
  id          String     @id @default(cuid())
  title       String
  code        String     @unique
  description String?
  category    String
  level       String
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  branchId    String
  branch      Branch     @relation(fields: [branchId], references: [id])
  employees   Employee[] @relation("EmployeeDesignation")
}

model AdmissionLead {
  id                       String                @id @default(cuid())
  firstName                String
  lastName                 String
  email                    String?
  phone                    String?
  parentName               String?
  parentPhone              String?
  parentEmail              String?
  address                  String?
  city                     String?
  state                    String?
  country                  String?
  zipCode                  String?
  gradeApplyingFor         String?
  academicSession          String?
  sourceId                 String?
  status                   AdmissionStatus       @default(NEW)
  notes                    String?
  assignedToId             String?
  createdAt                DateTime              @default(now())
  updatedAt                DateTime              @updatedAt
  branchId                 String
  leadType                 String?
  appliedClass             String?
  birthDate                DateTime?
  gender                   String?
  nextFollowUpDate         DateTime?
  lastContactDate          DateTime?
  registrationNumber       String?
  provisionalInvoiceNumber String?
  application              AdmissionApplication?
  assignedTo               AdmissionStaff?       @relation(fields: [assignedToId], references: [id])
  branch                   Branch                @relation(fields: [branchId], references: [id])
  source                   LeadSource?           @relation(fields: [sourceId], references: [id])
  offer                    AdmissionOffer?
  assessments              Assessment[]
  followUps                FollowUp[]
  documents                LeadDocument[]
  interactions             LeadInteraction[]
  payments                 PaymentTransaction[]
}

model LeadSource {
  id          String          @id @default(cuid())
  name        String
  description String?
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  leads       AdmissionLead[]
}

model LeadInteraction {
  id            String          @id @default(cuid())
  leadId        String
  type          String
  description   String
  date          DateTime
  conductedById String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  conductedBy   AdmissionStaff? @relation(fields: [conductedById], references: [id])
  lead          AdmissionLead   @relation(fields: [leadId], references: [id])
}

model LeadDocument {
  id           String          @id @default(cuid())
  leadId       String
  name         String
  type         String
  url          String
  uploadedAt   DateTime        @default(now())
  uploadedById String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  lead         AdmissionLead   @relation(fields: [leadId], references: [id])
  uploadedBy   AdmissionStaff? @relation(fields: [uploadedById], references: [id])
}

model FollowUp {
  id            String          @id @default(cuid())
  leadId        String
  scheduledDate DateTime
  description   String
  status        FollowUpStatus  @default(PENDING)
  completedDate DateTime?
  assignedToId  String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  assignedTo    AdmissionStaff? @relation(fields: [assignedToId], references: [id])
  lead          AdmissionLead   @relation(fields: [leadId], references: [id])
}

model AdmissionStaff {
  id                   String                 @id @default(cuid())
  userId               String?                @unique
  clerkId              String?
  name                 String
  email                String?
  phone                String?
  role                 String
  isActive             Boolean                @default(true)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  applications         AdmissionApplication[]
  leads                AdmissionLead[]
  conductedAssessments Assessment[]
  followUps            FollowUp[]
  documents            LeadDocument[]
  interactions         LeadInteraction[]
  processedPayments    PaymentTransaction[]
}

model AdmissionApplication {
  id                String                   @id @default(cuid())
  leadId            String                   @unique
  applicationNumber String                   @unique
  applicationDate   DateTime                 @default(now())
  status            ApplicationStatus        @default(SUBMITTED)
  currentStage      String?
  assignedToId      String?
  reviewedById      String?
  reviewDate        DateTime?
  decisionDate      DateTime?
  decisionById      String?
  decisionNotes     String?
  offerAcceptedDate DateTime?
  feePaid           Boolean                  @default(false)
  feeAmount         Float?
  feeDate           DateTime?
  enrollmentDate    DateTime?
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt
  assignedTo        AdmissionStaff?          @relation(fields: [assignedToId], references: [id])
  lead              AdmissionLead            @relation(fields: [leadId], references: [id])
  requirements      ApplicationRequirement[]
  stages            ApplicationStage[]
}

model ApplicationStage {
  id            String               @id @default(cuid())
  applicationId String
  name          String
  description   String?
  sequence      Int
  startDate     DateTime?
  endDate       DateTime?
  status        StageStatus          @default(PENDING)
  completedById String?
  completedDate DateTime?
  notes         String?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  application   AdmissionApplication @relation(fields: [applicationId], references: [id])
}

model ApplicationRequirement {
  id            String               @id @default(cuid())
  applicationId String
  name          String
  description   String?
  isRequired    Boolean              @default(true)
  status        RequirementStatus    @default(PENDING)
  completedDate DateTime?
  notes         String?
  documentUrl   String?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  application   AdmissionApplication @relation(fields: [applicationId], references: [id])
}

model PaymentTransaction {
  id            String          @id @default(cuid())
  leadId        String
  amount        Float
  method        String
  status        String
  type          String
  reference     String?
  transactionId String?
  invoiceNumber String?
  paymentDate   DateTime        @default(now())
  notes         String?
  processedById String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  lead          AdmissionLead   @relation(fields: [leadId], references: [id])
  processedBy   AdmissionStaff? @relation(fields: [processedById], references: [id])
}

model Assessment {
  id            String          @id @default(cuid())
  leadId        String
  scheduledDate DateTime
  actualDate    DateTime?
  assessorId    String?
  type          String
  subject       String?
  status        String
  score         Float?
  maxScore      Float?
  result        String?
  notes         String?
  location      String?
  duration      Int?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  assessor      AdmissionStaff? @relation(fields: [assessorId], references: [id])
  lead          AdmissionLead   @relation(fields: [leadId], references: [id])
}

model AdmissionOffer {
  id             String        @id @default(cuid())
  leadId         String        @unique
  offerDate      DateTime      @default(now())
  expiryDate     DateTime
  status         String
  offerLetterUrl String?
  terms          String?
  confirmedDate  DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  lead           AdmissionLead @relation(fields: [leadId], references: [id])
}

model EmployeeBranchAccess {
  id         String   @id @default(cuid())
  employeeId String
  branchId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  branch     Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)
  employee   Employee @relation("EmployeeBranchAccessRecords", fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, branchId])
}

model Chapter {
  id          String             @id @default(cuid())
  name        String
  code        String?
  description String?
  subjectId   String
  branchId    String?
  isActive    Boolean            @default(true)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  blueprints  BlueprintChapter[]
  branch      Branch?            @relation(fields: [branchId], references: [id])
  subject     Subject            @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  questions   Question[]
  subTopics   SubTopic[]
}

model SubTopic {
  id          String     @id @default(cuid())
  name        String
  description String?
  chapterId   String
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  questions   Question[]
  chapter     Chapter    @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model Question {
  id                 String          @id @default(cuid())
  text               String
  marks              Int
  chapterId          String
  subTopicId         String?
  isActive           Boolean         @default(true)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  creatorId          String?
  isAIGenerated      Boolean         @default(false)
  type               String
  difficulty         String
  applicableSubjects String[]        @default([])
  category           String          @default("Objective")
  subtype            String          @default("MCQ")
  paperQuestions     PaperQuestion[]
  chapter            Chapter         @relation(fields: [chapterId], references: [id])
  subTopic           SubTopic?       @relation(fields: [subTopicId], references: [id])
}

model EducationBoard {
  id          String      @id @default(cuid())
  name        String
  code        String      @unique
  description String?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  blueprints  Blueprint[]
}

model Blueprint {
  id             String             @id @default(cuid())
  name           String
  description    String?
  classId        String
  boardId        String?
  creatorId      String?
  isActive       Boolean            @default(true)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  board          EducationBoard?    @relation(fields: [boardId], references: [id])
  class          Class              @relation(fields: [classId], references: [id])
  chapters       BlueprintChapter[]
  sections       BlueprintSection[]
  questionPapers QuestionPaper[]
}

model BlueprintChapter {
  id          String    @id @default(cuid())
  blueprintId String
  chapterId   String
  createdAt   DateTime  @default(now())
  blueprint   Blueprint @relation(fields: [blueprintId], references: [id], onDelete: Cascade)
  chapter     Chapter   @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([blueprintId, chapterId])
}

model BlueprintSection {
  id                      String         @id @default(cuid())
  blueprintId             String
  name                    String
  description             String?
  questionCount           Int
  instructions            String?
  sectionOrder            Int            @default(0)
  createdAt               DateTime       @default(now())
  objectiveQuestionCount  Int            @default(0)
  requiredSubtypes        String[]       @default([])
  subjectiveQuestionCount Int            @default(0)
  blueprint               Blueprint      @relation(fields: [blueprintId], references: [id], onDelete: Cascade)
  paperSections           PaperSection[]
}

model QuestionPaper {
  id          String         @id @default(cuid())
  title       String
  description String?
  duration    Int?
  totalMarks  Int?
  blueprintId String
  creatorId   String?
  isPublished Boolean        @default(false)
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  sections    PaperSection[]
  blueprint   Blueprint      @relation(fields: [blueprintId], references: [id])
}

model PaperSection {
  id                 String           @id @default(cuid())
  questionPaperId    String
  blueprintSectionId String
  name               String
  instructions       String?
  sectionOrder       Int              @default(0)
  createdAt          DateTime         @default(now())
  questions          PaperQuestion[]
  blueprintSection   BlueprintSection @relation(fields: [blueprintSectionId], references: [id])
  questionPaper      QuestionPaper    @relation(fields: [questionPaperId], references: [id], onDelete: Cascade)
}

model PaperQuestion {
  id             String       @id @default(cuid())
  paperSectionId String
  questionId     String
  questionOrder  Int
  marks          Int?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  paperSection   PaperSection @relation(fields: [paperSectionId], references: [id])
  question       Question     @relation(fields: [questionId], references: [id])
}

model TextbookProcessing {
  id                  String    @id @default(cuid())
  fileUrl             String
  fileName            String
  classId             String
  subjectId           String
  chapterId           String
  status              String
  errorMessage        String?
  questionsGenerated  Int?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  completedAt         DateTime?
  creatorId           String
  batchConcurrency    Int?
  batchProcessingUsed Boolean   @default(false)
  batchSize           Int?
  processingDuration  Int?
}

model MoneyCollection {
  id             String                 @id @default(cuid())
  title          String
  description    String?
  collectionDate DateTime?
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  branchId       String
  sessionId      String?
  branch         Branch                 @relation(fields: [branchId], references: [id])
  session        AcademicSession?       @relation("MoneyCollectionSession", fields: [sessionId], references: [id])
  classes        MoneyCollectionClass[]
  items          MoneyCollectionItem[]
}

model MoneyCollectionClass {
  id                String          @id @default(cuid())
  moneyCollectionId String
  classId           String
  createdAt         DateTime        @default(now())
  class             Class           @relation("ClassMoneyCollectionLinks", fields: [classId], references: [id])
  moneyCollection   MoneyCollection @relation(fields: [moneyCollectionId], references: [id], onDelete: Cascade)

  @@unique([moneyCollectionId, classId])
}

model MoneyCollectionItem {
  id                String          @id @default(cuid())
  amount            Float
  notes             String?
  receivedAt        DateTime        @default(now())
  moneyCollectionId String
  studentId         String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  moneyCollection   MoneyCollection @relation(fields: [moneyCollectionId], references: [id], onDelete: Cascade)
  student           Student         @relation(fields: [studentId], references: [id])
}

model FeeHead {
  id                 String              @id @default(cuid())
  name               String
  description        String?
  isSystemDefined    Boolean             @default(false)
  isActive           Boolean             @default(true)
  branchId           String
  sessionId          String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  classwiseFees      ClasswiseFee[]
  feeCollectionItems FeeCollectionItem[]
  branch             Branch              @relation(fields: [branchId], references: [id])
  session            AcademicSession     @relation("FeeHeadSession", fields: [sessionId], references: [id])
  feeTerms           FeeTermFeeHead[]

  @@unique([name, branchId, sessionId])
}

model FeeTerm {
  id             String           @id @default(cuid())
  name           String
  description    String?
  startDate      DateTime
  endDate        DateTime
  dueDate        DateTime
  isActive       Boolean          @default(true)
  branchId       String
  sessionId      String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  classwiseFees  ClasswiseFee[]
  feeCollections FeeCollection[]
  branch         Branch           @relation(fields: [branchId], references: [id])
  session        AcademicSession  @relation("FeeTermSession", fields: [sessionId], references: [id])
  feeHeads       FeeTermFeeHead[]

  @@unique([name, branchId, sessionId])
}

model FeeTermFeeHead {
  id        String   @id @default(cuid())
  feeTermId String
  feeHeadId String
  createdAt DateTime @default(now())
  feeHead   FeeHead  @relation(fields: [feeHeadId], references: [id], onDelete: Cascade)
  feeTerm   FeeTerm  @relation(fields: [feeTermId], references: [id], onDelete: Cascade)

  @@unique([feeTermId, feeHeadId])
}

model ClasswiseFee {
  id        String          @id @default(cuid())
  classId   String
  feeTermId String
  feeHeadId String
  amount    Float
  branchId  String
  sessionId String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  branch    Branch          @relation(fields: [branchId], references: [id])
  class     Class           @relation(fields: [classId], references: [id])
  feeHead   FeeHead         @relation(fields: [feeHeadId], references: [id])
  feeTerm   FeeTerm         @relation(fields: [feeTermId], references: [id])
  session   AcademicSession @relation("ClasswiseFeeSession", fields: [sessionId], references: [id])

  @@unique([classId, feeTermId, feeHeadId])
}

model FeeCollection {
  id                   String              @id @default(cuid())
  receiptNumber        String              @unique
  studentId            String
  feeTermId            String
  totalAmount          Float
  paidAmount           Float
  paymentMode          String
  transactionReference String?
  paymentDate          DateTime
  notes                String?
  status               String              @default("COMPLETED")
  branchId             String
  sessionId            String
  createdBy            String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  branch               Branch              @relation(fields: [branchId], references: [id])
  feeTerm              FeeTerm             @relation(fields: [feeTermId], references: [id])
  session              AcademicSession     @relation("FeeCollectionSession", fields: [sessionId], references: [id])
  student              Student             @relation(fields: [studentId], references: [id])
  items                FeeCollectionItem[]
}

model FeeCollectionItem {
  id              String        @id @default(cuid())
  feeCollectionId String
  feeHeadId       String
  amount          Float
  createdAt       DateTime      @default(now())
  feeCollection   FeeCollection @relation(fields: [feeCollectionId], references: [id], onDelete: Cascade)
  feeHead         FeeHead       @relation(fields: [feeHeadId], references: [id])
}

enum AttendanceType {
  IN
  OUT
  BRANCH_TRANSFER_OUT
  BRANCH_TRANSFER_IN
}

enum AttendanceStatus {
  PRESENT
  LEAVE
  ABSENT
  HALF_DAY
  LATE
}

enum AdmissionStatus {
  NEW
  CONTACTED
  ENGAGED
  TOUR_SCHEDULED
  TOUR_COMPLETED
  APPLICATION_SENT
  APPLICATION_RECEIVED
  FEE_PAID
  ASSESSMENT_SCHEDULED
  ASSESSMENT_COMPLETED
  INTERVIEW_SCHEDULED
  INTERVIEW_COMPLETED
  DECISION_PENDING
  OFFERED
  ACCEPTED
  REJECTED
  WAITLISTED
  ENROLLED
  CLOSED_LOST
  ARCHIVE
}

enum FollowUpStatus {
  PENDING
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum ApplicationStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  IN_PROCESS
  AWAITING_DOCUMENTS
  READY_FOR_DECISION
  OFFERED
  ACCEPTED
  REJECTED
  WAITLISTED
  WITHDRAWN
  ENROLLED
}

enum StageStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  SKIPPED
  FAILED
}

enum RequirementStatus {
  PENDING
  SUBMITTED
  APPROVED
  REJECTED
  WAIVED
}

enum QuestionType {
  MCQ
  SHORT_ANSWER
  LONG_ANSWER
  TRUE_FALSE
  FILL_IN_BLANKS
  MATCH_THE_FOLLOWING
  ASSERTION_REASONING
  DESCRIPTIVE
  ANALYTICAL
  EVALUATIVE
  COMPARATIVE
  APPLICATION_BASED
  CASE_STUDY
  OPINION_BASED
  EXPLORATORY
  CAUSE_EFFECT
  HYPOTHETICAL
  INTERPRETIVE
  JUSTIFICATION
}

enum QuestionCategory {
  OBJECTIVE
  SUBJECTIVE
}

enum QuestionDifficulty {
  EASY
  MEDIUM
  HARD
}
