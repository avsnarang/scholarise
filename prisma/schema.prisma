generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Branch {
  id                  String               @id @default(cuid())
  name                String
  code                String               @unique
  address             String?
  city                String?
  state               String?
  country             String?
  phone               String?
  email               String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  order               Int                  @default(0)
  classes             Class[]
  employees           Employee[]
  students            Student[]
  teachers            Teacher[]
  routes              TransportRoute[]
  attendanceDevices   AttendanceDevice[]
  attendanceLocations AttendanceLocation[]
  attendanceWindows   AttendanceWindow[]
  locationTypes       LocationType[]
}

model Student {
  id                     String                @id @default(cuid())
  admissionNumber        String                @unique
  firstName              String
  lastName               String
  dateOfBirth            DateTime
  gender                 String
  address                String?
  phone                  String?
  email                  String?
  personalEmail          String?
  bloodGroup             String?
  religion               String?
  nationality            String?
  caste                  String?
  aadharNumber           String?
  udiseId                String?
  joinDate               DateTime              @default(now())
  dateOfAdmission        DateTime?
  rollNumber             String?
  isActive               Boolean               @default(true)
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  branchId               String
  parentId               String?
  classId                String?
  username               String?
  password               String?
  permanentAddress       String?
  permanentCity          String?
  permanentState         String?
  permanentCountry       String?
  permanentZipCode       String?
  correspondenceAddress  String?
  correspondenceCity     String?
  correspondenceState    String?
  correspondenceCountry  String?
  correspondenceZipCode  String?
  previousSchool         String?
  lastClassAttended      String?
  mediumOfInstruction    String?
  recognisedByStateBoard Boolean?
  schoolCity             String?
  schoolState            String?
  reasonForLeaving       String?
  clerkId                String?
  cbse10RollNumber       String?
  cbse12RollNumber       String?
  academicRecords        AcademicRecord[]
  branch                 Branch                @relation(fields: [branchId], references: [id])
  class                  Class?                @relation(fields: [classId], references: [id])
  parent                 Parent?               @relation(fields: [parentId], references: [id])
  siblingOf              StudentSibling[]      @relation("SiblingToStudent")
  siblings               StudentSibling[]      @relation("StudentToSibling")
  subjects               StudentSubject[]
  transferCertificates   TransferCertificate[]
  transportAssignments   TransportAssignment[]
  attendanceRecords      StudentAttendance[]
}

model Parent {
  id                 String    @id @default(cuid())
  fatherName         String?
  fatherDob          DateTime?
  fatherEducation    String?
  fatherOccupation   String?
  fatherMobile       String?
  fatherEmail        String?
  motherName         String?
  motherDob          DateTime?
  motherEducation    String?
  motherOccupation   String?
  motherMobile       String?
  motherEmail        String?
  guardianName       String?
  guardianDob        DateTime?
  guardianEducation  String?
  guardianOccupation String?
  guardianMobile     String?
  guardianEmail      String?
  parentAnniversary  DateTime?
  monthlyIncome      String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  clerkId            String?
  students           Student[]
}

model Teacher {
  id             String            @id @default(cuid())
  firstName      String
  lastName       String
  qualification  String?
  specialization String?
  joinDate       DateTime          @default(now())
  isActive       Boolean           @default(true)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  userId         String?           @unique
  branchId       String
  employeeCode   String?           @unique
  clerkId        String?
  classes        Class[]
  branch         Branch            @relation(fields: [branchId], references: [id])
  attendances    StaffAttendance[]
}

model Employee {
  id          String            @id @default(cuid())
  firstName   String
  lastName    String
  designation String
  department  String?
  joinDate    DateTime          @default(now())
  isActive    Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  userId      String?           @unique
  branchId    String
  branch      Branch            @relation(fields: [branchId], references: [id])
  attendances StaffAttendance[]
}

model Class {
  id                String              @id @default(cuid())
  name              String
  section           String
  capacity          Int                 @default(30)
  isActive          Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  branchId          String
  teacherId         String?
  sessionId         String
  displayOrder      Int                 @default(0)
  branch            Branch              @relation(fields: [branchId], references: [id])
  session           AcademicSession     @relation(fields: [sessionId], references: [id])
  teacher           Teacher?            @relation(fields: [teacherId], references: [id])
  subjects          ClassSubject[]
  students          Student[]
  attendanceRecords StudentAttendance[]
}

model AcademicSession {
  id              String           @id @default(cuid())
  name            String
  startDate       DateTime
  endDate         DateTime
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  academicRecords AcademicRecord[]
  classes         Class[]
}

model AcademicRecord {
  id        String          @id @default(cuid())
  studentId String
  sessionId String
  classId   String?
  status    String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  session   AcademicSession @relation(fields: [sessionId], references: [id])
  student   Student         @relation(fields: [studentId], references: [id])
}

model TransferCertificate {
  id        String   @id @default(cuid())
  tcNumber  String   @unique
  issueDate DateTime @default(now())
  reason    String?
  remarks   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
}

model StudentSibling {
  id               String   @id @default(cuid())
  relationshipType String
  createdAt        DateTime @default(now())
  studentId        String
  siblingId        String
  sibling          Student  @relation("SiblingToStudent", fields: [siblingId], references: [id], onDelete: Cascade)
  student          Student  @relation("StudentToSibling", fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, siblingId])
}

model TransportRoute {
  id          String          @id @default(cuid())
  name        String
  description String?
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  branchId    String
  branch      Branch          @relation(fields: [branchId], references: [id])
  stops       TransportStop[]
}

model TransportStop {
  id          String                @id @default(cuid())
  name        String
  address     String?
  distance    Float?
  fee         Float
  sequence    Int
  isActive    Boolean               @default(true)
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  routeId     String
  assignments TransportAssignment[]
  route       TransportRoute        @relation(fields: [routeId], references: [id], onDelete: Cascade)
}

model TransportAssignment {
  id        String        @id @default(cuid())
  startDate DateTime      @default(now())
  endDate   DateTime?
  isActive  Boolean       @default(true)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  studentId String
  stopId    String
  stop      TransportStop @relation(fields: [stopId], references: [id])
  student   Student       @relation(fields: [studentId], references: [id])
}

model AttendanceLocation {
  id             String             @id @default(cuid())
  name           String
  latitude       Float
  longitude      Float
  radius         Int
  isActive       Boolean            @default(true)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  branchId       String
  locationTypeId String?
  devices        AttendanceDevice[]
  branch         Branch             @relation(fields: [branchId], references: [id])
  locationType   LocationType?      @relation(fields: [locationTypeId], references: [id])
  attendances    StaffAttendance[]

  @@map("attendanceLocation")
}

model LocationType {
  id                String               @id @default(cuid())
  name              String
  code              String
  description       String?
  isDefault         Boolean              @default(false)
  isActive          Boolean              @default(true)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  branchId          String
  locations         AttendanceLocation[]
  attendanceWindows AttendanceWindow[]
  branch            Branch               @relation(fields: [branchId], references: [id])

  @@map("locationType")
}

model AttendanceWindow {
  id                     String            @id @default(cuid())
  name                   String
  startTime              String
  endTime                String
  isMon                  Boolean           @default(true)
  isTue                  Boolean           @default(true)
  isWed                  Boolean           @default(true)
  isThu                  Boolean           @default(true)
  isFri                  Boolean           @default(true)
  isSat                  Boolean           @default(false)
  isSun                  Boolean           @default(false)
  allowLateMarking       Boolean           @default(false)
  lateMarkingGracePeriod Int               @default(0)
  isActive               Boolean           @default(true)
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  branchId               String
  locationTypeId         String
  branch                 Branch            @relation(fields: [branchId], references: [id])
  locationType           LocationType      @relation(fields: [locationTypeId], references: [id])
  attendanceRecords      StaffAttendance[]

  @@map("attendanceWindow")
}

model AttendanceDevice {
  id         String              @id @default(cuid())
  name       String
  deviceId   String              @unique
  isActive   Boolean             @default(true)
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  branchId   String
  locationId String?
  branch     Branch              @relation(fields: [branchId], references: [id])
  location   AttendanceLocation? @relation(fields: [locationId], references: [id])

  @@map("attendanceDevice")
}

model StaffAttendance {
  id                  String             @id @default(cuid())
  timestamp           DateTime           @default(now())
  type                AttendanceType     @default(IN)
  latitude            Float
  longitude           Float
  distance            Int
  isWithinAllowedArea Boolean            @default(false)
  notes               String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  locationId          String
  teacherId           String?
  employeeId          String?
  windowId            String?
  employee            Employee?          @relation(fields: [employeeId], references: [id])
  location            AttendanceLocation @relation(fields: [locationId], references: [id])
  teacher             Teacher?           @relation(fields: [teacherId], references: [id])
  attendanceWindow    AttendanceWindow?  @relation(fields: [windowId], references: [id])

  @@index([timestamp, type])
  @@index([teacherId, timestamp])
  @@index([employeeId, timestamp])
  @@map("staffAttendance")
}

enum AttendanceType {
  IN
  OUT
  BRANCH_TRANSFER_OUT
  BRANCH_TRANSFER_IN
}

model StudentAttendance {
  id         String           @id @default(cuid())
  date       DateTime         @default(now())
  status     AttendanceStatus @default(PRESENT)
  reason     String?
  notes      String?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  studentId  String
  classId    String
  markedById String?
  class      Class            @relation(fields: [classId], references: [id])
  student    Student          @relation(fields: [studentId], references: [id])

  @@unique([studentId, date])
  @@index([date, classId])
  @@index([studentId, date])
  @@map("studentAttendance")
}

model Subject {
  id          String           @id @default(cuid())
  name        String
  code        String?
  description String?
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  classes     ClassSubject[]
  students    StudentSubject[]
}

model ClassSubject {
  id        String   @id @default(cuid())
  classId   String
  subjectId String
  createdAt DateTime @default(now())
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([classId, subjectId])
}

model StudentSubject {
  id        String   @id @default(cuid())
  studentId String
  subjectId String
  createdAt DateTime @default(now())
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([studentId, subjectId])
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  HALF_DAY
  EXCUSED
}
