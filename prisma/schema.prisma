generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Branch {
  id                         String                       @id @default(cuid())
  name                       String
  code                       String                       @unique
  address                    String?
  city                       String?
  state                      String?
  country                    String?
  phone                      String?
  email                      String?
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  order                      Int                          @default(0)
  admissionLeads             AdmissionLead[]
  AssessmentCategory         AssessmentCategory[]
  AssessmentConfiguration    AssessmentConfiguration[]
  AssessmentMarks            AssessmentMarks[]
  assessmentPermissions      AssessmentPermission[]
  assessmentSchemas          AssessmentSchema[]
  backgroundTasks            BackgroundTask[]
  chapters                   Chapter[]
  classes                    Class[]
  classwiseFees              ClasswiseFee[]
  concessionApprovalSettings ConcessionApprovalSettings[]
  concessionTypes            ConcessionType[]
  courtesyCallFeedbacks      CourtesyCallFeedback[]
  departments                Department[]
  designations               Designation[]
  emailConfiguration         EmailConfiguration?
  employees                  Employee[]
  employeeBranchAccess       EmployeeBranchAccess[]
  ExamConfiguration          ExamConfiguration[]
  ExamSchedule               ExamSchedule[]
  ExamType                   ExamType[]
  feeCollections             FeeCollection[]
  feeHeads                   FeeHead[]
  feeTerms                   FeeTerm[]
  gradeScales                GradeScale[]
  leavePolicies              LeavePolicy[]
  MarksEntry                 MarksEntry[]
  moneyCollections           MoneyCollection[]
  rbacRoles                  RbacRole[]
  SeatingPlan                SeatingPlan[]
  students                   Student[]
  studentAssessmentScores    StudentAssessmentScore[]
  studentConcessions         StudentConcession[]
  subjectTeachers            SubjectTeacher[]
  teachers                   Teacher[]
  terms                      Term[]
  transportRoutes            TransportRoute[]
  transportBuses             TransportBus[]
  transportFeeStructures     TransportFeeStructure[]
  transportConfigurations    TransportConfiguration[]
  transportStaff             TransportStaff[]
  transportNotifications     TransportNotification[]
  transportNotificationConfigs TransportNotificationConfig[]
  transportInspections       TransportBusInspection[]
  transportInspectionTemplates TransportInspectionTemplate[]
  userRoles                  UserRole[]
  attendanceDevices          AttendanceDevice[]
  attendanceLocations        AttendanceLocation[]
  attendanceWindows          AttendanceWindow[]
  locationTypes              LocationType[]
  whatsappTemplates          WhatsAppTemplate[]
  communicationMessages      CommunicationMessage[]
  communicationSettings      CommunicationSettings?
  conversations              Conversation[]
  staffMoves                 StaffMove[]
}

model User {
  id                    String                 @id // Supabase user ID
  authIdentifier        String?                @unique // Username for parents, email for others (stored in Supabase Auth email field)
  email                 String?                // Real email address
  firstName             String?
  lastName              String?
  phone                 String?
  avatarUrl             String?
  userType              String?                // 'parent', 'student', 'teacher', 'employee', 'staff'
  isActive              Boolean                @default(true)
  lastLoginAt           DateTime?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  metadata              Json?

  // Relationships
  student               Student?
  parent                Parent?
  teacher               Teacher?
  employee              Employee?
  admissionStaff        AdmissionStaff?
  userRoles             UserRole[]
  staffMoves            StaffMove[]

  @@index([authIdentifier])
  @@index([email])
  @@index([userType])
  @@index([isActive])
}

model Student {
  id                      String                   @id @default(cuid())
  admissionNumber         String                   @unique
  firstName               String
  lastName                String
  dateOfBirth             DateTime
  gender                  String
  address                 String?
  phone                   String?
  email                   String?
  personalEmail           String?
  bloodGroup              String?
  religion                String?
  nationality             String?
  caste                   String?
  aadharNumber            String?
  udiseId                 String?
  joinDate                DateTime                 @default(now())
  dateOfAdmission         DateTime?
  rollNumber              Int?                     @db.SmallInt
  isActive                Boolean                  @default(true)
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  branchId                String
  parentId                String?
  username                String?
  password                String?
  permanentAddress        String?
  permanentCity           String?
  permanentState          String?
  permanentCountry        String?
  permanentZipCode        String?
  correspondenceAddress   String?
  correspondenceCity      String?
  correspondenceState     String?
  correspondenceCountry   String?
  correspondenceZipCode   String?
  previousSchool          String?
  lastClassAttended       String?
  mediumOfInstruction     String?
  recognisedByStateBoard  Boolean?
  schoolCity              String?
  schoolState             String?
  reasonForLeaving        String?
  clerkId                 String?
  cbse10RollNumber        String?
  cbse12RollNumber        String?
  sectionId               String?
  userId                  String?                  @unique
  academicRecords         AcademicRecord[]
  AssessmentMarks         AssessmentMarks[]
  courtesyCallFeedbacks   CourtesyCallFeedback[]
  feeCollections          FeeCollection[]
  MarksEntry              MarksEntry[]
  MoneyCollectionItem     MoneyCollectionItem[]
  seatingPlans            SeatingPlan[]
  branch                  Branch                   @relation(fields: [branchId], references: [id])
  parent                  Parent?                  @relation(fields: [parentId], references: [id])
  section                 Section?                 @relation(fields: [sectionId], references: [id])
  user                    User?                    @relation(fields: [userId], references: [id])
  studentAssessmentScores StudentAssessmentScore[]
  studentConcessions      StudentConcession[]
  siblingsOf              StudentSibling[]         @relation("SiblingToStudent")
  siblings                StudentSibling[]         @relation("StudentToSibling")
  StudentSubject          StudentSubject[]
  transferCertificate     TransferCertificate[]
  transportAssignments    TransportAssignment[]
  StudentAttendance       StudentAttendance[]

  @@index([userId])
  @@index([admissionNumber, branchId], map: "student_admission_branch_idx")
  @@index([branchId, isActive], map: "student_branch_active_idx")
  @@index([branchId, admissionNumber], map: "student_branch_admission_idx")
  @@index([sectionId, isActive], map: "student_section_active_idx")
}

model Parent {
  id                   String    @id @default(cuid())
  fatherName           String?
  fatherDob            DateTime?
  fatherEducation      String?
  fatherOccupation     String?
  fatherMobile         String?
  fatherEmail          String?
  motherName           String?
  motherDob            DateTime?
  motherEducation      String?
  motherOccupation     String?
  motherMobile         String?
  motherEmail          String?
  guardianName         String?
  guardianDob          DateTime?
  guardianEducation    String?
  guardianOccupation   String?
  guardianMobile       String?
  guardianEmail        String?
  parentAnniversary    DateTime?
  monthlyIncome        String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  clerkId              String?
  fatherAadharNumber   String?
  guardianAadharNumber String?
  motherAadharNumber   String?
  userId               String?   @unique // NEW: Foreign key to User
  students             Student[]
  user                 User?     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model CourtesyCallFeedback {
  id         String     @id @default(cuid())
  studentId  String
  callerId   String
  callerType CallerType
  callDate   DateTime   @default(now())
  purpose    String?
  feedback   String
  followUp   String?
  isPrivate  Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  branchId   String
  employeeId String?
  teacherId  String?
  branch     Branch     @relation(fields: [branchId], references: [id])
  Employee   Employee?  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  student    Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  Teacher    Teacher?   @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@index([studentId, callDate])
  @@index([callerId, callDate])
  @@index([branchId, callDate])
  @@index([employeeId, callDate])
  @@index([teacherId, callDate])
}

model Teacher {
  id                         String                 @id @default(cuid())
  firstName                  String
  lastName                   String
  qualification              String?
  specialization             String?
  joinDate                   DateTime               @default(now())
  isActive                   Boolean                @default(true)
  createdAt                  DateTime               @default(now())
  updatedAt                  DateTime               @updatedAt
  userId                     String?                @unique
  branchId                   String
  employeeCode               String?                @unique
  clerkId                    String?
  certifications             String[]               @default([])
  subjects                   String[]               @default([])
  aadharNumber               String?
  accessCardId               String?
  accountNumber              String?
  address                    String?
  alternatePhone             String?
  assetReturnStatus          String?
  bankName                   String?
  bio                        String?
  bloodGroup                 String?
  city                       String?
  confirmationDate           DateTime?
  country                    String?
  dateOfBirth                DateTime?
  department                 String?
  designation                String?
  deviceIssued               String?
  emergencyContactName       String?
  emergencyContactPhone      String?
  emergencyContactRelation   String?
  employeeType               String?
  esiNumber                  String?
  experience                 String?
  gender                     String?
  ifscCode                   String?
  institution                String?
  maritalStatus              String?
  middleName                 String?
  nationality                String?
  officialEmail              String?
  panNumber                  String?
  permanentAddress           String?
  permanentCity              String?
  permanentCountry           String?
  permanentPincode           String?
  permanentState             String?
  personalEmail              String?
  pfNumber                   String?
  phone                      String?
  pincode                    String?
  previousEmployer           String?
  previousExperience         String?
  professionalQualifications String?
  religion                   String?
  reportingManager           String?
  salaryStructure            String?
  softwareLicenses           String?
  specialCertifications      String?
  state                      String?
  uanNumber                  String?
  yearOfCompletion           String?
  courtesyCallFeedbacks      CourtesyCallFeedback[]
  leaveApplications          LeaveApplication[]
  leaveBalances              LeaveBalance[]
  salaryIncrements           SalaryIncrement[]
  sections                   Section[]
  SubjectTeacher             SubjectTeacher[]
  branch                     Branch                 @relation(fields: [branchId], references: [id])
  salaries                   TeacherSalary[]
  userRoles                  UserRole[]
  user                       User?                @relation(fields: [userId], references: [id])
  staffAttendances           StaffAttendance[]

  @@index([employeeCode])
  @@index([userId])
}

model Employee {
  id                         String                 @id @default(cuid())
  firstName                  String
  lastName                   String
  designation                String
  department                 String?
  joinDate                   DateTime               @default(now())
  isActive                   Boolean                @default(true)
  createdAt                  DateTime               @default(now())
  updatedAt                  DateTime               @updatedAt
  userId                     String?                @unique
  branchId                   String
  departmentId               String?
  designationId              String?
  certifications             String[]               @default([])
  subjects                   String[]               @default([])
  aadharNumber               String?
  accessCardId               String?
  accountNumber              String?
  address                    String?
  alternatePhone             String?
  assetReturnStatus          String?
  bankName                   String?
  bio                        String?
  bloodGroup                 String?
  city                       String?
  confirmationDate           DateTime?
  country                    String?
  dateOfBirth                DateTime?
  deviceIssued               String?
  emergencyContactName       String?
  emergencyContactPhone      String?
  emergencyContactRelation   String?
  employeeCode               String?                @unique
  employeeType               String?
  esiNumber                  String?
  experience                 String?
  gender                     String?
  ifscCode                   String?
  institution                String?
  maritalStatus              String?
  middleName                 String?
  nationality                String?
  officialEmail              String?
  panNumber                  String?
  permanentAddress           String?
  permanentCity              String?
  permanentCountry           String?
  permanentPincode           String?
  permanentState             String?
  personalEmail              String?
  pfNumber                   String?
  phone                      String?
  pincode                    String?
  previousEmployer           String?
  previousExperience         String?
  professionalQualifications String?
  qualification              String?
  religion                   String?
  reportingManager           String?
  salaryStructure            String?
  softwareLicenses           String?
  specialCertifications      String?
  specialization             String?
  state                      String?
  uanNumber                  String?
  yearOfCompletion           String?
  clerkId                    String?
  CourtesyCallFeedback       CourtesyCallFeedback[]
  branch                     Branch                 @relation(fields: [branchId], references: [id])
  departmentRef              Department?            @relation("EmployeeDepartment", fields: [departmentId], references: [id])
  designationRef             Designation?           @relation("EmployeeDesignation", fields: [designationId], references: [id])
  branchAccessRecords        EmployeeBranchAccess[] @relation("EmployeeBranchAccessRecords")
  salaries                   EmployeeSalary[]
  leaveApplications          LeaveApplication[]
  leaveBalances              LeaveBalance[]
  salaryIncrements           SalaryIncrement[]
  userRoles                  UserRole[]
  user                       User?                  @relation(fields: [userId], references: [id])
  staffAttendances           StaffAttendance[]

  @@index([userId])
}

model StaffMove {
  id              String   @id @default(cuid())
  originalId      String   // ID of the original record (teacher or employee)
  newId           String   // ID of the new record after move
  fromType        String   // "TEACHER" or "EMPLOYEE"
  toType          String   // "TEACHER" or "EMPLOYEE"
  reason          String   // Reason for the move
  movedBy         String   // User ID who performed the move
  movedAt         DateTime @default(now())
  originalData    Json     // Backup of original data
  branchId        String
  
  branch          Branch   @relation(fields: [branchId], references: [id])
  mover           User     @relation(fields: [movedBy], references: [id])
  
  @@index([originalId, fromType])
  @@index([newId, toType])
  @@index([movedBy])
  @@index([branchId])
}

model Class {
  id                      String                    @id @default(cuid())
  name                    String
  isActive                Boolean                   @default(true)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  branchId                String
  sessionId               String
  displayOrder            Int                       @default(0)
  description             String?
  grade                   Int?
  AssessmentConfiguration AssessmentConfiguration[]
  assessmentSchemas       AssessmentSchema[]
  blueprints              Blueprint[]
  branch                  Branch                    @relation(fields: [branchId], references: [id])
  session                 AcademicSession           @relation(fields: [sessionId], references: [id])
  subjects                ClassSubject[]
  ClasswiseFee            ClasswiseFee[]
  ExamConfiguration       ExamConfiguration[]
  moneyCollectionLinks    MoneyCollectionClass[]    @relation("ClassMoneyCollectionLinks")
  sections                Section[]
  subjectTeachers         SubjectTeacher[]

  @@unique([name, branchId, sessionId])
}

model Section {
  id                      String                    @id @default(cuid())
  name                    String
  capacity                Int                       @default(30)
  isActive                Boolean                   @default(true)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  classId                 String
  teacherId               String?
  displayOrder            Int                       @default(0)
  AssessmentConfiguration AssessmentConfiguration[]
  sectionwiseFees         ClasswiseFee[]
  ExamConfiguration       ExamConfiguration[]
  class                   Class                     @relation(fields: [classId], references: [id], onDelete: Cascade)
  teacher                 Teacher?                  @relation(fields: [teacherId], references: [id])
  students                Student[]
  subjectTeachers         SubjectTeacher[]
  studentAttendances      StudentAttendance[]

  @@unique([name, classId])
  @@index([classId, isActive], map: "section_class_active_idx")
  @@index([isActive, displayOrder], map: "section_active_display_idx")
}

model AcademicSession {
  id                      String                      @id @default(cuid())
  name                    String
  startDate               DateTime
  endDate                 DateTime
  isActive                Boolean                     @default(true)
  createdAt               DateTime                    @default(now())
  updatedAt               DateTime                    @updatedAt
  academicRecords         AcademicRecord[]
  classes                 Class[]
  classwiseFees           ClasswiseFee[]              @relation("ClasswiseFeeSession")
  concessionTypes         ConcessionType[]            @relation("ConcessionTypeSession")
  feeCollections          FeeCollection[]             @relation("FeeCollectionSession")
  feeHeads                FeeHead[]                   @relation("FeeHeadSession")
  feeTerms                FeeTerm[]                   @relation("FeeTermSession")
  moneyCollections        MoneyCollection[]           @relation("MoneyCollectionSession")
  studentConcessions      StudentConcession[]         @relation("StudentConcessionSession")
  terms                   Term[]
  transportFeeStructures  TransportFeeStructure[]     @relation("TransportFeeSession")
  transportConfigurations TransportConfiguration[]    @relation("TransportConfigSession")
}

model Term {
  id                String             @id @default(cuid())
  name              String
  description       String?
  startDate         DateTime
  endDate           DateTime
  order             Int                @default(0)
  isActive          Boolean            @default(true)
  isCurrentTerm     Boolean            @default(false)
  branchId          String
  sessionId         String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  assessmentSchemas AssessmentSchema[] @relation("termRelation")
  branch            Branch             @relation(fields: [branchId], references: [id], onDelete: Cascade)
  session           AcademicSession    @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([name, branchId, sessionId])
  @@index([branchId, isActive])
  @@index([sessionId, order])
}

model AcademicRecord {
  id        String          @id @default(cuid())
  studentId String
  sessionId String
  classId   String?
  status    String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  session   AcademicSession @relation(fields: [sessionId], references: [id])
  student   Student         @relation(fields: [studentId], references: [id])
}

model TransferCertificate {
  id        String   @id @default(cuid())
  tcNumber  String   @unique
  issueDate DateTime @default(now())
  reason    String?
  remarks   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
}

model StudentSibling {
  id               String   @id @default(cuid())
  relationshipType String
  createdAt        DateTime @default(now())
  studentId        String
  siblingId        String
  sibling          Student  @relation("SiblingToStudent", fields: [siblingId], references: [id], onDelete: Cascade)
  student          Student  @relation("StudentToSibling", fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, siblingId])
}

model TransportRoute {
  id            String                    @id @default(cuid())
  name          String
  description   String?
  startLocation String?
  endLocation   String?
  totalDistance Float?                    // in kilometers
  estimatedTime Int?                      // in minutes
  isActive      Boolean                   @default(true)
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt
  branchId      String
  
  // Relations
  branch        Branch                    @relation(fields: [branchId], references: [id])
  stops         TransportStop[]
  assignments   TransportAssignment[]
  buses         TransportBusRoute[]
  feeStructures TransportFeeStructure[]
  trips         TransportTrip[]
}

model TransportStop {
  id            String                    @id @default(cuid())
  name          String
  address       String?
  latitude      Float?
  longitude     Float?
  distance      Float?                    // distance from school in km
  sequence      Int                       // order in the route
  pickupTime    String?                   // HH:MM format
  dropTime      String?                   // HH:MM format
  isActive      Boolean                   @default(true)
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt
  routeId       String
  
  // Relations
  route         TransportRoute            @relation(fields: [routeId], references: [id], onDelete: Cascade)
  assignments   TransportAssignment[]
  feeStructures TransportFeeStructure[]
  
  @@unique([routeId, sequence])
}

model TransportBus {
  id                String                    @id @default(cuid())
  busNumber         String                    @unique
  registrationNo    String?
  capacity          Int
  purchaseDate      DateTime?
  model             String?
  fuelType          String                    @default("Diesel") // Diesel, Petrol, CNG, Electric
  isActive          Boolean                   @default(true)
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  branchId          String

  // Insurance Details
  insuranceNumber   String?
  insuranceExpiry   DateTime?
  pollutionCert     String?
  pollutionExpiry   DateTime?
  fitnessExpiry     DateTime?

  // Financial Details
  loanAmount        Float?
  loanEmi           Float?
  loanStartDate     DateTime?
  loanFulfillmentDate DateTime?
  loanProvider      String?

  // Tax Details
  lastTaxSubmissionDate DateTime?
  nextTaxDueDate    DateTime?
  taxType           String?
  taxAmount         Float?
  taxSubmissionFrequency String? // Monthly, Quarterly, Yearly

  // Permit Details
  permitType        String?
  permitNumber      String?
  permitIssueDate   DateTime?
  permitExpiryDate  DateTime?
  permitIssuedBy    String?

  // Relations
  branch            Branch                    @relation(fields: [branchId], references: [id])
  routes            TransportBusRoute[]
  fuelLogs          TransportFuelLog[]
  maintenanceLogs   TransportMaintenanceLog[]
  trips             TransportTrip[]
  staffAssignments  TransportStaffAssignment[]
  notifications     TransportNotification[]
  inspections       TransportBusInspection[]

  @@index([busNumber])
  @@index([branchId])
}

model TransportBusRoute {
  id        String         @id @default(cuid())
  busId     String
  routeId   String
  startDate DateTime       @default(now())
  endDate   DateTime?
  isActive  Boolean        @default(true)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  
  // Relations
  bus       TransportBus   @relation(fields: [busId], references: [id])
  route     TransportRoute @relation(fields: [routeId], references: [id])
  
  @@unique([busId, routeId, startDate])
}

model TransportFuelLog {
  id               String         @id @default(cuid())
  busId            String
  fuelDate         DateTime       @default(now())
  fuelQuantity     Float          // in liters
  pricePerLiter    Float
  totalAmount      Float
  odometerReading  Int?           // km reading
  fuelStation      String?
  receiptNumber    String?
  notes            String?
  createdBy        String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  
  // Relations
  bus              TransportBus   @relation(fields: [busId], references: [id])
  
  @@index([busId, fuelDate])
}

model TransportMaintenanceLog {
  id              String         @id @default(cuid())
  busId           String
  maintenanceDate DateTime       @default(now())
  maintenanceType String         // Regular, Repair, Emergency
  description     String
  cost            Float?
  serviceProvider String?
  odometerReading Int?
  nextServiceDue  DateTime?
  invoiceNumber   String?
  notes           String?
  createdBy       String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  // Relations
  bus             TransportBus   @relation(fields: [busId], references: [id])
  
  @@index([busId, maintenanceDate])
}

model TransportFeeStructure {
  id              String                    @id @default(cuid())
  name            String
  description     String?
  feeType         TransportFeeType          @default(ROUTE_WISE)
  amount          Float
  sessionId       String
  branchId        String
  routeId         String?                   // for route-wise fees
  stopId          String?                   // for stop-wise fees
  applicableFrom  DateTime                  @default(now())
  applicableUntil DateTime?
  isActive        Boolean                   @default(true)
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  
  // Relations
  session         AcademicSession           @relation("TransportFeeSession", fields: [sessionId], references: [id])
  branch          Branch                    @relation(fields: [branchId], references: [id])
  route           TransportRoute?           @relation(fields: [routeId], references: [id])
  stop            TransportStop?            @relation(fields: [stopId], references: [id])
  assignments     TransportAssignment[]
  
  @@index([branchId, sessionId])
  @@index([feeType])
}

model TransportAssignment {
  id                    String                    @id @default(cuid())
  studentId             String
  routeId               String?
  stopId                String?
  feeStructureId        String?
  assignmentType        TransportAssignmentType   @default(ROUTE_STOP)
  startDate             DateTime                  @default(now())
  endDate               DateTime?
  isActive              Boolean                   @default(true)
  assignedBy            String?
  notes                 String?
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt
  
  // Relations
  student               Student                   @relation(fields: [studentId], references: [id])
  route                 TransportRoute?           @relation(fields: [routeId], references: [id])
  stop                  TransportStop?            @relation(fields: [stopId], references: [id])
  feeStructure          TransportFeeStructure?    @relation(fields: [feeStructureId], references: [id])
  
  @@index([studentId])
  @@index([routeId])
  @@index([stopId])
}

model TransportConfiguration {
  id                          String   @id @default(cuid())
  branchId                    String   @unique
  sessionId                   String
  feeCalculationMethod        TransportFeeType @default(ROUTE_WISE)
  allowStopWiseFees           Boolean  @default(true)
  allowRouteWiseFees          Boolean  @default(true)
  defaultFuelType             String   @default("Diesel")
  autoCalculateDistances      Boolean  @default(true)
  requireDriverDetails        Boolean  @default(true)
  requireConductorDetails     Boolean  @default(false)
  enableFuelTracking          Boolean  @default(true)
  enableMaintenanceTracking   Boolean  @default(true)
  maxCapacityPerBus           Int      @default(50)
  fuelAlertThreshold          Float    @default(10.0) // liters
  maintenanceAlertDays        Int      @default(30)
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  
  // Relations
  branch                      Branch   @relation(fields: [branchId], references: [id])
  session                     AcademicSession @relation("TransportConfigSession", fields: [sessionId], references: [id])
  
  @@index([branchId])
}

model TransportStaff {
  id                  String                    @id @default(cuid())
  employeeCode        String?                   @unique
  firstName           String
  lastName            String
  phone               String?
  email               String?
  address             String?
  staffType           TransportStaffType
  status              TransportStaffStatus      @default(ACTIVE)
  dateOfJoining       DateTime?
  dateOfLeaving       DateTime?
  
  // License Details
  licenseNumber       String?
  licenseType         String?
  licenseIssueDate    DateTime?
  licenseExpiryDate   DateTime?
  licenseIssuedBy     String?
  
  // Medical Details
  medicalCertNumber   String?
  medicalIssueDate    DateTime?
  medicalExpiryDate   DateTime?
  medicalIssuedBy     String?
  bloodGroup          String?
  medicalConditions   String?
  emergencyContact    String?
  emergencyPhone      String?
  
  // Employment Details
  salary              Float?
  allowances          Float?
  bankAccountNumber   String?
  bankName            String?
  ifscCode            String?
  
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @updatedAt
  branchId            String

  // Relations
  branch              Branch                    @relation(fields: [branchId], references: [id])
  busAssignments      TransportStaffAssignment[]
  notifications       TransportNotification[]

  @@index([employeeCode])
  @@index([branchId])
  @@index([staffType])
}

model TransportStaffAssignment {
  id              String                    @id @default(cuid())
  busId           String
  staffId         String
  staffType       TransportStaffType
  isPrimary       Boolean                   @default(true)
  startDate       DateTime                  @default(now())
  endDate         DateTime?
  isActive        Boolean                   @default(true)
  notes           String?
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt

  // Relations
  bus             TransportBus              @relation(fields: [busId], references: [id])
  staff           TransportStaff            @relation(fields: [staffId], references: [id])

  @@unique([busId, staffId, staffType, isActive])
  @@index([busId])
  @@index([staffId])
}

model TransportTrip {
  id                    String                    @id @default(cuid())
  busId                 String
  routeId               String?
  driverId              String?
  conductorId           String?
  tripDate              DateTime
  startTime             DateTime
  endTime               DateTime?
  
  // Kilometer Readings
  startKilometerReading Int
  endKilometerReading   Int?
  totalDistance         Float?
  
  // Trip Details
  numberOfStudents      Int?
  fuelConsumed          Float?
  tripType              String                    @default("Regular") // Regular, Emergency, Maintenance
  notes                 String?
  
  // Status
  isCompleted           Boolean                   @default(false)
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt

  // Relations
  bus                   TransportBus              @relation(fields: [busId], references: [id])
  route                 TransportRoute?           @relation(fields: [routeId], references: [id])

  @@index([busId])
  @@index([routeId])
  @@index([tripDate])
}

model TransportNotification {
  id                String                    @id @default(cuid())
  type              NotificationType
  title             String
  message           String
  targetDate        DateTime
  reminderDays      Int                       @default(7)
  method            NotificationMethod        @default(EMAIL)
  status            NotificationStatus        @default(PENDING)
  
  // Target Details
  busId             String?
  staffId           String?
  recipientEmail    String?
  recipientPhone    String?
  
  // Scheduling
  scheduledDate     DateTime
  sentDate          DateTime?
  readDate          DateTime?
  
  // Metadata
  retryCount        Int                       @default(0)
  errorMessage      String?
  isRecurring       Boolean                   @default(false)
  
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  branchId          String

  // Relations
  branch            Branch                    @relation(fields: [branchId], references: [id])
  bus               TransportBus?             @relation(fields: [busId], references: [id])
  staff             TransportStaff?           @relation(fields: [staffId], references: [id])

  @@index([branchId])
  @@index([type])
  @@index([status])
  @@index([scheduledDate])
}

model TransportBusInspection {
  id                    String                    @id @default(cuid())
  busId                 String
  inspectionDate        DateTime                  @default(now())
  inspectionType        String                    @default("Regular") // Regular, Pre-Trip, Post-Trip, Quarterly, Annual
  inspectorName         String
  inspectorEmployeeId   String?
  odometerReading       Int?
  fuelLevel             Float?
  status                InspectionStatus          @default(PENDING)
  overallRating         String?                   // Excellent, Good, Fair, Poor, Failed
  totalIssues           Int                       @default(0)
  criticalIssues        Int                       @default(0)
  notes                 String?
  recommendations       String?
  nextInspectionDue     DateTime?
  isCompleted           Boolean                   @default(false)
  completedAt           DateTime?
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt
  branchId              String

  // Relations
  bus                   TransportBus              @relation(fields: [busId], references: [id])
  branch                Branch                    @relation(fields: [branchId], references: [id])
  items                 TransportInspectionItem[]
  photos                TransportInspectionPhoto[]

  @@index([busId])
  @@index([inspectionDate])
  @@index([status])
  @@index([branchId])
}

model TransportInspectionTemplate {
  id              String                    @id @default(cuid())
  name            String
  description     String?
  category        InspectionItemType
  isRequired      Boolean                   @default(true)
  checklistItems  Json                      // Array of inspection items
  isActive        Boolean                   @default(true)
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  branchId        String

  // Relations
  branch          Branch                    @relation(fields: [branchId], references: [id])

  @@index([branchId])
  @@index([category])
}

model TransportInspectionItem {
  id                    String                    @id @default(cuid())
  inspectionId          String
  templateItemId        String?
  itemName              String
  category              InspectionItemType
  description           String?
  isChecked             Boolean                   @default(false)
  hasProblem            Boolean                   @default(false)
  severity              InspectionSeverity?
  problemDescription    String?
  recommendations       String?
  photoUrls             String[]                  @default([])
  isRequired            Boolean                   @default(true)
  sequence              Int                       @default(0)
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt

  // Relations
  inspection            TransportBusInspection    @relation(fields: [inspectionId], references: [id], onDelete: Cascade)
  photos                TransportInspectionPhoto[]

  @@index([inspectionId])
  @@index([category])
}

model TransportInspectionPhoto {
  id                    String                    @id @default(cuid())
  inspectionId          String
  inspectionItemId      String?
  photoUrl              String
  caption               String?
  category              String?                   // Before, After, Problem, General
  uploadedBy            String?
  createdAt             DateTime                  @default(now())

  // Relations
  inspection            TransportBusInspection    @relation(fields: [inspectionId], references: [id], onDelete: Cascade)
  inspectionItem        TransportInspectionItem?  @relation(fields: [inspectionItemId], references: [id], onDelete: Cascade)

  @@index([inspectionId])
  @@index([inspectionItemId])
}

model TransportNotificationConfig {
  id                        String                    @id @default(cuid())
  type                      NotificationType
  isEnabled                 Boolean                   @default(true)
  reminderDays              Int                       @default(7)
  method                    NotificationMethod        @default(EMAIL)
  
  // Email Settings
  emailTemplate             String?
  emailSubject              String?
  
  // WhatsApp Settings
  whatsappTemplate          String?
  
  // Advanced Settings
  maxRetries                Int                       @default(3)
  retryIntervalHours        Int                       @default(24)
  isRecurring               Boolean                   @default(false)
  recurringFrequencyDays    Int?
  
  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt
  branchId                  String

  // Relations
  branch                    Branch                    @relation(fields: [branchId], references: [id])

  @@unique([branchId, type])
  @@index([branchId])
  @@index([type])
}

model AttendanceLocation {
  id             String             @id @default(cuid())
  name           String
  latitude       Float
  longitude      Float
  radius         Int
  isActive       Boolean            @default(true)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  branchId       String
  locationTypeId String?
  devices        AttendanceDevice[]
  branch         Branch             @relation(fields: [branchId], references: [id])
  locationType   LocationType?      @relation(fields: [locationTypeId], references: [id])
  attendances    StaffAttendance[]

  @@map("attendanceLocation")
}

model LocationType {
  id                String               @id @default(cuid())
  name              String
  code              String
  description       String?
  isDefault         Boolean              @default(false)
  isActive          Boolean              @default(true)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  branchId          String
  locations         AttendanceLocation[]
  attendanceWindows AttendanceWindow[]
  branch            Branch               @relation(fields: [branchId], references: [id])

  @@map("locationType")
}

model AttendanceWindow {
  id                     String            @id @default(cuid())
  name                   String
  startTime              String
  endTime                String
  isMon                  Boolean           @default(true)
  isTue                  Boolean           @default(true)
  isWed                  Boolean           @default(true)
  isThu                  Boolean           @default(true)
  isFri                  Boolean           @default(true)
  isSat                  Boolean           @default(false)
  isSun                  Boolean           @default(false)
  allowLateMarking       Boolean           @default(false)
  lateMarkingGracePeriod Int               @default(0)
  isActive               Boolean           @default(true)
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  branchId               String
  locationTypeId         String
  branch                 Branch            @relation(fields: [branchId], references: [id])
  locationType           LocationType      @relation(fields: [locationTypeId], references: [id])
  attendanceRecords      StaffAttendance[]

  @@map("attendanceWindow")
}

model AttendanceDevice {
  id         String              @id @default(cuid())
  name       String
  deviceId   String              @unique
  isActive   Boolean             @default(true)
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  branchId   String
  locationId String?
  branch     Branch              @relation(fields: [branchId], references: [id])
  location   AttendanceLocation? @relation(fields: [locationId], references: [id])

  @@map("attendanceDevice")
}

model StaffAttendance {
  id                  String             @id @default(cuid())
  timestamp           DateTime           @default(now())
  latitude            Float
  longitude           Float
  distance            Int
  isWithinAllowedArea Boolean            @default(false)
  notes               String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  locationId          String
  teacherId           String?
  employeeId          String?
  windowId            String?
  type                AttendanceType     @default(IN)
  employee            Employee?          @relation(fields: [employeeId], references: [id])
  location            AttendanceLocation @relation(fields: [locationId], references: [id])
  teacher             Teacher?           @relation(fields: [teacherId], references: [id])
  attendanceWindow    AttendanceWindow?  @relation(fields: [windowId], references: [id])

  @@index([timestamp, type])
  @@index([teacherId, timestamp])
  @@index([employeeId, timestamp])
  @@map("staffAttendance")
}

model StudentAttendance {
  id         String           @id @default(cuid())
  date       DateTime         @default(now())
  status     AttendanceStatus @default(PRESENT)
  reason     String?
  notes      String?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  studentId  String
  markedById String?
  sectionId  String
  section    Section          @relation(fields: [sectionId], references: [id])
  student    Student          @relation(fields: [studentId], references: [id])

  @@unique([studentId, date])
  @@index([date, sectionId])
  @@index([studentId, date])
  @@map("studentAttendance")
}

model Subject {
  id                      String                    @id @default(cuid())
  name                    String
  code                    String?
  description             String?
  isActive                Boolean                   @default(true)
  isOptional              Boolean                   @default(false)
  displayOrder            Int                       @default(0)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  AssessmentConfiguration AssessmentConfiguration[]
  assessmentSchemas       AssessmentSchema[]
  chapters                Chapter[]
  classes                 ClassSubject[]
  ExamConfiguration       ExamConfiguration[]
  students                StudentSubject[]
  teachers                SubjectTeacher[]
}

model ClassSubject {
  id        String   @id @default(cuid())
  classId   String
  subjectId String
  createdAt DateTime @default(now())
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([classId, subjectId])
}

model StudentSubject {
  id        String   @id @default(cuid())
  studentId String
  subjectId String
  createdAt DateTime @default(now())
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([studentId, subjectId])
}

model SubjectTeacher {
  id        String   @id @default(cuid())
  teacherId String
  subjectId String
  classId   String
  sectionId String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  branchId  String
  branch    Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  section   Section? @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  teacher   Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@unique([teacherId, subjectId, classId, sectionId])
  @@index([branchId, isActive])
  @@index([teacherId, isActive])
  @@index([classId, subjectId])
}

model LeavePolicy {
  id                String             @id @default(cuid())
  name              String
  description       String?
  maxDaysPerYear    Int
  isPaid            Boolean            @default(true)
  applicableRoles   String[]
  branchId          String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  leaveApplications LeaveApplication[]
  leaveBalances     LeaveBalance[]
  branch            Branch             @relation(fields: [branchId], references: [id])
}

model LeaveBalance {
  id            String      @id @default(cuid())
  year          Int
  totalDays     Int
  usedDays      Int         @default(0)
  remainingDays Int
  policyId      String
  teacherId     String?
  employeeId    String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  employee      Employee?   @relation(fields: [employeeId], references: [id])
  policy        LeavePolicy @relation(fields: [policyId], references: [id])
  teacher       Teacher?    @relation(fields: [teacherId], references: [id])

  @@unique([policyId, teacherId, year])
  @@unique([policyId, employeeId, year])
}

model LeaveApplication {
  id         String      @id @default(cuid())
  startDate  DateTime
  endDate    DateTime
  reason     String
  status     String      @default("PENDING")
  comments   String?
  policyId   String
  teacherId  String?
  employeeId String?
  approvedBy String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  employee   Employee?   @relation(fields: [employeeId], references: [id])
  policy     LeavePolicy @relation(fields: [policyId], references: [id])
  teacher    Teacher?    @relation(fields: [teacherId], references: [id])
}

model RbacRole {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String?
  isSystem        Boolean          @default(false)
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  permissions     String[]         @default([])
  branchId        String?
  branch          Branch?          @relation(fields: [branchId], references: [id])
  rolePermissions RolePermission[]
  userRoles       UserRole[]

  @@index([name])
  @@index([isSystem])
  @@index([isActive])
}

model Permission {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String?
  category        String
  isSystem        Boolean          @default(false)
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  rolePermissions RolePermission[]

  @@index([name])
  @@index([category])
  @@index([isSystem])
  @@index([isActive])
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         RbacRole   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
}

model UserRole {
  id         String    @id @default(cuid())
  userId     String
  roleId     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  teacherId  String?
  employeeId String?
  branchId   String?
  isActive   Boolean   @default(true)
  branch     Branch?   @relation(fields: [branchId], references: [id])
  employee   Employee? @relation(fields: [employeeId], references: [id])
  role       RbacRole  @relation(fields: [roleId], references: [id], onDelete: Cascade)
  teacher    Teacher?  @relation(fields: [teacherId], references: [id])
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
  @@index([isActive])
}

model SalaryStructure {
  id               String           @id @default(cuid())
  name             String
  description      String?
  basicSalary      Float
  daPercentage     Float            @default(0)
  pfPercentage     Float            @default(0)
  esiPercentage    Float            @default(0)
  isActive         Boolean          @default(true)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  employeeSalaries EmployeeSalary[]
  teacherSalaries  TeacherSalary[]
}

model EmployeeSalary {
  id                   String          @id @default(cuid())
  employeeId           String
  structureId          String
  customBasicSalary    Float?
  customDaPercentage   Float?
  customPfPercentage   Float?
  customEsiPercentage  Float?
  additionalAllowances Float           @default(0)
  startDate            DateTime        @default(now())
  endDate              DateTime?
  isActive             Boolean         @default(true)
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  employee             Employee        @relation(fields: [employeeId], references: [id])
  structure            SalaryStructure @relation(fields: [structureId], references: [id])
  salaryPayments       SalaryPayment[]

  @@unique([employeeId, structureId, startDate])
}

model TeacherSalary {
  id                   String          @id @default(cuid())
  teacherId            String
  structureId          String
  customBasicSalary    Float?
  customDaPercentage   Float?
  customPfPercentage   Float?
  customEsiPercentage  Float?
  additionalAllowances Float           @default(0)
  startDate            DateTime        @default(now())
  endDate              DateTime?
  isActive             Boolean         @default(true)
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  salaryPayments       SalaryPayment[]
  structure            SalaryStructure @relation(fields: [structureId], references: [id])
  teacher              Teacher         @relation(fields: [teacherId], references: [id])

  @@unique([teacherId, structureId, startDate])
}

model SalaryPayment {
  id                      String          @id @default(cuid())
  month                   Int
  year                    Int
  basicSalary             Float
  daAmount                Float
  pfDeduction             Float
  esiDeduction            Float
  employerPfContribution  Float
  employerEsiContribution Float
  additionalAllowances    Float           @default(0)
  leaveDeductions         Float           @default(0)
  otherDeductions         Float           @default(0)
  otherAdditions          Float           @default(0)
  totalEarnings           Float
  totalDeductions         Float
  netPayable              Float
  paymentDate             DateTime?
  paymentStatus           String          @default("PENDING")
  remarks                 String?
  teacherSalaryId         String?
  employeeSalaryId        String?
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  employeeSalary          EmployeeSalary? @relation(fields: [employeeSalaryId], references: [id])
  teacherSalary           TeacherSalary?  @relation(fields: [teacherSalaryId], references: [id])

  @@unique([month, year, teacherSalaryId])
  @@unique([month, year, employeeSalaryId])
}

model SalaryIncrement {
  id                  String    @id @default(cuid())
  incrementAmount     Float?
  incrementPercentage Float?
  oldBasicSalary      Float
  newBasicSalary      Float
  effectiveDate       DateTime
  remarks             String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  teacherId           String?
  employeeId          String?
  appliedById         String?
  employee            Employee? @relation(fields: [employeeId], references: [id])
  teacher             Teacher?  @relation(fields: [teacherId], references: [id])

  @@index([teacherId])
  @@index([employeeId])
  @@index([effectiveDate])
}

model Department {
  id          String     @id @default(cuid())
  name        String
  code        String     @unique
  description String?
  type        String
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  branchId    String
  headId      String?
  branch      Branch     @relation(fields: [branchId], references: [id])
  employees   Employee[] @relation("EmployeeDepartment")
}

model Designation {
  id          String     @id @default(cuid())
  title       String
  code        String     @unique
  description String?
  category    String
  level       String
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  branchId    String
  branch      Branch     @relation(fields: [branchId], references: [id])
  employees   Employee[] @relation("EmployeeDesignation")
}

model AdmissionLead {
  id                       String                @id @default(cuid())
  firstName                String
  lastName                 String
  email                    String?
  phone                    String?
  parentName               String?
  parentPhone              String?
  parentEmail              String?
  address                  String?
  city                     String?
  state                    String?
  country                  String?
  zipCode                  String?
  gradeApplyingFor         String?
  academicSession          String?
  sourceId                 String?
  status                   AdmissionStatus       @default(NEW)
  notes                    String?
  assignedToId             String?
  createdAt                DateTime              @default(now())
  updatedAt                DateTime              @updatedAt
  branchId                 String
  leadType                 String?
  appliedClass             String?
  birthDate                DateTime?
  gender                   String?
  nextFollowUpDate         DateTime?
  lastContactDate          DateTime?
  registrationNumber       String?
  provisionalInvoiceNumber String?
  application              AdmissionApplication?
  assignedTo               AdmissionStaff?       @relation(fields: [assignedToId], references: [id])
  branch                   Branch                @relation(fields: [branchId], references: [id])
  source                   LeadSource?           @relation(fields: [sourceId], references: [id])
  offer                    AdmissionOffer?
  assessments              Assessment[]
  followUps                FollowUp[]
  documents                LeadDocument[]
  interactions             LeadInteraction[]
  payments                 PaymentTransaction[]
}

model LeadSource {
  id          String          @id @default(cuid())
  name        String
  description String?
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  leads       AdmissionLead[]
}

model LeadInteraction {
  id            String          @id @default(cuid())
  leadId        String
  type          String
  description   String
  date          DateTime
  conductedById String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  conductedBy   AdmissionStaff? @relation(fields: [conductedById], references: [id])
  lead          AdmissionLead   @relation(fields: [leadId], references: [id])
}

model LeadDocument {
  id           String          @id @default(cuid())
  leadId       String
  name         String
  type         String
  url          String
  uploadedAt   DateTime        @default(now())
  uploadedById String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  lead         AdmissionLead   @relation(fields: [leadId], references: [id])
  uploadedBy   AdmissionStaff? @relation(fields: [uploadedById], references: [id])
}

model FollowUp {
  id            String          @id @default(cuid())
  leadId        String
  scheduledDate DateTime
  description   String
  status        FollowUpStatus  @default(PENDING)
  completedDate DateTime?
  assignedToId  String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  assignedTo    AdmissionStaff? @relation(fields: [assignedToId], references: [id])
  lead          AdmissionLead   @relation(fields: [leadId], references: [id])
}

model AdmissionStaff {
  id                   String                 @id @default(cuid())
  userId               String?                @unique
  clerkId              String?
  name                 String
  email                String?
  phone                String?
  role                 String
  isActive             Boolean                @default(true)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  AdmissionApplication AdmissionApplication[]
  admissionLeads       AdmissionLead[]
  assessments          Assessment[]
  followUps            FollowUp[]
  leadDocuments        LeadDocument[]
  leadInteractions     LeadInteraction[]
  paymentTransactions  PaymentTransaction[]
  user                 User?                  @relation(fields: [userId], references: [id])

  @@index([userId])
}

model AdmissionApplication {
  id                String                   @id @default(cuid())
  leadId            String                   @unique
  applicationNumber String                   @unique
  applicationDate   DateTime                 @default(now())
  status            ApplicationStatus        @default(SUBMITTED)
  currentStage      String?
  assignedToId      String?
  reviewedById      String?
  reviewDate        DateTime?
  decisionDate      DateTime?
  decisionById      String?
  decisionNotes     String?
  offerAcceptedDate DateTime?
  feePaid           Boolean                  @default(false)
  feeAmount         Float?
  feeDate           DateTime?
  enrollmentDate    DateTime?
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt
  assignedTo        AdmissionStaff?          @relation(fields: [assignedToId], references: [id])
  lead              AdmissionLead            @relation(fields: [leadId], references: [id])
  requirements      ApplicationRequirement[]
  stages            ApplicationStage[]
}

model ApplicationStage {
  id            String               @id @default(cuid())
  applicationId String
  name          String
  description   String?
  sequence      Int
  startDate     DateTime?
  endDate       DateTime?
  status        StageStatus          @default(PENDING)
  completedById String?
  completedDate DateTime?
  notes         String?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  application   AdmissionApplication @relation(fields: [applicationId], references: [id])
}

model ApplicationRequirement {
  id            String               @id @default(cuid())
  applicationId String
  name          String
  description   String?
  isRequired    Boolean              @default(true)
  status        RequirementStatus    @default(PENDING)
  completedDate DateTime?
  notes         String?
  documentUrl   String?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  application   AdmissionApplication @relation(fields: [applicationId], references: [id])
}

model PaymentTransaction {
  id            String          @id @default(cuid())
  leadId        String
  amount        Float
  method        String
  status        String
  type          String
  reference     String?
  transactionId String?
  invoiceNumber String?
  paymentDate   DateTime        @default(now())
  notes         String?
  processedById String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  lead          AdmissionLead   @relation(fields: [leadId], references: [id])
  processedBy   AdmissionStaff? @relation(fields: [processedById], references: [id])
}

model Assessment {
  id            String          @id @default(cuid())
  leadId        String
  scheduledDate DateTime
  actualDate    DateTime?
  assessorId    String?
  type          String
  subject       String?
  status        String
  score         Float?
  maxScore      Float?
  result        String?
  notes         String?
  location      String?
  duration      Int?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  assessor      AdmissionStaff? @relation(fields: [assessorId], references: [id])
  lead          AdmissionLead   @relation(fields: [leadId], references: [id])
}

model AdmissionOffer {
  id             String        @id @default(cuid())
  leadId         String        @unique
  offerDate      DateTime      @default(now())
  expiryDate     DateTime
  status         String
  offerLetterUrl String?
  terms          String?
  confirmedDate  DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  lead           AdmissionLead @relation(fields: [leadId], references: [id])
}

model EmployeeBranchAccess {
  id         String   @id @default(cuid())
  employeeId String
  branchId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  branch     Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)
  employee   Employee @relation("EmployeeBranchAccessRecords", fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, branchId])
}

model Chapter {
  id          String             @id @default(cuid())
  name        String
  code        String?
  description String?
  subjectId   String
  branchId    String?
  isActive    Boolean            @default(true)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  blueprints  BlueprintChapter[]
  branch      Branch?            @relation(fields: [branchId], references: [id])
  subject     Subject            @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  questions   Question[]
  subTopics   SubTopic[]
}

model SubTopic {
  id          String     @id @default(cuid())
  name        String
  description String?
  chapterId   String
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  questions   Question[]
  chapter     Chapter    @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model Question {
  id                 String          @id @default(cuid())
  text               String
  marks              Int
  chapterId          String
  subTopicId         String?
  isActive           Boolean         @default(true)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  creatorId          String?
  isAIGenerated      Boolean         @default(false)
  type               String
  difficulty         String
  applicableSubjects String[]        @default([])
  category           String          @default("Objective")
  subtype            String          @default("MCQ")
  paperQuestions     PaperQuestion[]
  chapter            Chapter         @relation(fields: [chapterId], references: [id])
  subTopic           SubTopic?       @relation(fields: [subTopicId], references: [id])
}

model EducationBoard {
  id          String      @id @default(cuid())
  name        String
  code        String      @unique
  description String?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  blueprints  Blueprint[]
}

model Blueprint {
  id             String             @id @default(cuid())
  name           String
  description    String?
  classId        String
  boardId        String?
  creatorId      String?
  isActive       Boolean            @default(true)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  board          EducationBoard?    @relation(fields: [boardId], references: [id])
  class          Class              @relation(fields: [classId], references: [id])
  chapters       BlueprintChapter[]
  sections       BlueprintSection[]
  questionPapers QuestionPaper[]
}

model BlueprintChapter {
  id          String    @id @default(cuid())
  blueprintId String
  chapterId   String
  createdAt   DateTime  @default(now())
  blueprint   Blueprint @relation(fields: [blueprintId], references: [id], onDelete: Cascade)
  chapter     Chapter   @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([blueprintId, chapterId])
}

model BlueprintSection {
  id                      String         @id @default(cuid())
  blueprintId             String
  name                    String
  description             String?
  questionCount           Int
  instructions            String?
  sectionOrder            Int            @default(0)
  createdAt               DateTime       @default(now())
  objectiveQuestionCount  Int            @default(0)
  requiredSubtypes        String[]       @default([])
  subjectiveQuestionCount Int            @default(0)
  blueprint               Blueprint      @relation(fields: [blueprintId], references: [id], onDelete: Cascade)
  paperSections           PaperSection[]
}

model QuestionPaper {
  id          String         @id @default(cuid())
  title       String
  description String?
  duration    Int?
  totalMarks  Int?
  blueprintId String
  creatorId   String?
  isPublished Boolean        @default(false)
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  sections    PaperSection[]
  blueprint   Blueprint      @relation(fields: [blueprintId], references: [id])
}

model PaperSection {
  id                 String           @id @default(cuid())
  questionPaperId    String
  blueprintSectionId String
  name               String
  instructions       String?
  sectionOrder       Int              @default(0)
  createdAt          DateTime         @default(now())
  questions          PaperQuestion[]
  blueprintSection   BlueprintSection @relation(fields: [blueprintSectionId], references: [id])
  questionPaper      QuestionPaper    @relation(fields: [questionPaperId], references: [id], onDelete: Cascade)
}

model PaperQuestion {
  id             String       @id @default(cuid())
  paperSectionId String
  questionId     String
  questionOrder  Int
  marks          Int?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  paperSection   PaperSection @relation(fields: [paperSectionId], references: [id])
  question       Question     @relation(fields: [questionId], references: [id])
}

model TextbookProcessing {
  id                  String    @id @default(cuid())
  fileUrl             String
  fileName            String
  classId             String
  subjectId           String
  chapterId           String
  status              String
  errorMessage        String?
  questionsGenerated  Int?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  completedAt         DateTime?
  creatorId           String
  batchConcurrency    Int?
  batchProcessingUsed Boolean   @default(false)
  batchSize           Int?
  processingDuration  Int?
}

model MoneyCollection {
  id             String                 @id @default(cuid())
  title          String
  description    String?
  collectionDate DateTime?
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  branchId       String
  sessionId      String?
  branch         Branch                 @relation(fields: [branchId], references: [id])
  session        AcademicSession?       @relation("MoneyCollectionSession", fields: [sessionId], references: [id])
  classes        MoneyCollectionClass[]
  items          MoneyCollectionItem[]
}

model MoneyCollectionClass {
  id                String          @id @default(cuid())
  moneyCollectionId String
  classId           String
  createdAt         DateTime        @default(now())
  class             Class           @relation("ClassMoneyCollectionLinks", fields: [classId], references: [id])
  moneyCollection   MoneyCollection @relation(fields: [moneyCollectionId], references: [id], onDelete: Cascade)

  @@unique([moneyCollectionId, classId])
}

model MoneyCollectionItem {
  id                String          @id @default(cuid())
  amount            Float
  notes             String?
  receivedAt        DateTime        @default(now())
  moneyCollectionId String
  studentId         String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  moneyCollection   MoneyCollection @relation(fields: [moneyCollectionId], references: [id], onDelete: Cascade)
  student           Student         @relation(fields: [studentId], references: [id])
}

model FeeHead {
  id                 String              @id @default(cuid())
  name               String
  description        String?
  isSystemDefined    Boolean             @default(false)
  isActive           Boolean             @default(true)
  branchId           String
  sessionId          String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  studentType        String              @default("BOTH")
  classwiseFees      ClasswiseFee[]
  feeCollectionItems FeeCollectionItem[]
  branch             Branch              @relation(fields: [branchId], references: [id])
  session            AcademicSession     @relation("FeeHeadSession", fields: [sessionId], references: [id])
  feeTerms           FeeTermFeeHead[]

  @@unique([name, branchId, sessionId])
  @@index([studentType])
}

model FeeTerm {
  id             String           @id @default(cuid())
  name           String
  description    String?
  startDate      DateTime
  endDate        DateTime
  dueDate        DateTime
  isActive       Boolean          @default(true)
  branchId       String
  sessionId      String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  order          Int              @default(0)
  classwiseFees  ClasswiseFee[]
  feeCollections FeeCollection[]
  branch         Branch           @relation(fields: [branchId], references: [id])
  session        AcademicSession  @relation("FeeTermSession", fields: [sessionId], references: [id])
  feeHeads       FeeTermFeeHead[]

  @@unique([name, branchId, sessionId])
  @@index([branchId, sessionId, order])
}

model FeeTermFeeHead {
  id        String   @id @default(cuid())
  feeTermId String
  feeHeadId String
  createdAt DateTime @default(now())
  feeHead   FeeHead  @relation(fields: [feeHeadId], references: [id], onDelete: Cascade)
  feeTerm   FeeTerm  @relation(fields: [feeTermId], references: [id], onDelete: Cascade)

  @@unique([feeTermId, feeHeadId])
}

model ClasswiseFee {
  id        String          @id @default(cuid())
  classId   String
  feeTermId String
  feeHeadId String
  amount    Float
  branchId  String
  sessionId String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  sectionId String?
  branch    Branch          @relation(fields: [branchId], references: [id])
  Class     Class           @relation(fields: [classId], references: [id])
  feeHead   FeeHead         @relation(fields: [feeHeadId], references: [id])
  feeTerm   FeeTerm         @relation(fields: [feeTermId], references: [id])
  section   Section?        @relation(fields: [sectionId], references: [id])
  session   AcademicSession @relation("ClasswiseFeeSession", fields: [sessionId], references: [id])
}

model ConcessionType {
  id                     String              @id @default(cuid())
  name                   String
  description            String?
  type                   String              @default("PERCENTAGE")
  value                  Float               @default(0)
  maxValue               Float?
  isActive               Boolean             @default(true)
  applicableStudentTypes String[]            @default(["BOTH"])
  eligibilityCriteria    String?
  requiredDocuments      String[]            @default([])
  autoApproval           Boolean             @default(false)
  branchId               String
  sessionId              String
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  branch                 Branch              @relation(fields: [branchId], references: [id], onDelete: Cascade)
  session                AcademicSession     @relation("ConcessionTypeSession", fields: [sessionId], references: [id], onDelete: Cascade)
  studentConcessions     StudentConcession[]

  @@unique([name, branchId, sessionId])
  @@index([branchId, sessionId])
  @@index([isActive])
  @@index([type])
}

model StudentConcession {
  id               String              @id @default(cuid())
  studentId        String
  concessionTypeId String
  customValue      Float?
  reason           String?
  approvedBy       String?
  approvedAt       DateTime?
  status           String              @default("PENDING")
  validFrom        DateTime            @default(now())
  validUntil       DateTime?
  appliedFeeHeads  String[]            @default([])
  appliedFeeTerms  String[]            @default([])
  documents        String[]            @default([])
  notes            String?
  branchId         String
  sessionId        String
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  history          ConcessionHistory[]
  branch           Branch              @relation(fields: [branchId], references: [id], onDelete: Cascade)
  concessionType   ConcessionType      @relation(fields: [concessionTypeId], references: [id], onDelete: Cascade)
  session          AcademicSession     @relation("StudentConcessionSession", fields: [sessionId], references: [id], onDelete: Cascade)
  student          Student             @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, concessionTypeId], name: "student_concession_type_unique")
  @@index([studentId])
  @@index([branchId, sessionId])
  @@index([status])
  @@index([concessionTypeId])
  @@index([validFrom, validUntil])
}

model ConcessionHistory {
  id                  String            @id @default(cuid())
  studentConcessionId String
  action              String
  oldValue            Float?
  newValue            Float?
  reason              String?
  performedBy         String
  performedAt         DateTime          @default(now())
  studentConcession   StudentConcession @relation(fields: [studentConcessionId], references: [id], onDelete: Cascade)

  @@index([studentConcessionId])
  @@index([performedAt])
}

model ConcessionApprovalSettings {
  id                          String   @id @default(cuid())
  branchId                    String
  sessionId                   String
  approvalType                String   @default("1_PERSON")
  authorizationType           String   @default("ROLE_BASED")
  autoApproveBelow            Float    @default(1000)
  requireDocumentVerification Boolean  @default(true)
  allowSelfApproval           Boolean  @default(false)
  maxApprovalAmount           Float    @default(50000)
  escalationThreshold         Float    @default(25000)
  notificationEnabled         Boolean  @default(true)
  approvalTimeoutDays         Int      @default(7)
  requireReason               Boolean  @default(true)
  approvalRoles               String[] @default([])
  secondApprovalRoles         String[] @default([])
  approvalIndividuals         String[] @default([])
  secondApprovalIndividuals   String[] @default([])
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  createdBy                   String?
  updatedBy                   String?
  branch                      Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@unique([branchId, sessionId], name: "branchId_sessionId")
  @@index([branchId])
  @@index([sessionId])
  @@index([approvalType])
  @@index([authorizationType])
}

model FeeCollection {
  id                   String              @id @default(cuid())
  receiptNumber        String              @unique
  studentId            String
  feeTermId            String
  totalAmount          Float
  paidAmount           Float
  paymentMode          String
  transactionReference String?
  paymentDate          DateTime
  notes                String?
  status               String              @default("COMPLETED")
  branchId             String
  sessionId            String
  createdBy            String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  branch               Branch              @relation(fields: [branchId], references: [id])
  feeTerm              FeeTerm             @relation(fields: [feeTermId], references: [id])
  session              AcademicSession     @relation("FeeCollectionSession", fields: [sessionId], references: [id])
  student              Student             @relation(fields: [studentId], references: [id])
  items                FeeCollectionItem[]
}

model FeeCollectionItem {
  id              String        @id @default(cuid())
  feeCollectionId String
  feeHeadId       String
  amount          Float
  createdAt       DateTime      @default(now())
  feeCollection   FeeCollection @relation(fields: [feeCollectionId], references: [id], onDelete: Cascade)
  feeHead         FeeHead       @relation(fields: [feeHeadId], references: [id])
}

model BackgroundTask {
  id                String               @id @default(cuid())
  taskType          String
  title             String
  description       String?
  status            BackgroundTaskStatus @default(PENDING)
  totalItems        Int                  @default(0)
  processedItems    Int                  @default(0)
  failedItems       Int                  @default(0)
  percentage        Float                @default(0)
  inputData         Json?
  results           Json?
  errors            Json[]               @default([])
  scheduledAt       DateTime?
  startedAt         DateTime?
  completedAt       DateTime?
  estimatedDuration Int?
  createdBy         String?
  branchId          String?
  priority          Int                  @default(5)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  branch            Branch?              @relation(fields: [branchId], references: [id])
  executionLogs     TaskExecutionLog[]

  @@index([status, scheduledAt])
  @@index([branchId, status])
  @@index([taskType, status])
}

model EmailConfiguration {
  id                     String   @id @default(cuid())
  smtpHost               String?
  smtpPort               Int?     @default(587)
  smtpUsername           String?
  smtpPassword           String?
  fromEmail              String?
  fromName               String?  @default("Scholarise System")
  adminEmails            String[] @default([])
  notifyOnTaskCompletion Boolean  @default(true)
  notifyOnTaskFailure    Boolean  @default(true)
  includeTaskDetails     Boolean  @default(true)
  includeErrorLogs       Boolean  @default(false)
  taskCompletionTemplate String?
  taskFailureTemplate    String?
  branchId               String?  @unique
  isGlobal               Boolean  @default(false)
  isActive               Boolean  @default(true)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  branch                 Branch?  @relation(fields: [branchId], references: [id])

  @@index([branchId, isActive])
}

model TaskExecutionLog {
  id        String         @id @default(cuid())
  taskId    String
  level     TaskLogLevel   @default(INFO)
  message   String
  details   Json?
  timestamp DateTime       @default(now())
  task      BackgroundTask @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId, timestamp])
  @@index([level, timestamp])
}

model GradeScale {
  id          String       @id @default(cuid())
  name        String
  isDefault   Boolean      @default(false)
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  branchId    String
  gradeRanges GradeRange[]
  branch      Branch       @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@index([branchId, isActive])
}

model GradeRange {
  id            String     @id @default(cuid())
  gradeScaleId  String
  grade         String
  minPercentage Float
  maxPercentage Float
  gradePoint    Float?
  description   String?
  order         Int        @default(0)
  gradeScale    GradeScale @relation(fields: [gradeScaleId], references: [id], onDelete: Cascade)

  @@index([gradeScaleId, minPercentage])
}

model AssessmentSchema {
  id                      String                   @id @default(cuid())
  name                    String
  term                    String
  classId                 String
  subjectId               String
  totalMarks              Int                      @default(100)
  isActive                Boolean                  @default(true)
  isPublished             Boolean                  @default(false)
  createdBy               String
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  branchId                String
  appliedClasses          Json?
  components              AssessmentComponent[]
  permissions             AssessmentPermission[]
  branch                  Branch                   @relation(fields: [branchId], references: [id], onDelete: Cascade)
  class                   Class                    @relation(fields: [classId], references: [id])
  subject                 Subject                  @relation(fields: [subjectId], references: [id])
  termRelation            Term                     @relation("termRelation", fields: [term], references: [id])
  studentAssessmentScores StudentAssessmentScore[]

  @@unique([branchId, classId, subjectId, term])
  @@index([branchId, isActive])
  @@index([classId, subjectId])
}

model AssessmentComponent {
  id                 String                  @id @default(cuid())
  name               String
  description        String?
  assessmentSchemaId String
  rawMaxScore        Int
  reducedScore       Float
  weightage          Float                   @default(1.0)
  formula            String?
  order              Int                     @default(0)
  isActive           Boolean                 @default(true)
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt
  assessmentSchema   AssessmentSchema        @relation(fields: [assessmentSchemaId], references: [id], onDelete: Cascade)
  subCriteria        AssessmentSubCriteria[]
  componentScores    ComponentScore[]

  @@index([assessmentSchemaId, order])
}

model AssessmentSubCriteria {
  id                String              @id @default(cuid())
  name              String
  description       String?
  componentId       String
  maxScore          Int
  order             Int                 @default(0)
  isActive          Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  component         AssessmentComponent @relation(fields: [componentId], references: [id], onDelete: Cascade)
  subCriteriaScores SubCriteriaScore[]

  @@index([componentId, order])
}

model StudentAssessmentScore {
  id                 String           @id @default(cuid())
  studentId          String
  finalScore         Float?
  finalGrade         String?
  finalPercentage    Float?
  isComplete         Boolean          @default(false)
  submittedAt        DateTime?
  enteredBy          String
  enteredAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  branchId           String
  assessmentSchemaId String
  componentScores    ComponentScore[]
  assessmentSchema   AssessmentSchema @relation(fields: [assessmentSchemaId], references: [id], onDelete: Cascade)
  branch             Branch           @relation(fields: [branchId], references: [id], onDelete: Cascade)
  student            Student          @relation(fields: [studentId], references: [id])

  @@unique([studentId, assessmentSchemaId])
  @@index([studentId])
  @@index([enteredBy])
  @@index([assessmentSchemaId])
}

model ComponentScore {
  id                       String                 @id @default(cuid())
  componentId              String
  studentAssessmentScoreId String
  rawScore                 Float?
  reducedScore             Float?
  calculatedScore          Float?
  isComplete               Boolean                @default(false)
  enteredBy                String
  enteredAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  component                AssessmentComponent    @relation(fields: [componentId], references: [id], onDelete: Cascade)
  studentScore             StudentAssessmentScore @relation(fields: [studentAssessmentScoreId], references: [id], onDelete: Cascade)
  subCriteriaScores        SubCriteriaScore[]

  @@unique([componentId, studentAssessmentScoreId])
  @@index([componentId])
  @@index([studentAssessmentScoreId])
}

model SubCriteriaScore {
  id               String                @id @default(cuid())
  subCriteriaId    String
  componentScoreId String
  score            Float?
  comments         String?
  enteredBy        String
  enteredAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  componentScore   ComponentScore        @relation(fields: [componentScoreId], references: [id], onDelete: Cascade)
  subCriteria      AssessmentSubCriteria @relation(fields: [subCriteriaId], references: [id], onDelete: Cascade)

  @@unique([subCriteriaId, componentScoreId])
  @@index([subCriteriaId])
  @@index([componentScoreId])
}

model AssessmentPermission {
  id                 String                   @id @default(cuid())
  assessmentSchemaId String?
  userId             String
  permissionType     AssessmentPermissionType
  canCreate          Boolean                  @default(false)
  canEdit            Boolean                  @default(false)
  canView            Boolean                  @default(true)
  canDelete          Boolean                  @default(false)
  canPublish         Boolean                  @default(false)
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  branchId           String
  assessmentSchema   AssessmentSchema?        @relation(fields: [assessmentSchemaId], references: [id], onDelete: Cascade)
  branch             Branch                   @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@unique([assessmentSchemaId, userId])
  @@index([branchId, userId])
  @@index([userId, permissionType])
}

model AssessmentCategory {
  id                      String                    @id
  name                    String
  code                    String                    @unique
  description             String?
  maxMarks                Int
  isActive                Boolean                   @default(true)
  order                   Int                       @default(0)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime
  branchId                String
  Branch                  Branch                    @relation(fields: [branchId], references: [id], onDelete: Cascade)
  AssessmentConfiguration AssessmentConfiguration[]

  @@index([branchId, isActive])
}

model AssessmentConfiguration {
  id                 String             @id
  name               String
  categoryId         String
  classId            String
  sectionId          String?
  subjectId          String?
  maxMarks           Int
  weightage          Float              @default(1.0)
  dueDate            DateTime?
  instructions       String?
  isActive           Boolean            @default(true)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime
  branchId           String
  Branch             Branch             @relation(fields: [branchId], references: [id], onDelete: Cascade)
  AssessmentCategory AssessmentCategory @relation(fields: [categoryId], references: [id])
  Class              Class              @relation(fields: [classId], references: [id])
  Section            Section?           @relation(fields: [sectionId], references: [id])
  Subject            Subject?           @relation(fields: [subjectId], references: [id])
  AssessmentMarks    AssessmentMarks[]

  @@index([branchId, isActive])
  @@index([classId, sectionId])
}

model AssessmentMarks {
  id                      String                  @id
  assessmentConfigId      String
  studentId               String
  marksObtained           Float?
  comments                String?
  submissionDate          DateTime?
  enteredBy               String
  enteredAt               DateTime                @default(now())
  updatedAt               DateTime
  isSubmitted             Boolean                 @default(false)
  submittedAt             DateTime?
  branchId                String
  AssessmentConfiguration AssessmentConfiguration @relation(fields: [assessmentConfigId], references: [id])
  Branch                  Branch                  @relation(fields: [branchId], references: [id], onDelete: Cascade)
  Student                 Student                 @relation(fields: [studentId], references: [id])

  @@unique([assessmentConfigId, studentId])
  @@index([branchId, assessmentConfigId])
  @@index([enteredBy])
  @@index([studentId])
}

model ExamConfiguration {
  id           String         @id
  name         String
  classId      String
  sectionId    String?
  subjectId    String
  maxMarks     Int
  passingMarks Int
  weightage    Float          @default(1.0)
  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  branchId     String
  Branch       Branch         @relation(fields: [branchId], references: [id], onDelete: Cascade)
  Class        Class          @relation(fields: [classId], references: [id])
  Section      Section?       @relation(fields: [sectionId], references: [id])
  Subject      Subject        @relation(fields: [subjectId], references: [id])
  ExamSchedule ExamSchedule[]
  MarksEntry   MarksEntry[]

  @@index([branchId, isActive])
  @@index([classId, sectionId])
}

model ExamSchedule {
  id                String            @id
  examConfigId      String
  examDate          DateTime
  startTime         DateTime
  endTime           DateTime
  room              String?
  invigilator       String?
  instructions      String?
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime
  branchId          String
  Branch            Branch            @relation(fields: [branchId], references: [id], onDelete: Cascade)
  ExamConfiguration ExamConfiguration @relation(fields: [examConfigId], references: [id])

  @@index([branchId, examDate])
  @@index([examConfigId])
}

model ExamType {
  id          String   @id
  name        String
  code        String   @unique
  description String?
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  branchId    String
  Branch      Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@index([branchId, isActive])
}

model MarksEntry {
  id                String            @id
  examConfigId      String
  studentId         String
  marksObtained     Float?
  isAbsent          Boolean           @default(false)
  remarks           String?
  enteredBy         String
  enteredAt         DateTime          @default(now())
  updatedAt         DateTime
  isSubmitted       Boolean           @default(false)
  submittedAt       DateTime?
  branchId          String
  Branch            Branch            @relation(fields: [branchId], references: [id], onDelete: Cascade)
  ExamConfiguration ExamConfiguration @relation(fields: [examConfigId], references: [id])
  Student           Student           @relation(fields: [studentId], references: [id])

  @@unique([examConfigId, studentId])
  @@index([branchId, examConfigId])
  @@index([enteredBy])
  @@index([studentId])
}

model SeatingPlan {
  id         String   @id
  studentId  String
  seatNumber String
  room       String
  row        Int?
  column     Int?
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  branchId   String
  Branch     Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)
  Student    Student  @relation(fields: [studentId], references: [id])

  @@index([studentId])
}

enum CallerType {
  TEACHER
  HEAD
}

enum AttendanceType {
  IN
  OUT
  BRANCH_TRANSFER_OUT
  BRANCH_TRANSFER_IN
}

enum AttendanceStatus {
  PRESENT
  LEAVE
  ABSENT
  HALF_DAY
  LATE
}

enum AdmissionStatus {
  NEW
  CONTACTED
  ENGAGED
  TOUR_SCHEDULED
  TOUR_COMPLETED
  APPLICATION_SENT
  APPLICATION_RECEIVED
  FEE_PAID
  ASSESSMENT_SCHEDULED
  ASSESSMENT_COMPLETED
  INTERVIEW_SCHEDULED
  INTERVIEW_COMPLETED
  DECISION_PENDING
  OFFERED
  ACCEPTED
  REJECTED
  WAITLISTED
  ENROLLED
  CLOSED_LOST
  ARCHIVE
}

enum FollowUpStatus {
  PENDING
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum ApplicationStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  IN_PROCESS
  AWAITING_DOCUMENTS
  READY_FOR_DECISION
  OFFERED
  ACCEPTED
  REJECTED
  WAITLISTED
  WITHDRAWN
  ENROLLED
}

enum StageStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  SKIPPED
  FAILED
}

enum RequirementStatus {
  PENDING
  SUBMITTED
  APPROVED
  REJECTED
  WAIVED
}

enum QuestionType {
  MCQ
  SHORT_ANSWER
  LONG_ANSWER
  TRUE_FALSE
  FILL_IN_BLANKS
  MATCH_THE_FOLLOWING
  ASSERTION_REASONING
  DESCRIPTIVE
  ANALYTICAL
  EVALUATIVE
  COMPARATIVE
  APPLICATION_BASED
  CASE_STUDY
  OPINION_BASED
  EXPLORATORY
  CAUSE_EFFECT
  HYPOTHETICAL
  INTERPRETIVE
  JUSTIFICATION
}

enum QuestionCategory {
  OBJECTIVE
  SUBJECTIVE
}

enum QuestionDifficulty {
  EASY
  MEDIUM
  HARD
}

enum BackgroundTaskStatus {
  PENDING
  QUEUED
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
  RETRY
  PAUSED
}

enum TaskLogLevel {
  DEBUG
  INFO
  WARN
  ERROR
  FATAL
}

enum AssessmentPermissionType {
  ADMIN
  SUBJECT_COORDINATOR
  TEACHER
  VIEW_ONLY
}

// Communication Module Models
model WhatsAppTemplate {
  id                    String                 @id @default(cuid())
  name                  String
  description           String?
  watiTemplateId        String?                @unique // Template ID from Wati API (optional)
  twilioContentSid      String?                @unique // Twilio Content SID (optional)
  templateBody          String                 // Template content
  templateVariables     String[]               @default([]) // Variables that can be customized
  category              String                 // Category like "utility", "marketing", etc.
  language              String                 @default("en")
  status                WhatsAppTemplateStatus @default(PENDING)
  isActive              Boolean                @default(true)
  branchId              String?                // Optional - templates are now global but can track origin branch
  createdBy             String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  
  // Relations
  branch                Branch?                @relation(fields: [branchId], references: [id])
  messages              CommunicationMessage[]
  
  @@index([branchId])
  @@index([status])
  @@index([isActive])
}

model CommunicationMessage {
  id                    String              @id @default(cuid())
  title                 String
  templateId            String?
  customMessage         String?             // For custom messages not using templates
  messageType           MessageType         @default(WHATSAPP)
  recipientType         RecipientType
  status                MessageStatus       @default(PENDING)
  scheduledAt           DateTime?           // For scheduled messages
  sentAt                DateTime?
  totalRecipients       Int                 @default(0)
  successfulSent        Int                 @default(0)
  failed                Int                 @default(0)
  watiMessageId         String?             // ID from Wati API (optional)
  twilioMessageId       String?             // ID from Twilio API (optional)
  branchId              String
  createdBy             String
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  
  // Relations
  branch                Branch              @relation(fields: [branchId], references: [id])
  template              WhatsAppTemplate?   @relation(fields: [templateId], references: [id])
  recipients            MessageRecipient[]
  logs                  CommunicationLog[]
  
  @@index([branchId])
  @@index([status])
  @@index([messageType])
  @@index([createdBy])
  @@index([createdAt])
}

model MessageRecipient {
  id                    String              @id @default(cuid())
  messageId             String
  recipientType         String              // "student", "teacher", "employee", "parent"
  recipientId           String              // ID of the recipient
  recipientName         String
  recipientPhone        String
  status                RecipientStatus     @default(PENDING)
  sentAt                DateTime?
  deliveredAt           DateTime?
  readAt                DateTime?
  watiMessageId         String?             // Individual message ID from Wati (optional)
  twilioMessageId       String?             // Individual message ID from Twilio (optional)
  errorMessage          String?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  
  // Relations
  message               CommunicationMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  
  @@index([messageId])
  @@index([recipientType])
  @@index([status])
}

model CommunicationLog {
  id                    String              @id @default(cuid())
  messageId             String?
  action                String              // "template_created", "message_sent", "delivery_confirmed", etc.
  description           String
  metadata              Json?               // Additional data
  userId                String
  createdAt             DateTime            @default(now())
  
  // Relations
  message               CommunicationMessage? @relation(fields: [messageId], references: [id])
  
  @@index([messageId])
  @@index([userId])
  @@index([createdAt])
}

// Communication Enums
enum WhatsAppTemplateStatus {
  PENDING
  APPROVED
  REJECTED
  PAUSED
}

enum MessageType {
  WHATSAPP
  SMS
  EMAIL
}

enum RecipientType {
  ALL_STUDENTS
  INDIVIDUAL_STUDENTS
  ENTIRE_CLASS
  SPECIFIC_SECTION
  INDIVIDUAL_SECTION
  MULTIPLE_CLASSES
  ALL_TEACHERS
  SPECIFIC_TEACHERS
  TEACHERS
  ALL_EMPLOYEES
  SPECIFIC_EMPLOYEES
  EMPLOYEES
  PARENTS
  CUSTOM_GROUP
}

enum MessageStatus {
  DRAFT
  PENDING
  SENDING
  SENT
  FAILED
  CANCELLED
  SCHEDULED
}

enum RecipientStatus {
  PENDING
  SENT
  DELIVERED
  READ
  FAILED
}

// Communication Settings Model
model CommunicationSettings {
  id                              String   @id @default(cuid())
  branchId                        String   @unique
  
  // Wati API Configuration (optional)
  watiApiUrl                      String?
  watiApiToken                    String?
  watiPhoneNumberId               String?
  watiIsActive                    Boolean  @default(false)
  
  // Twilio API Configuration (optional)
  twilioAccountSid                String?
  twilioAuthToken                 String?
  twilioWhatsAppFrom              String?
  twilioIsActive                  Boolean  @default(false)
  
  // Template Settings
  templateAutoSyncEnabled         Boolean  @default(true)
  templateSyncInterval            Int      @default(24) // hours
  templateDefaultCategory         String?  @default("UTILITY")
  templateDefaultLanguage         String   @default("en")
  
  // Message Settings
  messageEnableScheduling         Boolean  @default(true)
  messageMaxRecipientsPerMessage  Int      @default(1000)
  messageRetryFailedMessages      Boolean  @default(true)
  messageMaxRetryAttempts         Int      @default(3)
  messageRetryDelay               Int      @default(30) // seconds
  
  // Notification Settings
  notificationEmailEnabled        Boolean  @default(false)
  notificationEmail               String?
  notifyOnFailures                Boolean  @default(true)
  notifyOnSuccess                 Boolean  @default(false)
  notificationDailySummary        Boolean  @default(true)
  
  // General Settings
  isActive                        Boolean  @default(true)
  createdAt                       DateTime @default(now())
  updatedAt                       DateTime @updatedAt
  createdBy                       String?
  updatedBy                       String?
  
  // Relations
  branch                          Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)
  
  @@index([branchId])
  @@index([isActive])
}

// Chat System Models for Bidirectional Communication
model Conversation {
  id                    String              @id @default(cuid())
  participantType       String              // "student", "teacher", "employee", "parent"
  participantId         String              // ID of the participant (student/teacher/employee/parent)
  participantName       String              // Cached name for display
  participantPhone      String              // Phone number (WhatsApp number)
  branchId              String
  lastMessageAt         DateTime?           // Last message timestamp for sorting
  lastMessageContent    String?             // Preview of last message
  lastMessageFrom       ChatMessageDirection // Who sent the last message
  unreadCount           Int                 @default(0) // Unread messages from participant
  isActive              Boolean             @default(true)
  metadata              Json?               // Additional data (class info, etc.)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  
  // Relations
  branch                Branch              @relation(fields: [branchId], references: [id])
  messages              ChatMessage[]
  
  @@unique([branchId, participantPhone]) // One conversation per phone number per branch
  @@index([branchId])
  @@index([participantType])
  @@index([participantPhone])
  @@index([lastMessageAt])
  @@index([isActive])
}

model ChatMessage {
  id                    String              @id @default(cuid())
  conversationId        String
  direction             ChatMessageDirection // INCOMING or OUTGOING
  content               String              // Message content
  messageType           ChatMessageType     @default(TEXT)
  twilioMessageId       String?             // Twilio message SID
  status                ChatMessageStatus   @default(SENT)
  readAt                DateTime?           // When message was read
  sentBy                String?             // User ID who sent the message (for outgoing)
  mediaUrl              String?             // URL for media messages
  mediaType             String?             // Type of media (image, document, etc.)
  metadata              Json?               // Additional Twilio metadata
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  
  // Relations
  conversation          Conversation        @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@index([conversationId])
  @@index([direction])
  @@index([createdAt])
  @@index([twilioMessageId])
  @@index([status])
}

// Chat Enums
enum ChatMessageDirection {
  INCOMING    // Message from user to school
  OUTGOING    // Message from school to user
}

enum ChatMessageType {
  TEXT
  IMAGE
  DOCUMENT
  AUDIO
  VIDEO
  LOCATION
}

enum ChatMessageStatus {
  SENDING
  SENT
  DELIVERED
  READ
  FAILED
}

enum TransportFeeType {
  ROUTE_WISE
  STOP_WISE
  DISTANCE_BASED
  FLAT_RATE
}

enum TransportAssignmentType {
  ROUTE_ONLY
  STOP_ONLY
  ROUTE_STOP
}

enum TransportStaffType {
  DRIVER
  CONDUCTOR
}

enum TransportStaffStatus {
  ACTIVE
  INACTIVE
  ON_LEAVE
  SUSPENDED
}

enum NotificationType {
  INSURANCE_EXPIRY
  POLLUTION_EXPIRY
  FITNESS_EXPIRY
  LICENSE_EXPIRY
  MEDICAL_EXPIRY
  TAX_DUE
  PERMIT_EXPIRY
  MAINTENANCE_DUE
  FUEL_ALERT
  LOAN_DUE
}

enum NotificationMethod {
  EMAIL
  WHATSAPP
  BOTH
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  READ
}

enum InspectionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum InspectionSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum InspectionItemType {
  SAFETY
  MECHANICAL
  ELECTRICAL
  INTERIOR
  EXTERIOR
  DOCUMENTATION
}
