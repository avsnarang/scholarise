import { z } from "zod";
import { createTRPCRouter, protectedProcedure } from "@/server/api/trpc";
import { TRPCError } from "@trpc/server";
import { Permission, Role } from "@/types/permissions";
import { rolePermissions } from "@/utils/rbac";

/**
 * Router for managing RBAC roles and permissions
 */
export const roleRouter = createTRPCRouter({
  // Get all roles with their permission counts
  getAll: protectedProcedure.query(async ({ ctx }) => {
    // First check if we have any roles in the database
    const existingRoles = await (ctx.db as any).rbacRole.findMany({
      include: {
        _count: {
          select: {
            permissions: true,
            userRoles: true,
          },
        },
      },
      orderBy: { name: "asc" },
    });

    // If no roles exist, seed the database with default roles
    if (existingRoles.length === 0) {
      await seedDefaultRoles(ctx.db);
      
      // Fetch again after seeding
      return await (ctx.db as any).rbacRole.findMany({
        include: {
          _count: {
            select: {
              permissions: true,
              userRoles: true,
            },
          },
        },
        orderBy: { name: "asc" },
      });
    }

    return existingRoles;
  }),

  // Get a specific role with all its permissions
  getById: protectedProcedure
    .input(z.object({ id: z.string() }))
    .query(async ({ ctx, input }) => {
      const role = await (ctx.db as any).rbacRole.findUnique({
        where: { id: input.id },
        include: {
          permissions: {
            include: {
              permission: true,
            },
          },
          _count: {
            select: {
              userRoles: true,
            },
          },
        },
      });

      if (!role) {
        throw new TRPCError({
          code: "NOT_FOUND",
          message: "Role not found",
        });
      }

      return role;
    }),

  // Create a new role
  create: protectedProcedure
    .input(
      z.object({
        name: z.string().min(1),
        description: z.string().optional(),
        permissions: z.array(z.string()).optional(),
        copyFromRoleId: z.string().optional(),
      })
    )
    .mutation(async ({ ctx, input }) => {
      // Check if role with this name already exists
      const existingRole = await (ctx.db as any).rbacRole.findFirst({
        where: { name: input.name },
      });

      if (existingRole) {
        throw new TRPCError({
          code: "CONFLICT",
          message: "A role with this name already exists",
        });
      }

      // Create the role
      const newRole = await (ctx.db as any).rbacRole.create({
        data: {
          name: input.name,
          description: input.description,
          isSystem: false,
        },
      });

      // If permissions are provided, add them
      if (input.permissions && input.permissions.length > 0) {
        await addPermissionsToRole(ctx.db, newRole.id, input.permissions);
      }
      // If copyFromRoleId is provided, copy permissions from that role
      else if (input.copyFromRoleId) {
        await copyPermissionsFromRole(ctx.db, input.copyFromRoleId, newRole.id);
      }

      return newRole;
    }),

  // Update a role
  update: protectedProcedure
    .input(
      z.object({
        id: z.string(),
        name: z.string().min(1).optional(),
        description: z.string().optional(),
        isActive: z.boolean().optional(),
      })
    )
    .mutation(async ({ ctx, input }) => {
      const { id, ...data } = input;

      // Check if role exists
      const role = await (ctx.db as any).rbacRole.findUnique({
        where: { id },
      });

      if (!role) {
        throw new TRPCError({
          code: "NOT_FOUND",
          message: "Role not found",
        });
      }

      // Prevent modification of system roles (except for description and isActive)
      if (role.isSystem && input.name) {
        throw new TRPCError({
          code: "FORBIDDEN",
          message: "Cannot modify name of system roles",
        });
      }

      return (ctx.db as any).rbacRole.update({
        where: { id },
        data,
      });
    }),

  // Delete a role
  delete: protectedProcedure
    .input(z.object({ id: z.string() }))
    .mutation(async ({ ctx, input }) => {
      // Check if role exists and is not a system role
      const role = await (ctx.db as any).rbacRole.findUnique({
        where: { id: input.id },
      });

      if (!role) {
        throw new TRPCError({
          code: "NOT_FOUND",
          message: "Role not found",
        });
      }

      if (role.isSystem) {
        throw new TRPCError({
          code: "FORBIDDEN",
          message: "Cannot delete system roles",
        });
      }

      // Delete the role (cascade will delete role permissions)
      return (ctx.db as any).rbacRole.delete({
        where: { id: input.id },
      });
    }),

  // Get all permissions 
  getAllPermissions: protectedProcedure.query(async ({ ctx }) => {
    // First check if we have any permissions in the database
    const existingPermissions = await (ctx.db as any).rbacPermission.findMany({
      orderBy: { name: "asc" },
    });

    // If no permissions exist, seed the database with default permissions
    if (existingPermissions.length === 0) {
      await seedDefaultPermissions(ctx.db);
      
      // Fetch again after seeding
      return await (ctx.db as any).rbacPermission.findMany({
        orderBy: { name: "asc" },
      });
    }

    return existingPermissions;
  }),

  // Get permissions for a specific role
  getRolePermissions: protectedProcedure
    .input(z.object({ roleId: z.string() }))
    .query(async ({ ctx, input }) => {
      const rolePermissions = await (ctx.db as any).rbacRolePermission.findMany({
        where: { roleId: input.roleId },
        include: {
          permission: true,
        },
      });

      return rolePermissions.map((rp: any) => rp.permission);
    }),

  // Update permissions for a role
  updateRolePermissions: protectedProcedure
    .input(
      z.object({
        roleId: z.string(),
        permissions: z.array(z.string()),
      })
    )
    .mutation(async ({ ctx, input }) => {
      const { roleId, permissions } = input;

      // Check if role exists
      const role = await (ctx.db as any).rbacRole.findUnique({
        where: { id: roleId },
      });

      if (!role) {
        throw new TRPCError({
          code: "NOT_FOUND",
          message: "Role not found",
        });
      }

      // For system roles, prevent removing all permissions
      if (role.isSystem && permissions.length === 0) {
        throw new TRPCError({
          code: "FORBIDDEN",
          message: "Cannot remove all permissions from system roles",
        });
      }

      // Delete all existing permissions for this role
      await (ctx.db as any).rbacRolePermission.deleteMany({
        where: { roleId },
      });

      // Add the new permissions
      if (permissions.length > 0) {
        await addPermissionsToRole(ctx.db, roleId, permissions);
      }

      return { success: true };
    }),

  // Assign role to a user
  assignRoleToUser: protectedProcedure
    .input(
      z.object({
        userId: z.string(),
        roleId: z.string(),
      })
    )
    .mutation(async ({ ctx, input }) => {
      const { userId, roleId } = input;

      // Check if role exists
      const role = await (ctx.db as any).rbacRole.findUnique({
        where: { id: roleId },
      });

      if (!role) {
        throw new TRPCError({
          code: "NOT_FOUND",
          message: "Role not found",
        });
      }

      // Check if user already has this role
      const existingUserRole = await (ctx.db as any).userRole.findFirst({
        where: {
          userId,
          roleId,
        },
      });

      if (existingUserRole) {
        return existingUserRole; // User already has this role
      }

      // Assign the role to the user
      return (ctx.db as any).userRole.create({
        data: {
          userId,
          roleId,
        },
      });
    }),

  // Remove role from a user
  removeRoleFromUser: protectedProcedure
    .input(
      z.object({
        userId: z.string(),
        roleId: z.string(),
      })
    )
    .mutation(async ({ ctx, input }) => {
      const { userId, roleId } = input;

      // Delete the user role
      await (ctx.db as any).userRole.deleteMany({
        where: {
          userId,
          roleId,
        },
      });

      return { success: true };
    }),

  // Get roles for a specific user
  getUserRoles: protectedProcedure
    .input(z.object({ userId: z.string() }))
    .query(async ({ ctx, input }) => {
      const userRoles = await (ctx.db as any).userRole.findMany({
        where: { userId: input.userId },
        include: {
          role: true,
        },
      });

      return userRoles.map((ur: any) => ur.role);
    }),
});

// Helper functions

// Seed default roles from the Role enum
async function seedDefaultRoles(db: any) {
  // Create all standard roles from the Role enum
  for (const role of Object.values(Role)) {
    await db.rbacRole.create({
      data: {
        name: role,
        description: getRoleDescription(role),
        isSystem: true,
      },
    });
  }
}

// Seed default permissions from the Permission enum
async function seedDefaultPermissions(db: any) {
  // Create all permissions from the Permission enum
  for (const permission of Object.values(Permission)) {
    await db.rbacPermission.create({
      data: {
        name: permission,
        description: getPermissionDescription(permission),
        category: getPermissionCategory(permission),
      },
    });
  }

  // For each role, assign the default permissions
  const roles = await db.rbacRole.findMany();
  for (const role of roles) {
    if ((rolePermissions as any)[role.name]) {
      await addPermissionsToRole(db, role.id, (rolePermissions as any)[role.name]);
    }
  }
}

// Add permissions to a role
async function addPermissionsToRole(db: any, roleId: string, permissionNames: string[]) {
  // Get permission IDs from names
  const permissions = await db.rbacPermission.findMany({
    where: {
      name: {
        in: permissionNames,
      },
    },
    select: {
      id: true,
    },
  });

  // Create role permissions
  const rolePermissions = permissions.map((permission: any) => ({
    roleId,
    permissionId: permission.id,
  }));

  // Use createMany for efficient bulk creation
  if (rolePermissions.length > 0) {
    await db.rbacRolePermission.createMany({
      data: rolePermissions,
      skipDuplicates: true,
    });
  }
}

// Copy permissions from one role to another
async function copyPermissionsFromRole(db: any, sourceRoleId: string, targetRoleId: string) {
  // Get all permissions for the source role
  const sourcePermissions = await db.rbacRolePermission.findMany({
    where: { roleId: sourceRoleId },
    select: {
      permission: {
        select: {
          name: true,
        },
      },
    },
  });

  // Add these permissions to the target role
  if (sourcePermissions.length > 0) {
    const permissionNames = sourcePermissions.map((rp: any) => rp.permission.name);
    await addPermissionsToRole(db, targetRoleId, permissionNames);
  }
}

// Helper function to get a nice description for each role
function getRoleDescription(role: string): string {
  switch (role) {
    case Role.SUPER_ADMIN:
      return "System administrators with full access";
    case Role.ADMIN:
      return "School administrators with broad access";
    case Role.PRINCIPAL:
      return "School principals managing academic staff";
    case Role.TEACHER:
      return "Teaching staff with classroom access";
    case Role.ACCOUNTANT:
      return "Financial staff managing accounts & fees";
    case Role.RECEPTIONIST:
      return "Front desk staff handling admissions";
    case Role.TRANSPORT_MANAGER:
      return "Staff managing transportation services";
    case Role.STAFF:
      return "General support staff with basic access";
    default:
      return `${role} role`;
  }
}

// Helper function to get a description for each permission
function getPermissionDescription(permission: string): string {
  // Replace underscores with spaces and capitalize
  return permission.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
}

// Helper function to determine permission category
function getPermissionCategory(permission: string): string {
  if (permission.startsWith("view_dashboard")) return "Dashboard";
  if (permission.includes("_student") || permission.includes("_admission") || permission.includes("_transfer")) return "Students";
  if (permission.includes("_teacher")) return "Teachers";
  if (permission.includes("_class")) return "Classes";
  if (permission.includes("_attendance")) return "Attendance";
  if (permission.includes("_leave")) return "Leave Management";
  if (permission.includes("_transport")) return "Transport";
  if (permission.includes("_fee")) return "Fees";
  if (permission.includes("_report")) return "Reports";
  if (permission.includes("_setting") || permission.includes("_user") || permission.includes("_branch") || permission.includes("_academic") || permission.includes("_subject")) return "Settings";
  return "General";
} 