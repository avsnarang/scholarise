import React, { useState, useEffect } from "react";
import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { format } from "date-fns";
import { toast } from "sonner";
import {
  Check,
  Clock,
  MapPin,
  ShieldAlert,
  ShieldCheck,
  Loader2,
  RefreshCw,
  Info,
  HelpCircle,
  LifeBuoy,
} from "lucide-react";
import { useRouter } from "next/router";

import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Skeleton } from "@/components/ui/skeleton";
import { useToast } from "@/components/ui/use-toast";
import {
  convertToMilesOrKm,
  getCurrentPosition,
  getDistance,
  type AttendanceLocation,
} from "@/utils/location-helpers";
import { api } from "@/utils/api";
import { useAttendanceLocations, useRecordAttendance } from "@/utils/attendance-api";
import { useBranchContext } from "@/hooks/useBranchContext";
import { useUserRole } from "@/hooks/useUserRole";
import { useSession } from "next-auth/react";
import { AppLayout } from "@/components/layout/app-layout";
import { PageWrapper } from "@/components/layout/page-wrapper";
import { type NextPageWithLayout } from "../_app";

const MarkAttendancePage: NextPageWithLayout = () => {
  const router = useRouter();
  const { currentBranchId } = useBranchContext();
  const { data: session } = useSession();
  const { isTeacher, isEmployee, isAdmin, isSuperAdmin, userId, teacherId, employeeId } = useUserRole();
  const utils = api.useUtils();

  const [selectedLocationId, setSelectedLocationId] = useState<string>("");
  const [currentPosition, setCurrentPosition] = useState<{ lat: number; lng: number } | null>(null);
  const [distance, setDistance] = useState<number | null>(null);
  const [progress, setProgress] = useState(0);
  const [isCheckingLocation, setIsCheckingLocation] = useState(false);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const [attendanceMarked, setAttendanceMarked] = useState(false);
  const [identityError, setIdentityError] = useState<string | null>(null);

  // Load locations using the custom hook
  const {
    locations,
    isLoading: isLoadingLocations
  } = useAttendanceLocations(currentBranchId || "");

  // Record attendance mutation
  const { recordAttendance, isLoading: isRecordingAttendance } = useRecordAttendance();

  // Effect to verify user identity data
  useEffect(() => {
    console.log("Checking user identity:", { teacherId, employeeId, userId });
    
    if (!userId) {
      setIdentityError("User ID not found. Please try logging out and back in.");
    } else if (!teacherId && !employeeId) {
      setIdentityError("Your account is not associated with a teacher or employee profile. Please contact administrator.");
    } else {
      setIdentityError(null);
    }
  }, [teacherId, employeeId, userId]);

  // Effect to auto-select a location if there's only one
  useEffect(() => {
    if (locations.length === 1) {
      setSelectedLocationId(locations[0]?.id || "");
    }
  }, [locations]);

  // Check if today's attendance is already marked
  const { data: todayAttendance, isLoading: isCheckingAttendance } = api.attendance.getAttendanceByDate.useQuery(
    {
      teacherId: teacherId || undefined,
      employeeId: employeeId || undefined,
      date: new Date(),
    },
    {
      enabled: !!userId && (!!teacherId || !!employeeId),
    }
  );

  useEffect(() => {
    if (todayAttendance) {
      setAttendanceMarked(true);
    }
  }, [todayAttendance]);

  const handleSelectLocation = (locationId: string) => {
    setSelectedLocationId(locationId);
    setDistance(null);
    setErrorMessage(null);
    setProgress(0);
  };

  const checkLocation = async () => {
    if (!selectedLocationId) {
      toast.error("Please select a location first");
      return;
    }

    setIsCheckingLocation(true);
    setErrorMessage(null);
    setProgress(20);

    try {
      // Get current position
      setProgress(40);
      const position = await getCurrentPosition();
      const currentCoords = {
        lat: position.coords.latitude,
        lng: position.coords.longitude,
      };
      setCurrentPosition(currentCoords);
      setProgress(70);

      // Find selected location
      const selectedLocation = locations.find(
        (loc: AttendanceLocation) => loc.id === selectedLocationId
      );

      if (!selectedLocation) {
        throw new Error("Selected location not found");
      }

      // Calculate distance
      const locationCoords = {
        lat: selectedLocation.latitude,
        lng: selectedLocation.longitude,
      };
      const distanceInMeters = getDistance(currentCoords, locationCoords);
      setDistance(distanceInMeters);
      setProgress(100);

      // Check if within radius
      const isWithinRadius = distanceInMeters <= selectedLocation.radius;
      if (!isWithinRadius) {
        setErrorMessage(
          `You are outside the allowed radius (${selectedLocation.radius}m) for this location.`
        );
      }
    } catch (error) {
      console.error("Error checking location:", error);
      setErrorMessage(
        `Error checking location: ${error instanceof Error ? error.message : "Unknown error"}`
      );
    } finally {
      setIsCheckingLocation(false);
    }
  };

  const markAttendance = () => {
    console.log("markAttendance called with:", {
      selectedLocationId,
      currentPosition,
      distance,
      teacherId,
      employeeId
    });

    if (!selectedLocationId || !currentPosition || !distance) {
      console.error("Missing required data for attendance:", {
        hasLocationId: !!selectedLocationId,
        hasPosition: !!currentPosition,
        hasDistance: !!distance
      });
      toast.error("Please check your location first");
      return;
    }

    const selectedLocation = locations.find(
      (loc: AttendanceLocation) => loc.id === selectedLocationId
    );

    if (!selectedLocation) {
      console.error("Selected location not found in locations list");
      toast.error("Selected location not found");
      return;
    }

    const isWithinRadius = distance <= selectedLocation.radius;
    console.log("Distance check:", {
      distance,
      radius: selectedLocation.radius,
      isWithinRadius
    });
    
    if (!isWithinRadius) {
      toast.error("You are outside the allowed radius for this location");
      return;
    }

    // Verify we have either a teacherId or employeeId
    if (!teacherId && !employeeId) {
      console.error("No teacherId or employeeId available");
      setIdentityError("Unable to identify your account type. You must be registered as a teacher or employee.");
      toast.error("Account identity error. See details on page.");
      return;
    }

    const attendanceData = {
      locationId: selectedLocationId,
      latitude: currentPosition.lat,
      longitude: currentPosition.lng,
      distance: distance,
      isWithinAllowedArea: isWithinRadius,
      teacherId: teacherId || undefined,
      employeeId: employeeId || undefined,
    };

    console.log("Submitting attendance data:", attendanceData);

    // Record attendance to the database
    recordAttendance(
      attendanceData,
      {
        onSuccess: () => {
          console.log("Attendance recorded successfully");
          toast.success("Attendance marked successfully");
          setAttendanceMarked(true);
          
          // Force refetch the attendance data
          void utils.attendance.getAttendanceByDate.invalidate();
        },
        onError: (error) => {
          console.error("Failed to mark attendance:", error);
          toast.error(`Failed to mark attendance: ${error.message}`);
        },
      }
    );
  };

  // Show skeleton if loading locations
  if (isLoadingLocations || isCheckingAttendance) {
    return (
      <PageWrapper>
        <div className="space-y-6">
          <div className="flex items-center">
            <div className="bg-[#00501B] dark:bg-[#7aad8c] h-8 w-1.5 rounded-md mr-3"></div>
            <h1 className="text-2xl font-bold">Mark Attendance</h1>
          </div>

          <div className="max-w-md mx-auto">
            <Skeleton className="h-12 w-3/4 mb-4" />
            <Skeleton className="h-6 w-full mb-8" />
            <Card className="border border-[#00501B]/10 dark:border-[#7aad8c]/20 shadow-sm">
              <CardHeader>
                <Skeleton className="h-8 w-2/3 mb-2" />
                <Skeleton className="h-4 w-full" />
              </CardHeader>
              <CardContent>
                <Skeleton className="h-32 w-full mb-4" />
                <Skeleton className="h-10 w-full mb-4" />
                <Skeleton className="h-10 w-full" />
              </CardContent>
            </Card>
          </div>
        </div>
      </PageWrapper>
    );
  }

  if (!isTeacher && !isEmployee && !isAdmin && !isSuperAdmin) {
    return (
      <PageWrapper>
        <div className="space-y-6">
          <div className="flex items-center">
            <div className="bg-[#00501B] dark:bg-[#7aad8c] h-8 w-1.5 rounded-md mr-3"></div>
            <h1 className="text-2xl font-bold">Mark Attendance</h1>
          </div>

          <div className="max-w-md mx-auto">
            <Card className="border border-[#00501B]/10 dark:border-[#7aad8c]/20 shadow-sm">
              <CardHeader>
                <CardTitle>Access Denied</CardTitle>
                <CardDescription>
                  You don't have permission to mark attendance.
                </CardDescription>
              </CardHeader>
              <CardContent>
                <p className="text-center text-muted-foreground">
                  This feature is only available for teachers, employees, and administrators.
                </p>
              </CardContent>
            </Card>
          </div>
        </div>
      </PageWrapper>
    );
  }

  if (attendanceMarked) {
    return (
      <PageWrapper>
        <div className="space-y-6">
          <div className="flex items-center">
            <div className="bg-[#00501B] dark:bg-[#7aad8c] h-8 w-1.5 rounded-md mr-3"></div>
            <h1 className="text-2xl font-bold">Mark Attendance</h1>
          </div>

          <div className="max-w-md mx-auto">
            <Card className="border border-[#00501B]/10 dark:border-[#7aad8c]/20 shadow-sm">
              <CardHeader>
                <CardTitle className="flex items-center">
                  <Check className="mr-2 h-5 w-5 text-green-500" />
                  Attendance Already Marked
                </CardTitle>
                <CardDescription>
                  Your attendance for today has been recorded
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="flex flex-col items-center justify-center py-6">
                  <div className="h-24 w-24 rounded-full bg-green-100 flex items-center justify-center mb-4">
                    <Check className="h-12 w-12 text-green-500" />
                  </div>
                  <h3 className="text-xl font-medium mb-1">
                    Attendance Successful
                  </h3>
                  <p className="text-muted-foreground mb-4">
                    {format(new Date(), "EEEE, MMMM d, yyyy")}
                  </p>
                  {todayAttendance && (
                    <div className="grid grid-cols-2 gap-4 w-full max-w-xs">
                      <div className="text-center p-2 border rounded border-[#00501B]/10 dark:border-[#7aad8c]/20">
                        <p className="text-xs text-muted-foreground mb-1">Time</p>
                        <p className="font-medium">
                          {format(new Date(todayAttendance.timestamp), "hh:mm a")}
                        </p>
                      </div>
                      <div className="text-center p-2 border rounded border-[#00501B]/10 dark:border-[#7aad8c]/20">
                        <p className="text-xs text-muted-foreground mb-1">Location</p>
                        <p className="font-medium">{todayAttendance.location.name}</p>
                      </div>
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </PageWrapper>
    );
  }

  if (locations.length === 0) {
    return (
      <PageWrapper>
        <div className="space-y-6">
          <div className="flex items-center">
            <div className="bg-[#00501B] dark:bg-[#7aad8c] h-8 w-1.5 rounded-md mr-3"></div>
            <h1 className="text-2xl font-bold">Mark Attendance</h1>
          </div>

          <div className="max-w-md mx-auto">
            <Card className="border border-[#00501B]/10 dark:border-[#7aad8c]/20 shadow-sm">
              <CardHeader>
                <CardTitle>No Locations Available</CardTitle>
                <CardDescription>
                  No attendance locations have been configured
                </CardDescription>
              </CardHeader>
              <CardContent>
                <p className="text-center text-muted-foreground">
                  Please contact your administrator to set up attendance locations.
                </p>
              </CardContent>
            </Card>
          </div>
        </div>
      </PageWrapper>
    );
  }

  return (
    <PageWrapper>
      <div className="space-y-6">
        <div className="flex items-center mb-2">
          <div className="bg-[#00501B] dark:bg-[#7aad8c] h-8 w-1.5 rounded-md mr-3"></div>
          <h1 className="text-2xl font-bold">Mark Attendance</h1>
        </div>

        <div className="max-w-2xl mx-auto">
          {identityError && (
            <div className="mb-6 p-4 border border-destructive/30 bg-destructive/10 rounded-md">
              <div className="flex items-start">
                <ShieldAlert className="h-5 w-5 text-destructive mr-2 mt-0.5 flex-shrink-0" />
                <div>
                  <h3 className="font-medium text-destructive">Account Error</h3>
                  <p className="text-sm text-destructive/90">{identityError}</p>
                  <p className="text-xs mt-2 text-destructive/80">
                    Please contact your administrator to resolve this issue.
                  </p>
                </div>
              </div>
            </div>
          )}

          {!identityError && (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Left column - Location selection and info */}
              <div className="space-y-4">
                <Card className="border border-[#00501B]/10 dark:border-[#7aad8c]/20 shadow-sm overflow-hidden">
                  <div className="bg-[#00501B]/5 dark:bg-[#7aad8c]/10 p-4">
                    <h2 className="text-lg font-semibold flex items-center">
                      <MapPin className="mr-2 h-5 w-5 text-[#00501B] dark:text-[#7aad8c]" />
                      Step 1: Select Location
                    </h2>
                    <p className="text-sm text-muted-foreground">
                      Choose your attendance location from the list below
                    </p>
                  </div>
                  <CardContent className="pt-4">
                    <div className="space-y-2">
                      <Select
                        value={selectedLocationId}
                        onValueChange={handleSelectLocation}
                      >
                        <SelectTrigger className="border-[#00501B]/20 dark:border-[#7aad8c]/20 bg-white dark:bg-background">
                          <SelectValue placeholder="Select a location" />
                        </SelectTrigger>
                        <SelectContent>
                          {locations.map((location: AttendanceLocation) => (
                            <SelectItem key={location.id} value={location.id}>
                              {location.name}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      
                      {selectedLocationId && (
                        <div className="mt-4 text-sm">
                          <p className="font-medium">Selected Location:</p>
                          <div className="mt-2 p-3 bg-[#00501B]/5 dark:bg-[#7aad8c]/10 rounded-md">
                            {locations.find((loc: AttendanceLocation) => loc.id === selectedLocationId)?.name}
                          </div>
                        </div>
                      )}
                    </div>
                  </CardContent>
                </Card>

                <Card className="border border-[#00501B]/10 dark:border-[#7aad8c]/20 shadow-sm overflow-hidden">
                  <div className="bg-[#00501B]/5 dark:bg-[#7aad8c]/10 p-4">
                    <h2 className="text-lg font-semibold flex items-center">
                      <Clock className="mr-2 h-5 w-5 text-[#00501B] dark:text-[#7aad8c]" />
                      Attendance Details
                    </h2>
                    <p className="text-sm text-muted-foreground">
                      Current time and date information
                    </p>
                  </div>
                  <CardContent className="pt-4">
                    <div className="grid grid-cols-2 gap-4">
                      <div className="p-3 border rounded-md bg-muted/30">
                        <p className="text-xs text-muted-foreground mb-1">Date</p>
                        <p className="font-medium">{format(new Date(), "MMMM d, yyyy")}</p>
                      </div>
                      <div className="p-3 border rounded-md bg-muted/30">
                        <p className="text-xs text-muted-foreground mb-1">Time</p>
                        <p className="font-medium">{format(new Date(), "h:mm a")}</p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>

              {/* Right column - Verification and marking */}
              <div className="space-y-4">
                <Card className="border border-[#00501B]/10 dark:border-[#7aad8c]/20 shadow-sm overflow-hidden">
                  <div className="bg-[#00501B]/5 dark:bg-[#7aad8c]/10 p-4">
                    <h2 className="text-lg font-semibold flex items-center">
                      <MapPin className="mr-2 h-5 w-5 text-[#00501B] dark:text-[#7aad8c]" />
                      Step 2: Verify Location
                    </h2>
                    <p className="text-sm text-muted-foreground">
                      Check if you're within the allowed radius
                    </p>
                  </div>
                  <CardContent className="pt-4 space-y-4">
                    {progress > 0 && (
                      <div className="space-y-2">
                        <div className="flex justify-between text-xs">
                          <span>Verifying location...</span>
                          <span>{progress}%</span>
                        </div>
                        <Progress value={progress} className="h-2 bg-[#00501B]/10 dark:bg-[#7aad8c]/10" />
                      </div>
                    )}

                    <Button
                      onClick={checkLocation}
                      className="w-full bg-[#00501B] hover:bg-[#00501B]/90 dark:bg-[#7aad8c] dark:hover:bg-[#7aad8c]/90"
                      disabled={!selectedLocationId || isCheckingLocation}
                      size="lg"
                    >
                      {isCheckingLocation ? (
                        <>
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                          Checking Location...
                        </>
                      ) : (
                        <>
                          <MapPin className="mr-2 h-4 w-4" />
                          Verify My Location
                        </>
                      )}
                    </Button>

                    {errorMessage && (
                      <div className="bg-destructive/15 p-4 rounded-md flex items-start">
                        <ShieldAlert className="h-5 w-5 text-destructive mr-2 mt-0.5 flex-shrink-0" />
                        <div>
                          <p className="text-sm font-medium text-destructive">Location Verification Failed</p>
                          <p className="text-sm text-destructive/90 mt-1">{errorMessage}</p>
                        </div>
                      </div>
                    )}

                    {distance !== null && !errorMessage && (
                      <div className="bg-[#00501B]/15 dark:bg-[#7aad8c]/15 p-4 rounded-md flex items-start">
                        <ShieldCheck className="h-5 w-5 text-[#00501B] dark:text-[#7aad8c] mr-2 mt-0.5 flex-shrink-0" />
                        <div>
                          <p className="text-sm font-medium text-[#00501B] dark:text-[#7aad8c]">Location Verified Successfully</p>
                          <p className="text-sm text-muted-foreground mt-1">
                            You are <span className="font-medium">{convertToMilesOrKm(distance)}</span> from the selected location.
                          </p>
                        </div>
                      </div>
                    )}
                  </CardContent>
                </Card>

                {distance !== null && !errorMessage && (
                  <Card className="border border-[#00501B]/10 dark:border-[#7aad8c]/20 shadow-sm overflow-hidden">
                    <div className="bg-[#00501B]/5 dark:bg-[#7aad8c]/10 p-4">
                      <h2 className="text-lg font-semibold flex items-center">
                        <Clock className="mr-2 h-5 w-5 text-[#00501B] dark:text-[#7aad8c]" />
                        Step 3: Mark Attendance
                      </h2>
                      <p className="text-sm text-muted-foreground">
                        Finalize your attendance for today
                      </p>
                    </div>
                    <CardContent className="pt-4">
                      <Button
                        onClick={markAttendance}
                        className="w-full bg-[#00501B] hover:bg-[#00501B]/90 dark:bg-[#7aad8c] dark:hover:bg-[#7aad8c]/90 h-12 text-base"
                        disabled={isRecordingAttendance}
                      >
                        {isRecordingAttendance ? (
                          <>
                            <Loader2 className="mr-2 h-5 w-5 animate-spin" />
                            Recording Attendance...
                          </>
                        ) : (
                          <>
                            <Check className="mr-2 h-5 w-5" />
                            Mark Attendance
                          </>
                        )}
                      </Button>
                    </CardContent>
                  </Card>
                )}
              </div>
            </div>
          )}
          
          {identityError && (
            <Card className="border border-destructive/30 shadow-sm">
              <CardHeader className="bg-destructive/5">
                <CardTitle className="flex items-center text-destructive">
                  <ShieldAlert className="mr-2 h-5 w-5" />
                  Identity Verification Failed
                </CardTitle>
                <CardDescription className="text-destructive/90">
                  Unable to mark attendance due to account issues
                </CardDescription>
              </CardHeader>
              <CardContent className="pt-6">
                <p className="text-sm mb-4">
                  Your account is not properly configured for attendance tracking. This could be because:
                </p>
                <ul className="list-disc pl-5 space-y-1 text-sm mb-4">
                  <li>Your user account is not linked to a teacher or employee record</li>
                  <li>Your account was recently created and needs additional setup</li>
                  <li>There may be database synchronization issues</li>
                </ul>
                <p className="text-sm font-medium">
                  Please contact your administrator and provide this error information:
                </p>
                <pre className="mt-2 p-3 bg-muted/50 rounded text-xs overflow-auto">
                  {JSON.stringify({ 
                    userId, 
                    teacherId, 
                    employeeId, 
                    error: identityError
                  }, null, 2)}
                </pre>
              </CardContent>
            </Card>
          )}
        </div>
      </div>
    </PageWrapper>
  );
};

MarkAttendancePage.getLayout = (page) => {
  return <AppLayout title="Mark Attendance" description="Record your daily attendance">{page}</AppLayout>
}

export default MarkAttendancePage;