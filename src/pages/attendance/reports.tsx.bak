import React, { useState } from "react";
import { format } from "date-fns";
import { BarChart3, Calendar, CheckCircle2, Download, FileBarChart2, FilterX, Printer, Search, UserCheck, Users } from "lucide-react";

// Define AttendanceStatus locally instead of importing from Prisma
enum AttendanceStatus {
  PRESENT = "PRESENT",
  ABSENT = "ABSENT",
  LATE = "LATE",
  HALF_DAY = "HALF_DAY",
  EXCUSED = "EXCUSED"
}

import { AppLayout } from "@/components/layout/app-layout";
import { PageWrapper } from "@/components/layout/page-wrapper";
import { type NextPageWithLayout } from "../_app";

import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
  CardFooter
} from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectTrigger,
  SelectValue
} from "@/components/ui/select";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Label } from "@/components/ui/label";
import { DatePicker } from "@/components/ui/date-picker";
import {
  Table,
  TableHeader,
  TableBody,
  TableHead,
  TableRow,
  TableCell,
  TableCaption
} from "@/components/ui/table";
import { Skeleton } from "@/components/ui/skeleton";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";

import { api } from "@/utils/api";
import { useBranchContext } from "@/hooks/useBranchContext";
import { useUserRole } from "@/hooks/useUserRole";
import {
  useStudentAttendance,
  getStatusColor,
  getStatusName
} from "@/utils/student-attendance-api";

const AttendanceReportsPage: NextPageWithLayout = () => {
  const { currentBranchId } = useBranchContext();
  const { isTeacher, isEmployee, isAdmin, isSuperAdmin, teacherId } = useUserRole();

  const [activeTab, setActiveTab] = useState("class");
  const [selectedClassId, setSelectedClassId] = useState<string>("");
  const [selectedStudentId, setSelectedStudentId] = useState<string>("");
  const [selectedStatus, setSelectedStatus] = useState<AttendanceStatus | "">("");
  const [startDate, setStartDate] = useState<Date>(new Date(new Date().setDate(1))); // First day of current month
  const [endDate, setEndDate] = useState<Date>(new Date());
  const [searchQuery, setSearchQuery] = useState("");

  // Fetch classes
  const { data: classes, isLoading: isLoadingClasses } = api.class.getAll.useQuery(
    { branchId: currentBranchId || "" },
    { enabled: !!currentBranchId }
  );

  // Fetch students
  const { data: students, isLoading: isLoadingStudents } = api.student.getAll.useQuery(
    {
      branchId: currentBranchId || "",
      classId: activeTab === "class" ? selectedClassId : undefined,
      search: searchQuery,
      limit: 100
    },
    {
      enabled: !!currentBranchId && (activeTab === "student" || !!selectedClassId),
      placeholderData: (prev) => prev // Keep previous data while fetching new data
    }
  );

  // Fetch attendance records
  const {
    records: attendanceRecords,
    isLoading: isLoadingAttendance
  } = useStudentAttendance({
    classId: activeTab === "class" ? selectedClassId : undefined,
    studentId: activeTab === "student" ? selectedStudentId : undefined,
    startDate,
    endDate,
    status: selectedStatus || undefined
  });

  // Filter records by search query when needed
  const filteredRecords = attendanceRecords.filter(record => {
    if (!searchQuery) return true;
    return record.studentName.toLowerCase().includes(searchQuery.toLowerCase()) ||
           (record.admissionNumber || "").toLowerCase().includes(searchQuery.toLowerCase());
  });

  // Handle print
  const handlePrint = () => {
    window.print();
  };

  // Handle export to CSV
  const handleExportCSV = () => {
    if (attendanceRecords.length === 0) return;

    // Create CSV content
    const headers = ["Date", "Student Name", "Admission No", "Roll No", "Status", "Reason"];

    const rows = attendanceRecords.map(record => ([
      format(record.date, "yyyy-MM-dd"),
      record.studentName,
      record.admissionNumber,
      record.rollNumber || "",
      getStatusName(record.status),
      record.reason || ""
    ]));

    const csvContent = [
      headers.join(","),
      ...rows.map(row => row.join(","))
    ].join("\n");

    // Create download link
    const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.setAttribute("href", url);
    link.setAttribute("download", `attendance_report_${format(new Date(), "yyyy-MM-dd")}.csv`);
    link.style.visibility = "hidden";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  // Get report title
  const getReportTitle = () => {
    if (activeTab === "class") {
      const classItem = classes?.find((c: any) => c.id === selectedClassId);
      return classItem ? `${classItem.name} ${classItem.section}` : "Class Attendance";
    } else {
      const studentItem = students?.items?.find(s => s.id === selectedStudentId);
      return studentItem ? `${studentItem.firstName} ${studentItem.lastName}` : "Student Attendance";
    }
  };

  // Get status counts
  const getStatusCounts = () => {
    const counts = {
      [AttendanceStatus.PRESENT]: 0,
      [AttendanceStatus.ABSENT]: 0,
      [AttendanceStatus.LATE]: 0,
      [AttendanceStatus.HALF_DAY]: 0,
      [AttendanceStatus.EXCUSED]: 0,
    };

    attendanceRecords.forEach(record => {
      counts[record.status as AttendanceStatus]++;
    });

    return counts;
  };

  const statusCounts = getStatusCounts();

  // Render loading state
  if (isLoadingClasses) {
    return (
      <PageWrapper>
        <div className="space-y-6">
          <div className="flex items-center">
            <div className="bg-[#00501B] dark:bg-[#7aad8c] h-8 w-1.5 rounded-md mr-3"></div>
            <h1 className="text-2xl font-bold">Attendance Reports</h1>
          </div>

          <Card className="border border-[#00501B]/10 dark:border-[#7aad8c]/20 shadow-sm">
            <CardHeader>
              <Skeleton className="h-6 w-48" />
              <Skeleton className="h-4 w-full" />
            </CardHeader>
            <CardContent>
              <div className="flex flex-col space-y-4">
                <div className="flex space-x-4">
                  <Skeleton className="h-10 w-1/3" />
                  <Skeleton className="h-10 w-1/3" />
                </div>
                <Skeleton className="h-96 w-full" />
              </div>
            </CardContent>
          </Card>
        </div>
      </PageWrapper>
    );
  }

  // Render access denied
  if (!isTeacher && !isEmployee && !isAdmin && !isSuperAdmin) {
    return (
      <PageWrapper>
        <div className="space-y-6">
          <div className="flex items-center">
            <div className="bg-[#00501B] dark:bg-[#7aad8c] h-8 w-1.5 rounded-md mr-3"></div>
            <h1 className="text-2xl font-bold">Attendance Reports</h1>
          </div>

          <Card className="border border-[#00501B]/10 dark:border-[#7aad8c]/20 shadow-sm">
            <CardHeader>
              <CardTitle>Access Denied</CardTitle>
              <CardDescription>
                You don't have permission to access attendance reports.
              </CardDescription>
            </CardHeader>
            <CardContent>
              <p className="text-center text-muted-foreground">
                This feature is only available for teachers, employees, and administrators.
              </p>
            </CardContent>
          </Card>
        </div>
      </PageWrapper>
    );
  }

  return (
    <PageWrapper>
      <div className="space-y-6">
        <div className="flex items-center">
          <div className="bg-[#00501B] dark:bg-[#7aad8c] h-8 w-1.5 rounded-md mr-3"></div>
          <h1 className="text-2xl font-bold">Attendance Reports</h1>
        </div>

        <Card className="border border-[#00501B]/10 dark:border-[#7aad8c]/20 shadow-sm">
          <CardHeader className="bg-gradient-to-r from-[#00501B]/5 to-transparent dark:from-[#7aad8c]/10 dark:to-transparent">
            <CardTitle className="flex items-center">
              <FileBarChart2 className="mr-2 h-5 w-5 text-[#00501B] dark:text-[#7aad8c]" />
              Attendance Reports
            </CardTitle>
            <CardDescription>
              View and analyze student attendance records
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* Report Type Tabs */}
            <Tabs
              value={activeTab}
              onValueChange={(value) => {
                setActiveTab(value);
                setSelectedClassId("");
                setSelectedStudentId("");
                setSearchQuery("");
              }}
              className="w-full"
            >
              <TabsList className="grid w-full max-w-md grid-cols-2">
                <TabsTrigger value="class" className="data-[state=active]:bg-[#00501B]/10 dark:data-[state=active]:bg-[#7aad8c]/20 data-[state=active]:text-[#00501B] dark:data-[state=active]:text-[#7aad8c]">
                  <Users className="h-4 w-4 mr-2" />
                  Class Report
                </TabsTrigger>
                <TabsTrigger value="student" className="data-[state=active]:bg-[#00501B]/10 dark:data-[state=active]:bg-[#7aad8c]/20 data-[state=active]:text-[#00501B] dark:data-[state=active]:text-[#7aad8c]">
                  <UserCheck className="h-4 w-4 mr-2" />
                  Student Report
                </TabsTrigger>
              </TabsList>

              <TabsContent value="class" className="pt-4">
                <div className="flex flex-col md:flex-row gap-4">
                  <div className="w-full md:w-64">
                    <Label htmlFor="class-select" className="mb-1.5 block">Select Class</Label>
                    <Select value={selectedClassId} onValueChange={setSelectedClassId}>
                      <SelectTrigger id="class-select" className="border-[#00501B]/20 dark:border-[#7aad8c]/20">
                        <SelectValue placeholder="Select class" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectGroup>
                          <SelectLabel>Classes</SelectLabel>
                          {classes?.map((classItem: any) => (
                            <SelectItem key={classItem.id} value={classItem.id}>
                              {classItem.name} {classItem.section}
                            </SelectItem>
                          ))}
                        </SelectGroup>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              </TabsContent>

              <TabsContent value="student" className="pt-4">
                <div className="space-y-4">
                  <div className="flex flex-col md:flex-row gap-4">
                    <div className="w-full">
                      <Label htmlFor="student-search" className="mb-1.5 block">Search Student</Label>
                      <div className="relative">
                        <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
                        <Input
                          id="student-search"
                          placeholder="Search by name or admission number"
                          className="pl-9 border-[#00501B]/20 dark:border-[#7aad8c]/20"
                          value={searchQuery}
                          onChange={(e) => setSearchQuery(e.target.value)}
                        />
                      </div>
                    </div>
                  </div>

                  {isLoadingStudents ? (
                    <div className="space-y-2">
                      <Skeleton className="h-10 w-full" />
                      <Skeleton className="h-10 w-full" />
                      <Skeleton className="h-10 w-full" />
                    </div>
                  ) : students?.items && students.items.length > 0 ? (
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2">
                      {students.items.map(student => (
                        <div
                          key={student.id}
                          className={`
                            border rounded-md p-3 cursor-pointer transition-colors
                            ${selectedStudentId === student.id
                              ? 'border-[#00501B] dark:border-[#7aad8c] bg-[#00501B]/5 dark:bg-[#7aad8c]/10'
                              : 'border-[#00501B]/10 dark:border-[#7aad8c]/20 hover:bg-[#00501B]/5 dark:hover:bg-[#7aad8c]/10'
                            }
                          `}
                          onClick={() => setSelectedStudentId(student.id)}
                        >
                          <div className="flex items-start justify-between">
                            <div>
                              <p className="font-medium">{student.firstName} {student.lastName}</p>
                              <p className="text-xs text-muted-foreground">
                                {student.admissionNumber}
                                {student.rollNumber && ` • Roll No: ${student.rollNumber}`}
                              </p>
                            </div>
                            {selectedStudentId === student.id && (
                              <CheckCircle2 className="h-4 w-4 text-[#00501B] dark:text-[#7aad8c]" />
                            )}
                          </div>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <Alert variant="destructive">
                      <FilterX className="h-4 w-4" />
                      <AlertTitle>No students found</AlertTitle>
                      <AlertDescription>
                        Try adjusting your search query to find students.
                      </AlertDescription>
                    </Alert>
                  )}
                </div>
              </TabsContent>
            </Tabs>

            {/* Date Range and Filters */}
            {(selectedClassId || selectedStudentId) && (
              <div className="border-t pt-4 space-y-4">
                <div className="flex flex-col md:flex-row gap-4 items-start md:items-end justify-between">
                  <div className="flex flex-col sm:flex-row gap-4">
                    <div>
                      <Label htmlFor="start-date" className="mb-1.5 block">Start Date</Label>
                      <DatePicker
                        value={startDate}
                        onChange={setStartDate}
                        className="border-[#00501B]/20 dark:border-[#7aad8c]/20"
                      />
                    </div>

                    <div>
                      <Label htmlFor="end-date" className="mb-1.5 block">End Date</Label>
                      <DatePicker
                        value={endDate}
                        onChange={setEndDate}
                        className="border-[#00501B]/20 dark:border-[#7aad8c]/20"
                      />
                    </div>

                    <div>
                      <Label htmlFor="status-filter" className="mb-1.5 block">Status Filter</Label>
                      <Select
                        value={selectedStatus}
                        onValueChange={(value) => setSelectedStatus(value as AttendanceStatus | "")}
                      >
                        <SelectTrigger id="status-filter" className="border-[#00501B]/20 dark:border-[#7aad8c]/20">
                          <SelectValue placeholder="All Statuses" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="">All Statuses</SelectItem>
                          <SelectItem value={AttendanceStatus.PRESENT}>Present</SelectItem>
                          <SelectItem value={AttendanceStatus.ABSENT}>Absent</SelectItem>
                          <SelectItem value={AttendanceStatus.LATE}>Late</SelectItem>
                          <SelectItem value={AttendanceStatus.HALF_DAY}>Half Day</SelectItem>
                          <SelectItem value={AttendanceStatus.EXCUSED}>Excused</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  <div className="flex gap-2 w-full md:w-auto">
                    <Button
                      variant="outline"
                      size="sm"
                      className="border-[#00501B]/20 dark:border-[#7aad8c]/20 text-[#00501B] dark:text-[#7aad8c] hover:bg-[#00501B]/10 dark:hover:bg-[#7aad8c]/10 flex-1 md:flex-none"
                      onClick={handlePrint}
                      disabled={attendanceRecords.length === 0}
                    >
                      <Printer className="h-4 w-4 mr-1" />
                      Print
                    </Button>

                    <Button
                      variant="outline"
                      size="sm"
                      className="border-[#00501B]/20 dark:border-[#7aad8c]/20 text-[#00501B] dark:text-[#7aad8c] hover:bg-[#00501B]/10 dark:hover:bg-[#7aad8c]/10 flex-1 md:flex-none"
                      onClick={handleExportCSV}
                      disabled={attendanceRecords.length === 0}
                    >
                      <Download className="h-4 w-4 mr-1" />
                      Export CSV
                    </Button>
                  </div>
                </div>

                {/* Status Summary */}
                {attendanceRecords.length > 0 && (
                  <div className="grid grid-cols-2 md:grid-cols-5 gap-2 mt-4">
                    <div className="bg-green-50 dark:bg-green-900/20 text-green-700 dark:text-green-400 border border-green-200 dark:border-green-800 rounded-md p-3 text-center">
                      <p className="text-xs font-medium">Present</p>
                      <p className="text-xl font-bold">{statusCounts[AttendanceStatus.PRESENT]}</p>
                    </div>

                    <div className="bg-red-50 dark:bg-red-900/20 text-red-700 dark:text-red-400 border border-red-200 dark:border-red-800 rounded-md p-3 text-center">
                      <p className="text-xs font-medium">Absent</p>
                      <p className="text-xl font-bold">{statusCounts[AttendanceStatus.ABSENT]}</p>
                    </div>

                    <div className="bg-yellow-50 dark:bg-yellow-900/20 text-yellow-700 dark:text-yellow-400 border border-yellow-200 dark:border-yellow-800 rounded-md p-3 text-center">
                      <p className="text-xs font-medium">Late</p>
                      <p className="text-xl font-bold">{statusCounts[AttendanceStatus.LATE]}</p>
                    </div>

                    <div className="bg-orange-50 dark:bg-orange-900/20 text-orange-700 dark:text-orange-400 border border-orange-200 dark:border-orange-800 rounded-md p-3 text-center">
                      <p className="text-xs font-medium">Half Day</p>
                      <p className="text-xl font-bold">{statusCounts[AttendanceStatus.HALF_DAY]}</p>
                    </div>

                    <div className="bg-blue-50 dark:bg-blue-900/20 text-blue-700 dark:text-blue-400 border border-blue-200 dark:border-blue-800 rounded-md p-3 text-center">
                      <p className="text-xs font-medium">Excused</p>
                      <p className="text-xl font-bold">{statusCounts[AttendanceStatus.EXCUSED]}</p>
                    </div>
                  </div>
                )}

                {/* Attendance Records Table */}
                <div id="attendance-report" className="mt-6 print:mt-0">
                  <div className="print:block hidden mb-8">
                    <h1 className="text-2xl font-bold text-center">{getReportTitle()} - Attendance Report</h1>
                    <p className="text-center text-muted-foreground">
                      {format(startDate, "MMMM d, yyyy")} to {format(endDate, "MMMM d, yyyy")}
                    </p>
                  </div>

                  {isLoadingAttendance ? (
                    <div className="space-y-4">
                      <Skeleton className="h-10 w-full" />
                      <Skeleton className="h-10 w-full" />
                      <Skeleton className="h-10 w-full" />
                      <Skeleton className="h-10 w-full" />
                      <Skeleton className="h-10 w-full" />
                    </div>
                  ) : filteredRecords.length === 0 ? (
                    <Alert className="bg-blue-50 dark:bg-blue-900/20 text-blue-700 dark:text-blue-400 border-blue-200 dark:border-blue-800">
                      <BarChart3 className="h-4 w-4" />
                      <AlertTitle>No attendance records found</AlertTitle>
                      <AlertDescription>
                        There are no attendance records for the selected filters. Try adjusting your filter criteria.
                      </AlertDescription>
                    </Alert>
                  ) : (
                    <div className="rounded-md border border-[#00501B]/10 dark:border-[#7aad8c]/20">
                      <Table>
                        <TableHeader>
                          <TableRow className="bg-[#00501B]/5 dark:bg-[#7aad8c]/10">
                            <TableHead className="w-32">Date</TableHead>
                            {activeTab === "class" && <TableHead>Student Name</TableHead>}
                            <TableHead className="w-40">Admission No</TableHead>
                            <TableHead className="w-32">Roll No</TableHead>
                            <TableHead className="w-32">Status</TableHead>
                            <TableHead className="hidden md:table-cell">Reason</TableHead>
                          </TableRow>
                        </TableHeader>
                        <TableBody>
                          {filteredRecords.map((record) => {
                            const statusColor = getStatusColor(record.status);
                            return (
                              <TableRow key={record.id} className="hover:bg-[#00501B]/5 dark:hover:bg-[#7aad8c]/5">
                                <TableCell className="font-medium">
                                  {format(record.date, "dd/MM/yyyy")}
                                </TableCell>
                                {activeTab === "class" && (
                                  <TableCell>{record.studentName}</TableCell>
                                )}
                                <TableCell>{record.admissionNumber}</TableCell>
                                <TableCell>{record.rollNumber || "-"}</TableCell>
                                <TableCell>
                                  <Badge
                                    variant="outline"
                                    className={`${statusColor.bg} ${statusColor.text} ${statusColor.border}`}
                                  >
                                    {getStatusName(record.status)}
                                  </Badge>
                                </TableCell>
                                <TableCell className="hidden md:table-cell">
                                  {record.reason || "-"}
                                </TableCell>
                              </TableRow>
                            );
                          })}
                        </TableBody>
                        <TableCaption className="mt-4">
                          Showing {filteredRecords.length} attendance records
                        </TableCaption>
                      </Table>
                    </div>
                  )}
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </PageWrapper>
  );
};

AttendanceReportsPage.getLayout = (page) => {
  return <AppLayout title="Attendance Reports" description="View and analyze student attendance records">{page}</AppLayout>
};

export default AttendanceReportsPage;