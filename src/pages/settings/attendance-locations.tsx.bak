import React, { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { toast } from "sonner";
import {
  MapPin,
  Plus,
  Pencil,
  Trash2,
  ToggleLeft,
  ToggleRight,
} from "lucide-react";

import { AppLayout } from "@/components/layout/app-layout";
import { PageWrapper } from "@/components/layout/page-wrapper";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Switch } from "@/components/ui/switch";
import { useAttendanceLocations, useAttendanceLocationMutations } from "@/utils/attendance-api";
import { useBranchContext } from "@/hooks/useBranchContext";
import { type NextPageWithLayout } from "../_app";
import { type AttendanceLocation } from "@/utils/location-helpers";

// Form schema for creating/editing attendance locations
const locationFormSchema = z.object({
  name: z.string().min(1, "Location name is required"),
  latitude: z.coerce.number().min(-90).max(90),
  longitude: z.coerce.number().min(-180).max(180),
  radius: z.coerce.number().min(10, "Radius must be at least 10 meters").max(1000, "Radius must be at most 1000 meters"),
  isActive: z.boolean().default(true),
});

// Define the type for form values
type LocationFormValues = {
  name: string;
  latitude: number;
  longitude: number;
  radius: number;
  isActive: boolean;
};

const AttendanceLocationsPage: NextPageWithLayout = () => {
  const { currentBranchId } = useBranchContext();
  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [selectedLocation, setSelectedLocation] = useState<any>(null);

  // Load attendance locations
  const { locations, isLoading, refetch } = useAttendanceLocations(
    currentBranchId || "",
    true // Include inactive locations
  );

  // Location mutations
  const {
    createLocation,
    updateLocation,
    deleteLocation,
    toggleLocationStatus,
    isCreating,
    isUpdating,
    isDeleting,
    isTogglingStatus,
  } = useAttendanceLocationMutations();

  // Form for adding a new location
  const addForm = useForm<LocationFormValues>({
    resolver: zodResolver(locationFormSchema) as any,
    defaultValues: {
      name: "",
      latitude: 0,
      longitude: 0,
      radius: 100,
      isActive: true,
    },
  });

  // Form for editing a location
  const editForm = useForm<LocationFormValues>({
    resolver: zodResolver(locationFormSchema) as any,
    defaultValues: {
      name: "",
      latitude: 0,
      longitude: 0,
      radius: 100,
      isActive: true,
    },
  });

  // Handle adding a new location
  const handleAddLocation = (data: LocationFormValues) => {
    if (!currentBranchId) {
      toast.error("Please select a branch first");
      return;
    }

    // Convert form values to the correct types
    const locationData = {
      name: data.name,
      latitude: Number(data.latitude),
      longitude: Number(data.longitude),
      radius: Number(data.radius),
      isActive: data.isActive,
      branchId: currentBranchId,
    };

    console.log("Submitting location data:", locationData);

    createLocation(
      locationData,
      {
        onSuccess: () => {
          toast.success("Attendance location added successfully");
          setIsAddDialogOpen(false);
          addForm.reset();
          void refetch();
        },
        onError: (error) => {
          console.error("Error creating location:", error);
          toast.error(`Failed to add location: ${error.message}`);
        },
      }
    );
  };

  // Handle editing a location
  const handleEditLocation = (data: LocationFormValues) => {
    if (!selectedLocation) return;

    // Convert form values to the correct types
    const locationData = {
      id: selectedLocation.id,
      name: data.name,
      latitude: Number(data.latitude),
      longitude: Number(data.longitude),
      radius: Number(data.radius),
      isActive: data.isActive,
    };

    console.log("Updating location data:", locationData);

    updateLocation(
      locationData,
      {
        onSuccess: () => {
          toast.success("Attendance location updated successfully");
          setIsEditDialogOpen(false);
          setSelectedLocation(null);
          void refetch();
        },
        onError: (error) => {
          console.error("Error updating location:", error);
          toast.error(`Failed to update location: ${error.message}`);
        },
      }
    );
  };

  // Handle deleting a location
  const handleDeleteLocation = () => {
    if (!selectedLocation) return;

    deleteLocation(
      { id: selectedLocation.id },
      {
        onSuccess: () => {
          toast.success("Attendance location deleted successfully");
          setIsDeleteDialogOpen(false);
          setSelectedLocation(null);
          void refetch();
        },
        onError: (error) => {
          toast.error(`Failed to delete location: ${error.message}`);
        },
      }
    );
  };

  // Handle toggling location status
  const handleToggleStatus = (location: any) => {
    toggleLocationStatus(
      {
        id: location.id,
        isActive: !location.isActive,
      },
      {
        onSuccess: () => {
          toast.success(
            `Location ${location.isActive ? "deactivated" : "activated"} successfully`
          );
          void refetch();
        },
        onError: (error) => {
          toast.error(`Failed to update status: ${error.message}`);
        },
      }
    );
  };

  // Open edit dialog and populate form
  const openEditDialog = (location: any) => {
    setSelectedLocation(location);
    editForm.reset({
      name: location.name,
      latitude: location.latitude,
      longitude: location.longitude,
      radius: location.radius,
      isActive: location.isActive,
    });
    setIsEditDialogOpen(true);
  };

  // Open delete dialog
  const openDeleteDialog = (location: any) => {
    setSelectedLocation(location);
    setIsDeleteDialogOpen(true);
  };

  // Get current location from browser
  const getCurrentLocation = async (formContext: any) => {
    try {
      if (!navigator.geolocation) {
        toast.error("Geolocation is not supported by your browser");
        return;
      }

      toast.info("Getting your current location...");

      navigator.geolocation.getCurrentPosition(
        (position) => {
          formContext.setValue("latitude", position.coords.latitude);
          formContext.setValue("longitude", position.coords.longitude);
          toast.success("Current location set successfully");
        },
        (error) => {
          toast.error(`Error getting location: ${error.message}`);
        },
        { enableHighAccuracy: true }
      );
    } catch (error) {
      toast.error(`Error: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  };

  return (
    <PageWrapper>
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <div className="flex items-center">
            <div className="bg-[#00501B] dark:bg-[#7aad8c] h-8 w-1.5 rounded-md mr-3"></div>
            <h1 className="text-2xl font-bold">Attendance Locations</h1>
          </div>
          <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>
            <DialogTrigger asChild>
              <Button className="bg-[#00501B] hover:bg-[#00501B]/90">
                <Plus className="mr-2 h-4 w-4" />
                Add Location
              </Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-[500px]">
              <DialogHeader>
                <DialogTitle>Add Attendance Location</DialogTitle>
                <DialogDescription>
                  Create a new location for attendance tracking
                </DialogDescription>
              </DialogHeader>
              <div>
                <form
                  onSubmit={addForm.handleSubmit(handleAddLocation as any)}
                  className="space-y-4"
                >
                  <FormField
                    control={addForm.control}
                    name="name"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Location Name</FormLabel>
                        <FormControl>
                          <Input placeholder="Main Building" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <div className="grid grid-cols-2 gap-4">
                    <FormField
                      control={addForm.control}
                      name="latitude"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Latitude</FormLabel>
                          <FormControl>
                            <Input
                              type="number"
                              step="any"
                              placeholder="0.0000"
                              {...field}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={addForm.control}
                      name="longitude"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Longitude</FormLabel>
                          <FormControl>
                            <Input
                              type="number"
                              step="any"
                              placeholder="0.0000"
                              {...field}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                  <div className="flex justify-end">
                    <Button
                      type="button"
                      variant="outline"
                      onClick={() => getCurrentLocation(addForm)}
                      className="text-xs"
                    >
                      <MapPin className="mr-1 h-3 w-3" />
                      Use Current Location
                    </Button>
                  </div>
                  <FormField
                    control={addForm.control}
                    name="radius"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Radius (meters)</FormLabel>
                        <FormControl>
                          <Input
                            type="number"
                            placeholder="100"
                            {...field}
                          />
                        </FormControl>
                        <FormDescription>
                          The allowed distance from this location (10-1000 meters)
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={addForm.control}
                    name="isActive"
                    render={({ field }) => (
                      <FormItem className="flex flex-row items-center justify-between rounded-lg border p-3">
                        <div className="space-y-0.5">
                          <FormLabel>Active</FormLabel>
                          <FormDescription>
                            Whether this location is currently active for attendance
                          </FormDescription>
                        </div>
                        <FormControl>
                          <Switch
                            checked={field.value}
                            onCheckedChange={field.onChange}
                          />
                        </FormControl>
                      </FormItem>
                    )}
                  />
                  <DialogFooter>
                    <Button
                      type="button"
                      variant="outline"
                      onClick={() => setIsAddDialogOpen(false)}
                    >
                      Cancel
                    </Button>
                    <Button
                      type="submit"
                      className="bg-[#00501B] hover:bg-[#00501B]/90"
                      disabled={isCreating}
                    >
                      {isCreating ? "Adding..." : "Add Location"}
                    </Button>
                  </DialogFooter>
                </form>
              </div>
            </DialogContent>
          </Dialog>
        </div>

        <Card>
          <CardHeader>
            <CardTitle>Manage Attendance Locations</CardTitle>
            <CardDescription>
              Configure locations where staff can mark their attendance
            </CardDescription>
          </CardHeader>
          <CardContent>
            {isLoading ? (
              <div className="flex justify-center py-8">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-[#00501B]"></div>
              </div>
            ) : locations.length === 0 ? (
              <div className="text-center py-8">
                <MapPin className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                <h3 className="text-lg font-medium mb-1">No Locations Found</h3>
                <p className="text-sm text-gray-500 mb-4">
                  You haven't added any attendance locations yet
                </p>
                <Button
                  onClick={() => setIsAddDialogOpen(true)}
                  className="bg-[#00501B] hover:bg-[#00501B]/90"
                >
                  <Plus className="mr-2 h-4 w-4" />
                  Add Your First Location
                </Button>
              </div>
            ) : (
              <div className="overflow-x-auto">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Name</TableHead>
                      <TableHead>Coordinates</TableHead>
                      <TableHead>Radius</TableHead>
                      <TableHead>Status</TableHead>
                      <TableHead className="text-right">Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {locations.map((location: AttendanceLocation) => (
                      <TableRow key={location.id}>
                        <TableCell className="font-medium">
                          {location.name}
                        </TableCell>
                        <TableCell>
                          <div className="text-xs">
                            <div>Lat: {location.latitude.toFixed(6)}</div>
                            <div>Lng: {location.longitude.toFixed(6)}</div>
                          </div>
                        </TableCell>
                        <TableCell>{location.radius} m</TableCell>
                        <TableCell>
                          <Badge
                            variant={location.isActive ? "default" : "outline"}
                            className={
                              location.isActive
                                ? "bg-green-100 text-green-800 hover:bg-green-100"
                                : "text-gray-500"
                            }
                          >
                            {location.isActive ? "Active" : "Inactive"}
                          </Badge>
                        </TableCell>
                        <TableCell className="text-right">
                          <div className="flex justify-end space-x-2">
                            <Button
                              variant="outline"
                              size="icon"
                              onClick={() => handleToggleStatus(location)}
                              disabled={isTogglingStatus}
                              title={
                                location.isActive
                                  ? "Deactivate Location"
                                  : "Activate Location"
                              }
                            >
                              {location.isActive ? (
                                <ToggleRight className="h-4 w-4 text-green-600" />
                              ) : (
                                <ToggleLeft className="h-4 w-4 text-gray-400" />
                              )}
                            </Button>
                            <Button
                              variant="outline"
                              size="icon"
                              onClick={() => openEditDialog(location)}
                              title="Edit Location"
                            >
                              <Pencil className="h-4 w-4" />
                            </Button>
                            <Button
                              variant="outline"
                              size="icon"
                              onClick={() => openDeleteDialog(location)}
                              title="Delete Location"
                            >
                              <Trash2 className="h-4 w-4 text-red-500" />
                            </Button>
                          </div>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>
            )}
          </CardContent>
          <CardFooter className="border-t px-6 py-4">
            <p className="text-xs text-gray-500">
              Note: Staff can only mark attendance when they are within the
              specified radius of an active location.
            </p>
          </CardFooter>
        </Card>
      </div>

      {/* Edit Location Dialog */}
      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
        <DialogContent className="sm:max-w-[500px]">
          <DialogHeader>
            <DialogTitle>Edit Attendance Location</DialogTitle>
            <DialogDescription>
              Update the details for this attendance location
            </DialogDescription>
          </DialogHeader>
          <div>
            <form
              onSubmit={editForm.handleSubmit(handleEditLocation as any)}
              className="space-y-4"
            >
              <FormField
                control={editForm.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Location Name</FormLabel>
                    <FormControl>
                      <Input placeholder="Main Building" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <div className="grid grid-cols-2 gap-4">
                <FormField
                  control={editForm.control}
                  name="latitude"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Latitude</FormLabel>
                      <FormControl>
                        <Input
                          type="number"
                          step="any"
                          placeholder="0.0000"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={editForm.control}
                  name="longitude"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Longitude</FormLabel>
                      <FormControl>
                        <Input
                          type="number"
                          step="any"
                          placeholder="0.0000"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
              <div className="flex justify-end">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => getCurrentLocation(editForm)}
                  className="text-xs"
                >
                  <MapPin className="mr-1 h-3 w-3" />
                  Use Current Location
                </Button>
              </div>
              <FormField
                control={editForm.control}
                name="radius"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Radius (meters)</FormLabel>
                    <FormControl>
                      <Input type="number" placeholder="100" {...field} />
                    </FormControl>
                    <FormDescription>
                      The allowed distance from this location (10-1000 meters)
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={editForm.control}
                name="isActive"
                render={({ field }) => (
                  <FormItem className="flex flex-row items-center justify-between rounded-lg border p-3">
                    <div className="space-y-0.5">
                      <FormLabel>Active</FormLabel>
                      <FormDescription>
                        Whether this location is currently active for attendance
                      </FormDescription>
                    </div>
                    <FormControl>
                      <Switch
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                  </FormItem>
                )}
              />
              <DialogFooter>
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => setIsEditDialogOpen(false)}
                >
                  Cancel
                </Button>
                <Button
                  type="submit"
                  className="bg-[#00501B] hover:bg-[#00501B]/90"
                  disabled={isUpdating}
                >
                  {isUpdating ? "Updating..." : "Update Location"}
                </Button>
              </DialogFooter>
            </form>
          </div>
        </DialogContent>
      </Dialog>

      {/* Delete Confirmation Dialog */}
      <Dialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <DialogContent className="sm:max-w-[400px]">
          <DialogHeader>
            <DialogTitle>Delete Attendance Location</DialogTitle>
            <DialogDescription>
              Are you sure you want to delete this location? This action cannot
              be undone.
            </DialogDescription>
          </DialogHeader>
          <div className="py-4">
            <p className="text-sm font-medium">
              Location: {selectedLocation?.name}
            </p>
          </div>
          <DialogFooter>
            <Button
              type="button"
              variant="outline"
              onClick={() => setIsDeleteDialogOpen(false)}
            >
              Cancel
            </Button>
            <Button
              type="button"
              variant="destructive"
              onClick={handleDeleteLocation}
              disabled={isDeleting}
            >
              {isDeleting ? "Deleting..." : "Delete Location"}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </PageWrapper>
  );
};

AttendanceLocationsPage.getLayout = (page) => {
  return (
    <AppLayout
      title="Attendance Locations"
      description="Manage attendance locations for staff"
    >
      {page}
    </AppLayout>
  );
};

export default AttendanceLocationsPage;
